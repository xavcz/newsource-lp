{"version":3,"sources":["warning.js"],"names":[],"mappings":";;;;;;;;;AASA,YAAY,CAAC;;;;;;;;;AASb,IAAI,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,CAAC;;AAEpD,IAAI,OAAO,GAAG,mBAAW,EAAE,CAAC;;AAE5B,IAAI,OAAO,EAAE;AACX,SAAO,GAAG,UAAS,SAAS,EAAE,MAAM,EAAE,IAAI,EAAE;AAC1C,QAAI,GAAG,GAAG,SAAS,CAAC,MAAM,CAAC;AAC3B,QAAI,GAAG,IAAI,KAAK,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;AACxC,SAAK,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,EAAE,EAAE;AAClC,UAAI,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC;KAChC;AACD,QAAI,MAAM,KAAK,SAAS,EAAE;AACxB,YAAM,IAAI,KAAK,CACb,2DAA2D,GAC3D,kBAAkB,CACnB,CAAC;KACH;;AAED,QAAI,MAAM,CAAC,MAAM,GAAG,EAAE,IAAI,AAAC,UAAU,CAAE,IAAI,CAAC,MAAM,CAAC,EAAE;AACnD,YAAM,IAAI,KAAK,CACb,8DAA8D,GAC9D,uDAAuD,GAAG,MAAM,CACjE,CAAC;KACH;;AAED,QAAI,CAAC,SAAS,EAAE;AACd,UAAI,QAAQ,GAAG,CAAC,CAAC;AACjB,UAAI,OAAO,GAAG,WAAW,GACvB,MAAM,CAAC,OAAO,CAAC,KAAK,EAAE,YAAW;AAC/B,eAAO,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;OACzB,CAAC,CAAC;AACL,UAAI,OAAO,OAAO,KAAK,WAAW,EAAE;AAClC,eAAO,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;OACxB;AACD,UAAI;;;AAGF,cAAM,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC;OAC1B,CAAC,OAAM,CAAC,EAAE,EAAE;KACd;GACF,CAAC;CACH;;AAED,MAAM,CAAC,OAAO,GAAG,OAAO,CAAC","file":"warning-compiled.js","sourcesContent":["/**\n * Copyright 2014-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n'use strict';\n\n/**\n * Similar to invariant but only logs a warning if the condition is not met.\n * This can be used to log issues in development environments in critical\n * paths. Removing the logging code for production environments will keep the\n * same logic and follow the same code paths.\n */\n\nvar __DEV__ = process.env.NODE_ENV !== 'production';\n\nvar warning = function() {};\n\nif (__DEV__) {\n  warning = function(condition, format, args) {\n    var len = arguments.length;\n    args = new Array(len > 2 ? len - 2 : 0);\n    for (var key = 2; key < len; key++) {\n      args[key - 2] = arguments[key];\n    }\n    if (format === undefined) {\n      throw new Error(\n        '`warning(condition, format, ...args)` requires a warning ' +\n        'message argument'\n      );\n    }\n\n    if (format.length < 10 || (/^[s\\W]*$/).test(format)) {\n      throw new Error(\n        'The warning format should be able to uniquely identify this ' +\n        'warning. Please, use a more descriptive format than: ' + format\n      );\n    }\n\n    if (!condition) {\n      var argIndex = 0;\n      var message = 'Warning: ' +\n        format.replace(/%s/g, function() {\n          return args[argIndex++];\n        });\n      if (typeof console !== 'undefined') {\n        console.error(message);\n      }\n      try {\n        // This error was thrown as a convenience so that you can use this stack\n        // to find the callsite that caused this warning to fire.\n        throw new Error(message);\n      } catch(x) {}\n    }\n  };\n}\n\nmodule.exports = warning;\n"]}