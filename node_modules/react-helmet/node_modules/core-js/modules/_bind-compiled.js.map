{"version":3,"sources":["_bind.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;AACb,IAAI,SAAS,GAAI,OAAO,CAAC,eAAe,CAAC;IACrC,QAAQ,GAAK,OAAO,CAAC,cAAc,CAAC;IACpC,MAAM,GAAO,OAAO,CAAC,WAAW,CAAC;IACjC,UAAU,GAAG,EAAE,CAAC,KAAK;IACrB,SAAS,GAAI,EAAE,CAAC;;AAEpB,IAAI,SAAS,GAAG,SAAZ,SAAS,CAAY,CAAC,EAAE,GAAG,EAAE,IAAI,EAAC;AACpC,MAAG,EAAE,GAAG,IAAI,SAAS,CAAA,AAAC,EAAC;AACrB,SAAI,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAC,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,GAAG,CAAC,GAAG,GAAG,CAAC;AAC1D,aAAS,CAAC,GAAG,CAAC,GAAG,QAAQ,CAAC,KAAK,EAAE,eAAe,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC;GACvE,AAAC,OAAO,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;CAClC,CAAC;;AAEF,MAAM,CAAC,OAAO,GAAG,QAAQ,CAAC,IAAI,IAAI,SAAS,IAAI,CAAC,IAAI,iBAAgB;AAClE,MAAI,EAAE,GAAS,SAAS,CAAC,IAAI,CAAC;MAC1B,QAAQ,GAAG,UAAU,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;AAC7C,MAAI,KAAK,GAAG,SAAR,KAAK,gBAA0B;AACjC,QAAI,IAAI,GAAG,QAAQ,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;AACvD,WAAO,IAAI,YAAY,KAAK,GAAG,SAAS,CAAC,EAAE,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,GAAG,MAAM,CAAC,EAAE,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;GAC1F,CAAC;AACF,MAAG,QAAQ,CAAC,EAAE,CAAC,SAAS,CAAC,EAAC,KAAK,CAAC,SAAS,GAAG,EAAE,CAAC,SAAS,CAAC;AACzD,SAAO,KAAK,CAAC;CACd,CAAC","file":"_bind-compiled.js","sourcesContent":["'use strict';\nvar aFunction  = require('./_a-function')\n  , isObject   = require('./_is-object')\n  , invoke     = require('./_invoke')\n  , arraySlice = [].slice\n  , factories  = {};\n\nvar construct = function(F, len, args){\n  if(!(len in factories)){\n    for(var n = [], i = 0; i < len; i++)n[i] = 'a[' + i + ']';\n    factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');\n  } return factories[len](F, args);\n};\n\nmodule.exports = Function.bind || function bind(that /*, args... */){\n  var fn       = aFunction(this)\n    , partArgs = arraySlice.call(arguments, 1);\n  var bound = function(/* args... */){\n    var args = partArgs.concat(arraySlice.call(arguments));\n    return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that);\n  };\n  if(isObject(fn.prototype))bound.prototype = fn.prototype;\n  return bound;\n};"]}