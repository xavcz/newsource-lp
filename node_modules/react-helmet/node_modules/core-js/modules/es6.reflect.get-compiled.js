// 26.1.6 Reflect.get(target, propertyKey [, receiver])
'use strict';

var $ = require('./_'),
    has = require('./_has'),
    $export = require('./_export'),
    isObject = require('./_is-object'),
    anObject = require('./_an-object');

function get(_x, _x2) {
  var _arguments = arguments;
  var _again = true;

  _function: while (_again) /*, receiver*/{
    var target = _x,
        propertyKey = _x2;
    _again = false;

    var receiver = _arguments.length < 3 ? target : _arguments[2],
        desc,
        proto;
    if (anObject(target) === receiver) return target[propertyKey];
    if (desc = $.getDesc(target, propertyKey)) return has(desc, 'value') ? desc.value : desc.get !== undefined ? desc.get.call(receiver) : undefined;
    if (isObject(proto = $.getProto(target))) {
      _arguments = [_x = proto, _x2 = propertyKey, receiver];
      _again = true;
      receiver = desc = proto = undefined;
      continue _function;
    }
  }
}

$export($export.S, 'Reflect', { get: get });

//# sourceMappingURL=es6.reflect.get-compiled.js.map