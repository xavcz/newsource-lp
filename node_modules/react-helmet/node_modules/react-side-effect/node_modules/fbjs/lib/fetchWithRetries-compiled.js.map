{"version":3,"sources":["fetchWithRetries.js"],"names":[],"mappings":"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","file":"fetchWithRetries-compiled.js","sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule fetchWithRetries\n * @typechecks\n * \n */\n\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\nvar ExecutionEnvironment = require('./ExecutionEnvironment');\nvar Promise = require('./Promise');\n\nvar sprintf = require('./sprintf');\nvar fetch = require('./fetch');\nvar warning = require('./warning');\n\nvar DEFAULT_TIMEOUT = 15000;\nvar DEFAULT_RETRIES = [1000, 3000];\n\n/**\n * Makes a POST request to the server with the given data as the payload.\n * Automatic retries are done based on the values in `retryDelays`.\n */\nfunction fetchWithRetries(uri, initWithRetries) {\n  var _ref = initWithRetries || {};\n\n  var fetchTimeout = _ref.fetchTimeout;\n  var retryDelays = _ref.retryDelays;\n\n  var init = _objectWithoutProperties(_ref, ['fetchTimeout', 'retryDelays']);\n\n  var _fetchTimeout = fetchTimeout != null ? fetchTimeout : DEFAULT_TIMEOUT;\n  var _retryDelays = retryDelays != null ? retryDelays : DEFAULT_RETRIES;\n\n  var requestsAttempted = 0;\n  var requestStartTime = 0;\n  return new Promise(function (resolve, reject) {\n    /**\n     * Sends a request to the server that will timeout after `fetchTimeout`.\n     * If the request fails or times out a new request might be scheduled.\n     */\n    function sendTimedRequest() {\n      requestsAttempted++;\n      requestStartTime = Date.now();\n      var isRequestAlive = true;\n      var request = fetch(uri, init);\n      var requestTimeout = setTimeout(function () {\n        isRequestAlive = false;\n        if (shouldRetry(requestsAttempted)) {\n          process.env.NODE_ENV !== 'production' ? warning(false, 'fetchWithRetries: HTTP timeout, retrying.') : undefined;\n          retryRequest();\n        } else {\n          reject(new Error(sprintf('fetchWithRetries(): Failed to get response from server, ' + 'tried %s times.', requestsAttempted)));\n        }\n      }, _fetchTimeout);\n\n      request.then(function (response) {\n        clearTimeout(requestTimeout);\n        if (isRequestAlive) {\n          // We got a response, we can clear the timeout.\n          if (response.status >= 200 && response.status < 300) {\n            // Got a response code that indicates success, resolve the promise.\n            resolve(response);\n          } else if (shouldRetry(requestsAttempted)) {\n            // Fetch was not successful, retrying.\n            // TODO(#7595849): Only retry on transient HTTP errors.\n            process.env.NODE_ENV !== 'production' ? process.env.NODE_ENV !== 'production' ? warning(false, 'fetchWithRetries: HTTP error, retrying.') : undefined : undefined, retryRequest();\n          } else {\n            // Request was not successful, giving up.\n            reject(response);\n          }\n        }\n      })['catch'](function (error) {\n        clearTimeout(requestTimeout);\n        if (shouldRetry(requestsAttempted)) {\n          retryRequest();\n        } else {\n          reject(error);\n        }\n      });\n    }\n\n    /**\n     * Schedules another run of sendTimedRequest based on how much time has\n     * passed between the time the last request was sent and now.\n     */\n    function retryRequest() {\n      var retryDelay = _retryDelays[requestsAttempted - 1];\n      var retryStartTime = requestStartTime + retryDelay;\n      // Schedule retry for a configured duration after last request started.\n      setTimeout(sendTimedRequest, retryStartTime - Date.now());\n    }\n\n    /**\n     * Checks if another attempt should be done to send a request to the server.\n     */\n    function shouldRetry(attempt) {\n      return ExecutionEnvironment.canUseDOM && attempt <= _retryDelays.length;\n    }\n\n    sendTimedRequest();\n  });\n}\n\nmodule.exports = fetchWithRetries;"]}