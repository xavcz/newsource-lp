{"version":3,"sources":["dev-expression.js"],"names":[],"mappings":";;;;;;;;;AASA,YAAY,CAAC;;AAEb,MAAM,CAAC,OAAO,GAAG,UAAS,KAAK,EAAE;AAC/B,MAAI,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC;;AAEpB,MAAI,cAAc,GAAG,CAAC,CAAC,gBAAgB,CACrC,KAAK,EACL,CAAC,CAAC,gBAAgB,CAChB,CAAC,CAAC,gBAAgB,CAChB,CAAC,CAAC,UAAU,CAAC,SAAS,CAAC,EACvB,CAAC,CAAC,UAAU,CAAC,KAAK,CAAC,EACnB,KAAK,CACN,EACD,CAAC,CAAC,UAAU,CAAC,UAAU,CAAC,EACxB,KAAK,CACN,EACD,CAAC,CAAC,OAAO,CAAC,YAAY,CAAC,CACxB,CAAC;;AAEF,SAAO,IAAI,KAAK,CAAC,WAAW,CAAC,qBAAqB,EAAE;AAClD,cAAU,EAAE;AACV,WAAK,EAAE,eAAS,IAAI,EAAE,MAAM,EAAE;;AAE5B,YAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,MAAM,EAAE;AACnC,iBAAO,SAAS,CAAC;SAClB;;AAED,YAAI,IAAI,CAAC,YAAY,CAAC,EAAC,IAAI,EAAE,SAAS,EAAC,CAAC,EAAE;AACxC,iBAAO,cAAc,CAAC;SACvB;OACF;KACF;AACD,kBAAc,EAAE;AACd,UAAI,EAAE,cAAS,IAAI,EAAE,MAAM,EAAE;;AAE3B,YAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,MAAM,EAAE;AACnC,iBAAO,SAAS,CAAC;SAClB;AACD,YAAI,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,YAAY,CAAC,EAAC,IAAI,EAAE,WAAW,EAAC,CAAC,EAAE;;;;;;;;;;;;;;;;;;;;;AAqBxD,cAAI,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;AAClC,iBAAO,CAAC,CAAC,WAAW,CAClB,CAAC,CAAC,eAAe,CAAC,GAAG,EAAE,SAAS,CAAC,EACjC,CAAC,CAAC,cAAc,CAAC,CACf,CAAC,CAAC,WAAW,CACX,cAAc,EACd,CAAC,CAAC,cAAc,CAAC,CACf,CAAC,CAAC,mBAAmB,CACnB,CAAC,CAAC,cAAc,CACd,IAAI,CAAC,MAAM,EACX,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CACnD,CACF,CACF,CAAC,EACF,CAAC,CAAC,cAAc,CAAC,CACf,CAAC,CAAC,mBAAmB,CACnB,CAAC,CAAC,cAAc,CACd,IAAI,CAAC,MAAM,EACX,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CACnB,CACF,CACF,CAAC,CACH,CACF,CAAC,CACH,CAAC;SACH,MAAM,IAAI,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,YAAY,CAAC,EAAC,IAAI,EAAE,SAAS,EAAC,CAAC,EAAE;;;;;;;;;;;;;;;AAe7D,iBAAO,CAAC,CAAC,WAAW,CAClB,cAAc,EACd,CAAC,CAAC,cAAc,CAAC,CACf,CAAC,CAAC,mBAAmB,CACnB,IAAI,CACL,CACF,CAAC,CACH,CAAC;SACH;OACF;KACF;GACF,CAAC,CAAC;CAEJ,CAAC","file":"dev-expression-compiled.js","sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n'use strict';\n\nmodule.exports = function(babel) {\n  var t = babel.types;\n\n  var DEV_EXPRESSION = t.binaryExpression(\n    '!==',\n    t.memberExpression(\n      t.memberExpression(\n        t.identifier('process'),\n        t.identifier('env'),\n        false\n      ),\n      t.identifier('NODE_ENV'),\n      false\n    ),\n    t.literal('production')\n  );\n\n  return new babel.Transformer('fbjs.dev-expression', {\n    Identifier: {\n      enter: function(node, parent) {\n        // Do nothing when testing\n        if (process.env.NODE_ENV === 'test') {\n          return undefined;\n        }\n        // replace __DEV__ with process.env.NODE_ENV !== 'production'\n        if (this.isIdentifier({name: '__DEV__'})) {\n          return DEV_EXPRESSION;\n        }\n      },\n    },\n    CallExpression: {\n      exit: function(node, parent) {\n        // Do nothing when testing\n        if (process.env.NODE_ENV === 'test') {\n          return undefined;\n        }\n        if (this.get('callee').isIdentifier({name: 'invariant'})) {\n          // Turns this code:\n          //\n          // invariant(condition, argument, argument);\n          //\n          // into this:\n          //\n          // if (!condition) {\n          //   if (\"production\" !== process.env.NODE_ENV) {\n          //     invariant(false, argument, argument);\n          //   } else {\n          //     invariant(false);\n          //   }\n          // }\n          //\n          // Specifically this does 2 things:\n          // 1. Checks the condition first, preventing an extra function call.\n          // 2. Adds an environment check so that verbose error messages aren't\n          //    shipped to production.\n          // The generated code is longer than the original code but will dead\n          // code removal in a minifier will strip that out.\n          var condition = node.arguments[0];\n          return t.ifStatement(\n            t.unaryExpression('!', condition),\n            t.blockStatement([\n              t.ifStatement(\n                DEV_EXPRESSION,\n                t.blockStatement([\n                  t.expressionStatement(\n                    t.callExpression(\n                      node.callee,\n                      [t.literal(false)].concat(node.arguments.slice(1))\n                    )\n                  ),\n                ]),\n                t.blockStatement([\n                  t.expressionStatement(\n                    t.callExpression(\n                      node.callee,\n                      [t.literal(false)]\n                    )\n                  ),\n                ])\n              ),\n            ])\n          );\n        } else if (this.get('callee').isIdentifier({name: 'warning'})) {\n          // Turns this code:\n          //\n          // warning(condition, argument, argument);\n          //\n          // into this:\n          //\n          // if (\"production\" !== process.env.NODE_ENV) {\n          //   warning(condition, argument, argument);\n          // }\n          //\n          // The goal is to strip out warning calls entirely in production. We\n          // don't need the same optimizations for conditions that we use for\n          // invariant because we don't care about an extra call in __DEV__\n\n          return t.ifStatement(\n            DEV_EXPRESSION,\n            t.blockStatement([\n              t.expressionStatement(\n                node\n              ),\n            ])\n          );\n        }\n      },\n    },\n  });\n\n};\n"]}