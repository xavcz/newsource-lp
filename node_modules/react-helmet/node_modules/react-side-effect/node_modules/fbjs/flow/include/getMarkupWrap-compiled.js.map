{"version":3,"sources":["getMarkupWrap.js"],"names":[],"mappings":";;;;;;;;;;;;;;;AAaA,IAAI,oBAAoB,GAAG,OAAO,CAAC,sBAAsB,CAAC,CAAC;;AAE3D,IAAI,SAAS,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC;;;;;AAKrC,IAAI,SAAS,GACX,oBAAoB,CAAC,SAAS,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC;;;;;;;;;AASxE,IAAI,UAAU,GAAG,EAAE,CAAC;;AAEpB,IAAI,UAAU,GAAG,CAAC,CAAC,EAAE,0BAA0B,EAAE,WAAW,CAAC,CAAC;AAC9D,IAAI,SAAS,GAAG,CAAC,CAAC,EAAE,SAAS,EAAE,UAAU,CAAC,CAAC;AAC3C,IAAI,MAAM,GAAG,CAAC,CAAC,EAAE,oBAAoB,EAAE,uBAAuB,CAAC,CAAC;;AAEhE,IAAI,OAAO,GAAG,CAAC,CAAC,EAAE,0CAA0C,EAAE,QAAQ,CAAC,CAAC;;AAExE,IAAI,UAAU,GAAG;AACf,KAAG,EAAE,CAAC,CAAC,EAAE,QAAQ,EAAE,QAAQ,CAAC;;AAE5B,QAAM,EAAE,CAAC,CAAC,EAAE,OAAO,EAAE,QAAQ,CAAC;AAC9B,OAAK,EAAE,CAAC,CAAC,EAAE,kCAAkC,EAAE,qBAAqB,CAAC;AACrE,UAAQ,EAAE,CAAC,CAAC,EAAE,YAAY,EAAE,aAAa,CAAC;AAC1C,SAAO,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,WAAW,CAAC;AACrC,MAAI,EAAE,CAAC,CAAC,EAAE,gBAAgB,EAAE,kBAAkB,CAAC;;AAE/C,YAAU,EAAE,UAAU;AACtB,UAAQ,EAAE,UAAU;;AAEpB,WAAS,EAAE,SAAS;AACpB,YAAU,EAAE,SAAS;AACrB,SAAO,EAAE,SAAS;AAClB,SAAO,EAAE,SAAS;AAClB,SAAO,EAAE,SAAS;;AAElB,MAAI,EAAE,MAAM;AACZ,MAAI,EAAE,MAAM;CACb,CAAC;;;;;AAKF,IAAI,WAAW,GAAG,CAChB,QAAQ,EACR,UAAU,EACV,MAAM,EACN,SAAS,EACT,GAAG,EACH,OAAO,EACP,MAAM,EACN,gBAAgB,EAChB,MAAM,EACN,MAAM,EACN,SAAS,EACT,SAAS,EACT,UAAU,EACV,gBAAgB,EAChB,MAAM,EACN,MAAM,EACN,MAAM,EACN,OAAO,CACR,CAAC;AACF,WAAW,CAAC,OAAO,CAAC,UAAC,QAAQ,EAAK;AAChC,YAAU,CAAC,QAAQ,CAAC,GAAG,OAAO,CAAC;AAC/B,YAAU,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC;CAC7B,CAAC,CAAC;;;;;;;;;;AAUH,SAAS,aAAa,CAAC,QAAQ,EAAE;AAC/B,WAAS,CAAC,CAAC,CAAC,SAAS,EAAE,sCAAsC,CAAC,CAAC;AAC/D,MAAI,CAAC,UAAU,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAE;AACxC,YAAQ,GAAG,GAAG,CAAC;GAChB;AACD,MAAI,CAAC,UAAU,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAE;AACxC,QAAI,QAAQ,KAAK,GAAG,EAAE;AACpB,eAAS,CAAC,SAAS,GAAG,UAAU,CAAC;KAClC,MAAM;AACL,eAAS,CAAC,SAAS,GAAG,GAAG,GAAG,QAAQ,GAAG,KAAK,GAAG,QAAQ,GAAG,GAAG,CAAC;KAC/D;AACD,cAAU,CAAC,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,UAAU,CAAC;GAC9C;AACD,SAAO,UAAU,CAAC,QAAQ,CAAC,GAAG,UAAU,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC;CAC3D;;AAGD,MAAM,CAAC,OAAO,GAAG,aAAa,CAAC","file":"getMarkupWrap-compiled.js","sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule getMarkupWrap\n */\n\n/*eslint-disable fb-www/unsafe-html */\n\nvar ExecutionEnvironment = require('ExecutionEnvironment');\n\nvar invariant = require('invariant');\n\n/**\n * Dummy container used to detect which wraps are necessary.\n */\nvar dummyNode =\n  ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;\n\n/**\n * Some browsers cannot use `innerHTML` to render certain elements standalone,\n * so we wrap them, render the wrapped nodes, then extract the desired node.\n *\n * In IE8, certain elements cannot render alone, so wrap all elements ('*').\n */\n\nvar shouldWrap = {};\n\nvar selectWrap = [1, '<select multiple=\"true\">', '</select>'];\nvar tableWrap = [1, '<table>', '</table>'];\nvar trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];\n\nvar svgWrap = [1, '<svg xmlns=\"http://www.w3.org/2000/svg\">', '</svg>'];\n\nvar markupWrap = {\n  '*': [1, '?<div>', '</div>'],\n\n  'area': [1, '<map>', '</map>'],\n  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],\n  'legend': [1, '<fieldset>', '</fieldset>'],\n  'param': [1, '<object>', '</object>'],\n  'tr': [2, '<table><tbody>', '</tbody></table>'],\n\n  'optgroup': selectWrap,\n  'option': selectWrap,\n\n  'caption': tableWrap,\n  'colgroup': tableWrap,\n  'tbody': tableWrap,\n  'tfoot': tableWrap,\n  'thead': tableWrap,\n\n  'td': trWrap,\n  'th': trWrap,\n};\n\n// Initialize the SVG elements since we know they'll always need to be wrapped\n// consistently. If they are created inside a <div> they will be initialized in\n// the wrong namespace (and will not display).\nvar svgElements = [\n  'circle',\n  'clipPath',\n  'defs',\n  'ellipse',\n  'g',\n  'image',\n  'line',\n  'linearGradient',\n  'mask',\n  'path',\n  'pattern',\n  'polygon',\n  'polyline',\n  'radialGradient',\n  'rect',\n  'stop',\n  'text',\n  'tspan',\n];\nsvgElements.forEach((nodeName) => {\n  markupWrap[nodeName] = svgWrap;\n  shouldWrap[nodeName] = true;\n});\n\n/**\n * Gets the markup wrap configuration for the supplied `nodeName`.\n *\n * NOTE: This lazily detects which wraps are necessary for the current browser.\n *\n * @param {string} nodeName Lowercase `nodeName`.\n * @return {?array} Markup wrap configuration, if applicable.\n */\nfunction getMarkupWrap(nodeName) {\n  invariant(!!dummyNode, 'Markup wrapping node not initialized');\n  if (!markupWrap.hasOwnProperty(nodeName)) {\n    nodeName = '*';\n  }\n  if (!shouldWrap.hasOwnProperty(nodeName)) {\n    if (nodeName === '*') {\n      dummyNode.innerHTML = '<link />';\n    } else {\n      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';\n    }\n    shouldWrap[nodeName] = !dummyNode.firstChild;\n  }\n  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;\n}\n\n\nmodule.exports = getMarkupWrap;\n"]}