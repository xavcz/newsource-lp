{"version":3,"sources":["CSSCore.js"],"names":[],"mappings":";;;;;;;;;;;;;;AAYA,IAAI,SAAS,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC;;;;;;;;;;AAUrC,IAAI,OAAO,GAAG;;;;;;;;;AASZ,UAAQ,EAAE,kBAAS,OAAO,EAAE,SAAS,EAAE;AACrC,aAAS,CACP,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,EACrB,iEAAiE,GACjE,mBAAmB,EAAE,SAAS,CAC/B,CAAC;;AAEF,QAAI,SAAS,EAAE;AACb,UAAI,OAAO,CAAC,SAAS,EAAE;AACrB,eAAO,CAAC,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;OAClC,MAAM,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,OAAO,EAAE,SAAS,CAAC,EAAE;AAChD,eAAO,CAAC,SAAS,GAAG,OAAO,CAAC,SAAS,GAAG,GAAG,GAAG,SAAS,CAAC;OACzD;KACF;AACD,WAAO,OAAO,CAAC;GAChB;;;;;;;;;AASD,aAAW,EAAE,qBAAS,OAAO,EAAE,SAAS,EAAE;AACxC,aAAS,CACP,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,EACrB,oEAAoE,GACpE,mBAAmB,EAAE,SAAS,CAC/B,CAAC;;AAEF,QAAI,SAAS,EAAE;AACb,UAAI,OAAO,CAAC,SAAS,EAAE;AACrB,eAAO,CAAC,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;OACrC,MAAM,IAAI,OAAO,CAAC,QAAQ,CAAC,OAAO,EAAE,SAAS,CAAC,EAAE;AAC/C,eAAO,CAAC,SAAS,GAAG,OAAO,CAAC,SAAS,CAClC,OAAO,CAAC,IAAI,MAAM,CAAC,SAAS,GAAG,SAAS,GAAG,WAAW,EAAE,GAAG,CAAC,EAAE,IAAI,CAAC,CACnE,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC;SACpB,OAAO,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC;OAC9B;KACF;AACD,WAAO,OAAO,CAAC;GAChB;;;;;;;;;;AAUD,gBAAc,EAAE,wBAAS,OAAO,EAAE,SAAS,EAAE,IAAI,EAAE;AACjD,WAAO,CAAC,IAAI,GAAG,OAAO,CAAC,QAAQ,GAAG,OAAO,CAAC,WAAW,CAAA,CAAE,OAAO,EAAE,SAAS,CAAC,CAAC;GAC5E;;;;;;;;;AASD,UAAQ,EAAE,kBAAS,OAAO,EAAE,SAAS,EAAE;AACrC,aAAS,CACP,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,EACrB,8CAA8C,CAC/C,CAAC;AACF,QAAI,OAAO,CAAC,SAAS,EAAE;AACrB,aAAO,CAAC,CAAC,SAAS,IAAI,OAAO,CAAC,SAAS,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;KAC7D;AACD,WAAO,CAAC,GAAG,GAAG,OAAO,CAAC,SAAS,GAAG,GAAG,CAAA,CAAE,OAAO,CAAC,GAAG,GAAG,SAAS,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;GAC5E;;CAEF,CAAC;;AAEF,MAAM,CAAC,OAAO,GAAG,OAAO,CAAC","file":"CSSCore-compiled.js","sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule CSSCore\n * @typechecks\n */\n\nvar invariant = require('invariant');\n\n/**\n * The CSSCore module specifies the API (and implements most of the methods)\n * that should be used when dealing with the display of elements (via their\n * CSS classes and visibility on screen. It is an API focused on mutating the\n * display and not reading it as no logical state should be encoded in the\n * display of elements.\n */\n\nvar CSSCore = {\n\n  /**\n   * Adds the class passed in to the element if it doesn't already have it.\n   *\n   * @param {DOMElement} element the element to set the class on\n   * @param {string} className the CSS className\n   * @return {DOMElement} the element passed in\n   */\n  addClass: function(element, className) {\n    invariant(\n      !/\\s/.test(className),\n      'CSSCore.addClass takes only a single class name. \"%s\" contains ' +\n      'multiple classes.', className\n    );\n\n    if (className) {\n      if (element.classList) {\n        element.classList.add(className);\n      } else if (!CSSCore.hasClass(element, className)) {\n        element.className = element.className + ' ' + className;\n      }\n    }\n    return element;\n  },\n\n  /**\n   * Removes the class passed in from the element\n   *\n   * @param {DOMElement} element the element to set the class on\n   * @param {string} className the CSS className\n   * @return {DOMElement} the element passed in\n   */\n  removeClass: function(element, className) {\n    invariant(\n      !/\\s/.test(className),\n      'CSSCore.removeClass takes only a single class name. \"%s\" contains ' +\n      'multiple classes.', className\n    );\n\n    if (className) {\n      if (element.classList) {\n        element.classList.remove(className);\n      } else if (CSSCore.hasClass(element, className)) {\n        element.className = element.className\n          .replace(new RegExp('(^|\\\\s)' + className + '(?:\\\\s|$)', 'g'), '$1')\n          .replace(/\\s+/g, ' ') // multiple spaces to one\n          .replace(/^\\s*|\\s*$/g, ''); // trim the ends\n      }\n    }\n    return element;\n  },\n\n  /**\n   * Helper to add or remove a class from an element based on a condition.\n   *\n   * @param {DOMElement} element the element to set the class on\n   * @param {string} className the CSS className\n   * @param {*} bool condition to whether to add or remove the class\n   * @return {DOMElement} the element passed in\n   */\n  conditionClass: function(element, className, bool) {\n    return (bool ? CSSCore.addClass : CSSCore.removeClass)(element, className);\n  },\n\n  /**\n   * Tests whether the element has the class specified.\n   *\n   * @param {DOMNode|DOMWindow} element the element to set the class on\n   * @param {string} className the CSS className\n   * @return {boolean} true if the element has the class, false if not\n   */\n  hasClass: function(element, className) {\n    invariant(\n      !/\\s/.test(className),\n      'CSS.hasClass takes only a single class name.'\n    );\n    if (element.classList) {\n      return !!className && element.classList.contains(className);\n    }\n    return (' ' + element.className + ' ').indexOf(' ' + className + ' ') > -1;\n  }\n\n};\n\nmodule.exports = CSSCore;\n"]}