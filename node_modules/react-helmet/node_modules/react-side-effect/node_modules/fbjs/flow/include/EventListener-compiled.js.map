{"version":3,"sources":["EventListener.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAmBA,IAAI,aAAa,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC;;;;;;AAM7C,IAAI,aAAa,GAAG;;;;;;;;;AASlB,QAAM,EAAE,gBAAS,MAAM,EAAE,SAAS,EAAE,QAAQ,EAAE;AAC5C,QAAI,MAAM,CAAC,gBAAgB,EAAE;AAC3B,YAAM,CAAC,gBAAgB,CAAC,SAAS,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC;AACpD,aAAO;AACL,cAAM,EAAE,kBAAW;AACjB,gBAAM,CAAC,mBAAmB,CAAC,SAAS,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC;SACxD;OACF,CAAC;KACH,MAAM,IAAI,MAAM,CAAC,WAAW,EAAE;AAC7B,YAAM,CAAC,WAAW,CAAC,IAAI,GAAG,SAAS,EAAE,QAAQ,CAAC,CAAC;AAC/C,aAAO;AACL,cAAM,EAAE,kBAAW;AACjB,gBAAM,CAAC,WAAW,CAAC,IAAI,GAAG,SAAS,EAAE,QAAQ,CAAC,CAAC;SAChD;OACF,CAAC;KACH;GACF;;;;;;;;;;AAUD,SAAO,EAAE,iBAAS,MAAM,EAAE,SAAS,EAAE,QAAQ,EAAE;AAC7C,QAAI,MAAM,CAAC,gBAAgB,EAAE;AAC3B,YAAM,CAAC,gBAAgB,CAAC,SAAS,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC;AACnD,aAAO;AACL,cAAM,EAAE,kBAAY;AAClB,gBAAM,CAAC,mBAAmB,CAAC,SAAS,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC;SACvD;OACF,CAAC;KACH,MAAM;AACL,UAAI,OAAO,EAAE;AACX,eAAO,CAAC,KAAK,CACX,8DAA8D,GAC9D,oEAAoE,GACpE,+BAA+B,CAChC,CAAC;OACH;AACD,aAAO;AACL,cAAM,EAAE,aAAa;OACtB,CAAC;KACH;GACF;;AAED,iBAAe,EAAE,2BAAW,EAAE;CAC/B,CAAC;;AAEF,MAAM,CAAC,OAAO,GAAG,aAAa,CAAC","file":"EventListener-compiled.js","sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule EventListener\n * @typechecks\n */\n\nvar emptyFunction = require('emptyFunction');\n\n/**\n * Upstream version of event listener. Does not take into account specific\n * nature of platform.\n */\nvar EventListener = {\n  /**\n   * Listen to DOM events during the bubble phase.\n   *\n   * @param {DOMEventTarget} target DOM element to register listener on.\n   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.\n   * @param {function} callback Callback function.\n   * @return {object} Object with a `remove` method.\n   */\n  listen: function(target, eventType, callback) {\n    if (target.addEventListener) {\n      target.addEventListener(eventType, callback, false);\n      return {\n        remove: function() {\n          target.removeEventListener(eventType, callback, false);\n        }\n      };\n    } else if (target.attachEvent) {\n      target.attachEvent('on' + eventType, callback);\n      return {\n        remove: function() {\n          target.detachEvent('on' + eventType, callback);\n        }\n      };\n    }\n  },\n\n  /**\n   * Listen to DOM events during the capture phase.\n   *\n   * @param {DOMEventTarget} target DOM element to register listener on.\n   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.\n   * @param {function} callback Callback function.\n   * @return {object} Object with a `remove` method.\n   */\n  capture: function(target, eventType, callback) {\n    if (target.addEventListener) {\n      target.addEventListener(eventType, callback, true);\n      return {\n        remove: function () {\n          target.removeEventListener(eventType, callback, true);\n        }\n      };\n    } else {\n      if (__DEV__) {\n        console.error(\n          'Attempted to listen to events during the capture phase on a ' +\n          'browser that does not support the capture phase. Your application ' +\n          'will not receive some events.'\n        );\n      }\n      return {\n        remove: emptyFunction\n      };\n    }\n  },\n\n  registerDefault: function() {}\n};\n\nmodule.exports = EventListener;\n"]}