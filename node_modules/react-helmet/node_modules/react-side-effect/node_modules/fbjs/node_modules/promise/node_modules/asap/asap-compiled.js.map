{"version":3,"sources":["asap.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;AAEb,IAAI,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC;AAC/B,IAAI,SAAS,GAAG,EAAE,CAAC;;;;;;;;;;;;AAYnB,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC;AACtB,SAAS,IAAI,CAAC,IAAI,EAAE;AAChB,QAAI,OAAO,CAAC;AACZ,QAAI,SAAS,CAAC,MAAM,EAAE;AAClB,eAAO,GAAG,SAAS,CAAC,GAAG,EAAE,CAAC;KAC7B,MAAM;AACH,eAAO,GAAG,IAAI,OAAO,EAAE,CAAC;KAC3B;AACD,WAAO,CAAC,IAAI,GAAG,IAAI,CAAC;AACpB,WAAO,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;AAChC,WAAO,CAAC,OAAO,CAAC,CAAC;CACpB;;AAED,SAAS,OAAO,GAAG;AACf,QAAI,CAAC,IAAI,GAAG,IAAI,CAAC;AACjB,QAAI,CAAC,MAAM,GAAG,IAAI,CAAC;CACtB;;AAED,OAAO,CAAC,SAAS,CAAC,IAAI,GAAG,YAAY;AACjC,QAAI,IAAI,CAAC,MAAM,EAAE;AACb,YAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;KACvB;AACD,QAAI,KAAK,GAAG,IAAI,CAAC;AACjB,QAAI;AACA,YAAI,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;AACjB,aAAK,GAAG,KAAK,CAAC;;;AAGd,YAAI,IAAI,CAAC,MAAM,EAAE;AACb,gBAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;SACtB;KACJ,SAAS;;;AAGN,YAAI,KAAK,EAAE;;;;;;AAMP,mBAAO,CAAC,YAAY,EAAE,CAAC;SAC1B;;;AAGD,YAAI,CAAC,IAAI,GAAG,IAAI,CAAC;AACjB,YAAI,CAAC,MAAM,GAAG,IAAI,CAAC;AACnB,iBAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KACxB;CACJ,CAAC","file":"asap-compiled.js","sourcesContent":["\"use strict\";\n\nvar rawAsap = require(\"./raw\");\nvar freeTasks = [];\n\n/**\n * Calls a task as soon as possible after returning, in its own event, with\n * priority over IO events. An exception thrown in a task can be handled by\n * `process.on(\"uncaughtException\") or `domain.on(\"error\")`, but will otherwise\n * crash the process. If the error is handled, all subsequent tasks will\n * resume.\n *\n * @param {{call}} task A callable object, typically a function that takes no\n * arguments.\n */\nmodule.exports = asap;\nfunction asap(task) {\n    var rawTask;\n    if (freeTasks.length) {\n        rawTask = freeTasks.pop();\n    } else {\n        rawTask = new RawTask();\n    }\n    rawTask.task = task;\n    rawTask.domain = process.domain;\n    rawAsap(rawTask);\n}\n\nfunction RawTask() {\n    this.task = null;\n    this.domain = null;\n}\n\nRawTask.prototype.call = function () {\n    if (this.domain) {\n        this.domain.enter();\n    }\n    var threw = true;\n    try {\n        this.task.call();\n        threw = false;\n        // If the task throws an exception (presumably) Node.js restores the\n        // domain stack for the next event.\n        if (this.domain) {\n            this.domain.exit();\n        }\n    } finally {\n        // We use try/finally and a threw flag to avoid messing up stack traces\n        // when we catch and release errors.\n        if (threw) {\n            // In Node.js, uncaught exceptions are considered fatal errors.\n            // Re-throw them to interrupt flushing!\n            // Ensure that flushing continues if an uncaught exception is\n            // suppressed listening process.on(\"uncaughtException\") or\n            // domain.on(\"error\").\n            rawAsap.requestFlush();\n        }\n        // If the task threw an error, we do not want to exit the domain here.\n        // Exiting the domain would prevent the domain from catching the error.\n        this.task = null;\n        this.domain = null;\n        freeTasks.push(this);\n    }\n};\n\n"]}