{"version":3,"sources":["browser-asap.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;AAGb,IAAI,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC;;AAE/B,IAAI,SAAS,GAAG,EAAE,CAAC;;;AAGnB,IAAI,aAAa,GAAG,EAAE,CAAC;AACvB,IAAI,iBAAiB,GAAG,OAAO,CAAC,wBAAwB,CAAC,eAAe,CAAC,CAAC;;AAE1E,SAAS,eAAe,GAAG;AACvB,QAAI,aAAa,CAAC,MAAM,EAAE;AACtB,cAAM,aAAa,CAAC,KAAK,EAAE,CAAC;KAC/B;CACJ;;;;;;;;;;AAUD,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC;AACtB,SAAS,IAAI,CAAC,IAAI,EAAE;AAChB,QAAI,OAAO,CAAC;AACZ,QAAI,SAAS,CAAC,MAAM,EAAE;AAClB,eAAO,GAAG,SAAS,CAAC,GAAG,EAAE,CAAC;KAC7B,MAAM;AACH,eAAO,GAAG,IAAI,OAAO,EAAE,CAAC;KAC3B;AACD,WAAO,CAAC,IAAI,GAAG,IAAI,CAAC;AACpB,WAAO,CAAC,OAAO,CAAC,CAAC;CACpB;;;;AAID,SAAS,OAAO,GAAG;AACf,QAAI,CAAC,IAAI,GAAG,IAAI,CAAC;CACpB;;;;AAID,OAAO,CAAC,SAAS,CAAC,IAAI,GAAG,YAAY;AACjC,QAAI;AACA,YAAI,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;KACpB,CAAC,OAAO,KAAK,EAAE;AACZ,YAAI,IAAI,CAAC,OAAO,EAAE;;;;AAId,gBAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;SACvB,MAAM;;;;AAIH,yBAAa,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAC1B,6BAAiB,EAAE,CAAC;SACvB;KACJ,SAAS;AACN,YAAI,CAAC,IAAI,GAAG,IAAI,CAAC;AACjB,iBAAS,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC;KACtC;CACJ,CAAC","file":"browser-asap-compiled.js","sourcesContent":["\"use strict\";\n\n// rawAsap provides everything we need except exception management.\nvar rawAsap = require(\"./raw\");\n// RawTasks are recycled to reduce GC churn.\nvar freeTasks = [];\n// We queue errors to ensure they are thrown in right order (FIFO).\n// Array-as-queue is good enough here, since we are just dealing with exceptions.\nvar pendingErrors = [];\nvar requestErrorThrow = rawAsap.makeRequestCallFromTimer(throwFirstError);\n\nfunction throwFirstError() {\n    if (pendingErrors.length) {\n        throw pendingErrors.shift();\n    }\n}\n\n/**\n * Calls a task as soon as possible after returning, in its own event, with priority\n * over other events like animation, reflow, and repaint. An error thrown from an\n * event will not interrupt, nor even substantially slow down the processing of\n * other events, but will be rather postponed to a lower priority event.\n * @param {{call}} task A callable object, typically a function that takes no\n * arguments.\n */\nmodule.exports = asap;\nfunction asap(task) {\n    var rawTask;\n    if (freeTasks.length) {\n        rawTask = freeTasks.pop();\n    } else {\n        rawTask = new RawTask();\n    }\n    rawTask.task = task;\n    rawAsap(rawTask);\n}\n\n// We wrap tasks with recyclable task objects.  A task object implements\n// `call`, just like a function.\nfunction RawTask() {\n    this.task = null;\n}\n\n// The sole purpose of wrapping the task is to catch the exception and recycle\n// the task object after its single use.\nRawTask.prototype.call = function () {\n    try {\n        this.task.call();\n    } catch (error) {\n        if (asap.onerror) {\n            // This hook exists purely for testing purposes.\n            // Its name will be periodically randomized to break any code that\n            // depends on its existence.\n            asap.onerror(error);\n        } else {\n            // In a web browser, exceptions are not fatal. However, to avoid\n            // slowing down the queue of pending tasks, we rethrow the error in a\n            // lower priority turn.\n            pendingErrors.push(error);\n            requestErrorThrow();\n        }\n    } finally {\n        this.task = null;\n        freeTasks[freeTasks.length] = this;\n    }\n};\n"]}