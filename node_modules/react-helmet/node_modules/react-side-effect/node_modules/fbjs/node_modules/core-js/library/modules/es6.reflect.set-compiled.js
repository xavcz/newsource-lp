// 26.1.13 Reflect.set(target, propertyKey, V [, receiver])
'use strict';

var $ = require('./$'),
    has = require('./$.has'),
    $export = require('./$.export'),
    createDesc = require('./$.property-desc'),
    anObject = require('./$.an-object'),
    isObject = require('./$.is-object');

function set(_x, _x2, _x3) {
  var _arguments = arguments;
  var _again = true;

  _function: while (_again) /*, receiver*/{
    var target = _x,
        propertyKey = _x2,
        V = _x3;
    _again = false;

    var receiver = _arguments.length < 4 ? target : _arguments[3],
        ownDesc = $.getDesc(anObject(target), propertyKey),
        existingDescriptor,
        proto;
    if (!ownDesc) {
      if (isObject(proto = $.getProto(target))) {
        _arguments = [_x = proto, _x2 = propertyKey, _x3 = V, receiver];
        _again = true;
        receiver = ownDesc = existingDescriptor = proto = undefined;
        continue _function;
      }
      ownDesc = createDesc(0);
    }
    if (has(ownDesc, 'value')) {
      if (ownDesc.writable === false || !isObject(receiver)) return false;
      existingDescriptor = $.getDesc(receiver, propertyKey) || createDesc(0);
      existingDescriptor.value = V;
      $.setDesc(receiver, propertyKey, existingDescriptor);
      return true;
    }
    return ownDesc.set === undefined ? false : (ownDesc.set.call(receiver, V), true);
  }
}

$export($export.S, 'Reflect', { set: set });

//# sourceMappingURL=es6.reflect.set-compiled.js.map