{"version":3,"sources":["$.redefine.js"],"names":[],"mappings":";;;;AAEA,IAAI,MAAM,GAAM,OAAO,CAAC,YAAY,CAAC;IACjC,IAAI,GAAQ,OAAO,CAAC,UAAU,CAAC;IAC/B,GAAG,GAAS,OAAO,CAAC,SAAS,CAAC,CAAC,KAAK,CAAC;IACrC,SAAS,GAAG,UAAU;IACtB,SAAS,GAAG,QAAQ,CAAC,SAAS,CAAC;IAC/B,GAAG,GAAS,CAAC,EAAE,GAAG,SAAS,CAAA,CAAE,KAAK,CAAC,SAAS,CAAC,CAAC;;AAElD,OAAO,CAAC,UAAU,CAAC,CAAC,aAAa,GAAG,UAAS,EAAE,EAAC;AAC9C,SAAO,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;CAC3B,CAAC;;AAEF,CAAC,MAAM,CAAC,OAAO,GAAG,UAAS,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAC;AAC3C,MAAG,OAAO,GAAG,IAAI,UAAU,EAAC;AAC1B,OAAG,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AACxF,OAAG,CAAC,cAAc,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC,GAAG,EAAE,MAAM,EAAE,GAAG,CAAC,CAAC;GACtD;AACD,MAAG,CAAC,KAAK,MAAM,EAAC;AACd,KAAC,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC;GACd,MAAM;AACL,QAAG,CAAC,IAAI,EAAC,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC;AACvB,QAAI,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;GACnB;CACF,CAAA,CAAE,QAAQ,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,QAAQ,GAAE;AACnD,SAAO,OAAO,IAAI,IAAI,UAAU,IAAI,IAAI,CAAC,GAAG,CAAC,IAAI,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;CACvE,CAAC,CAAC","file":"$.redefine-compiled.js","sourcesContent":["// add fake Function#toString\n// for correct work wrapped methods / constructors with methods like LoDash isNative\nvar global    = require('./$.global')\n  , hide      = require('./$.hide')\n  , SRC       = require('./$.uid')('src')\n  , TO_STRING = 'toString'\n  , $toString = Function[TO_STRING]\n  , TPL       = ('' + $toString).split(TO_STRING);\n\nrequire('./$.core').inspectSource = function(it){\n  return $toString.call(it);\n};\n\n(module.exports = function(O, key, val, safe){\n  if(typeof val == 'function'){\n    val.hasOwnProperty(SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));\n    val.hasOwnProperty('name') || hide(val, 'name', key);\n  }\n  if(O === global){\n    O[key] = val;\n  } else {\n    if(!safe)delete O[key];\n    hide(O, key, val);\n  }\n})(Function.prototype, TO_STRING, function toString(){\n  return typeof this == 'function' && this[SRC] || $toString.call(this);\n});"]}