{"version":3,"sources":["$.export.js"],"names":[],"mappings":";;AAAA,IAAI,MAAM,GAAM,OAAO,CAAC,YAAY,CAAC;IACjC,IAAI,GAAQ,OAAO,CAAC,UAAU,CAAC;IAC/B,GAAG,GAAS,OAAO,CAAC,SAAS,CAAC;IAC9B,SAAS,GAAG,WAAW,CAAC;;AAE5B,IAAI,OAAO,GAAG,SAAV,OAAO,CAAY,IAAI,EAAE,IAAI,EAAE,MAAM,EAAC;AACxC,MAAI,SAAS,GAAG,IAAI,GAAG,OAAO,CAAC,CAAC;MAC5B,SAAS,GAAG,IAAI,GAAG,OAAO,CAAC,CAAC;MAC5B,SAAS,GAAG,IAAI,GAAG,OAAO,CAAC,CAAC;MAC5B,QAAQ,GAAI,IAAI,GAAG,OAAO,CAAC,CAAC;MAC5B,OAAO,GAAK,IAAI,GAAG,OAAO,CAAC,CAAC;MAC5B,OAAO,GAAK,IAAI,GAAG,OAAO,CAAC,CAAC;MAC5B,OAAO,GAAK,SAAS,GAAG,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,CAAA,AAAC;MAC9D,MAAM,GAAM,SAAS,GAAG,MAAM,GAAG,SAAS,GAAG,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,CAAA,CAAE,SAAS,CAAC;MAC3F,GAAG;MAAE,GAAG;MAAE,GAAG,CAAC;AAClB,MAAG,SAAS,EAAC,MAAM,GAAG,IAAI,CAAC;AAC3B,OAAI,GAAG,IAAI,MAAM,EAAC;;AAEhB,OAAG,GAAG,CAAC,SAAS,IAAI,MAAM,IAAI,GAAG,IAAI,MAAM,CAAC;AAC5C,QAAG,GAAG,IAAI,GAAG,IAAI,OAAO,EAAC,SAAS;;AAElC,OAAG,GAAG,GAAG,GAAG,MAAM,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;;AAEtC,WAAO,CAAC,GAAG,CAAC,GAAG,SAAS,IAAI,OAAO,MAAM,CAAC,GAAG,CAAC,IAAI,UAAU,GAAG,MAAM,CAAC,GAAG,CAAC;;MAExE,OAAO,IAAI,GAAG,GAAG,GAAG,CAAC,GAAG,EAAE,MAAM,CAAC;;MAEjC,OAAO,IAAI,MAAM,CAAC,GAAG,CAAC,IAAI,GAAG,GAAG,CAAC,UAAS,CAAC,EAAC;AAC5C,UAAI,CAAC,GAAG,SAAJ,CAAC,CAAY,KAAK,EAAC;AACrB,eAAO,IAAI,YAAY,CAAC,GAAG,IAAI,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC;OACpD,CAAC;AACF,OAAC,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC,CAAC;AAC5B,aAAO,CAAC,CAAC;;KAEV,CAAA,CAAE,GAAG,CAAC,GAAG,QAAQ,IAAI,OAAO,GAAG,IAAI,UAAU,GAAG,GAAG,CAAC,QAAQ,CAAC,IAAI,EAAE,GAAG,CAAC,GAAG,GAAG,CAAC;AAC/E,QAAG,QAAQ,EAAC,CAAC,OAAO,CAAC,SAAS,CAAC,KAAK,OAAO,CAAC,SAAS,CAAC,GAAG,EAAE,CAAA,CAAC,CAAE,GAAG,CAAC,GAAG,GAAG,CAAC;GAC1E;CACF,CAAC;;AAEF,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC;AACd,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC;AACd,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC;AACd,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC;AACd,OAAO,CAAC,CAAC,GAAG,EAAE,CAAC;AACf,OAAO,CAAC,CAAC,GAAG,EAAE,CAAC;AACf,MAAM,CAAC,OAAO,GAAG,OAAO,CAAC","file":"$.export-compiled.js","sourcesContent":["var global    = require('./$.global')\n  , core      = require('./$.core')\n  , ctx       = require('./$.ctx')\n  , PROTOTYPE = 'prototype';\n\nvar $export = function(type, name, source){\n  var IS_FORCED = type & $export.F\n    , IS_GLOBAL = type & $export.G\n    , IS_STATIC = type & $export.S\n    , IS_PROTO  = type & $export.P\n    , IS_BIND   = type & $export.B\n    , IS_WRAP   = type & $export.W\n    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})\n    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]\n    , key, own, out;\n  if(IS_GLOBAL)source = name;\n  for(key in source){\n    // contains in native\n    own = !IS_FORCED && target && key in target;\n    if(own && key in exports)continue;\n    // export native or passed\n    out = own ? target[key] : source[key];\n    // prevent global pollution for namespaces\n    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]\n    // bind timers to global for call from export context\n    : IS_BIND && own ? ctx(out, global)\n    // wrap global constructors for prevent change them in library\n    : IS_WRAP && target[key] == out ? (function(C){\n      var F = function(param){\n        return this instanceof C ? new C(param) : C(param);\n      };\n      F[PROTOTYPE] = C[PROTOTYPE];\n      return F;\n    // make static versions for prototype methods\n    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;\n    if(IS_PROTO)(exports[PROTOTYPE] || (exports[PROTOTYPE] = {}))[key] = out;\n  }\n};\n// type bitmap\n$export.F = 1;  // forced\n$export.G = 2;  // global\n$export.S = 4;  // static\n$export.P = 8;  // proto\n$export.B = 16; // bind\n$export.W = 32; // wrap\nmodule.exports = $export;"]}