{"version":3,"sources":["es6.typed.array-buffer.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;AACb,IAAG,OAAO,CAAC,iBAAiB,CAAC,EAAC;AAC5B,MAAI,OAAO,GAAQ,OAAO,CAAC,YAAY,CAAC;MACpC,MAAM,GAAS,OAAO,CAAC,WAAW,CAAC;MACnC,MAAM,GAAS,OAAO,CAAC,YAAY,CAAC;MACpC,OAAO,GAAQ,OAAO,CAAC,cAAc,CAAC;MACtC,QAAQ,GAAO,OAAO,CAAC,eAAe,CAAC;MACvC,QAAQ,GAAO,OAAO,CAAC,eAAe,CAAC;MACvC,WAAW,GAAI,OAAO,CAAC,SAAS,CAAC,CAAC,aAAa,CAAC;MAChD,YAAY,GAAG,MAAM,CAAC,WAAW;MACjC,SAAS,GAAM,MAAM,CAAC,QAAQ;MAC9B,MAAM,GAAS,YAAY,IAAI,YAAY,CAAC,SAAS,CAAC,KAAK;MAC3D,IAAI,GAAW,MAAM,CAAC,IAAI;MAC1B,YAAY,GAAG,aAAa,CAAC;;AAEjC,SAAO,CAAC,OAAO,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,EAAE,EAAC,WAAW,EAAE,YAAY,EAAC,CAAC,CAAC;;AAEtF,SAAO,CAAC,OAAO,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,EAAE,YAAY,EAAE;;AAE5D,UAAM,EAAE,SAAS,MAAM,CAAC,EAAE,EAAC;;AACzB,aAAO,QAAQ,CAAC,EAAE,CAAC,IAAI,IAAI,IAAI,EAAE,CAAC;KACnC;GACF,CAAC,CAAC;;AAEH,SAAO,CAAC,OAAO,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC,YAAU;AAC7D,WAAO,CAAC,IAAI,YAAY,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC,UAAU,CAAC;GAC5D,CAAC,EAAE,YAAY,EAAE;;AAEhB,SAAK,EAAE,SAAS,KAAK,CAAC,KAAK,EAAE,GAAG,EAAC;AAC/B,UAAG,MAAM,KAAK,SAAS,IAAI,GAAG,KAAK,SAAS,EAAC,OAAO,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;AAC7E,UAAI,GAAG,GAAM,IAAI,CAAC,UAAU;UACxB,KAAK,GAAI,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC;UAC5B,KAAK,GAAI,OAAO,CAAC,GAAG,KAAK,SAAS,GAAG,GAAG,GAAG,GAAG,EAAE,GAAG,CAAC;UACpD,MAAM,GAAG,IAAI,YAAY,CAAC,QAAQ,CAAC,KAAK,GAAG,KAAK,CAAC,CAAC;UAClD,KAAK,GAAI,IAAI,SAAS,CAAC,IAAI,CAAC;UAC5B,KAAK,GAAI,IAAI,SAAS,CAAC,MAAM,CAAC;UAC9B,KAAK,GAAI,CAAC,CAAC;AACf,aAAM,KAAK,GAAG,KAAK,EAAC;AAClB,aAAK,CAAC,QAAQ,CAAC,KAAK,EAAE,EAAE,KAAK,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;OAClD,AAAC,OAAO,MAAM,CAAC;KACjB;GACF,CAAC,CAAC;CACJ","file":"es6.typed.array-buffer-compiled.js","sourcesContent":["'use strict';\nif(require('./$.descriptors')){\n  var $export      = require('./$.export')\n    , $typed       = require('./$.typed')\n    , buffer       = require('./$.buffer')\n    , toIndex      = require('./$.to-index')\n    , toLength     = require('./$.to-length')\n    , isObject     = require('./$.is-object')\n    , TYPED_ARRAY  = require('./$.wks')('typed_array')\n    , $ArrayBuffer = buffer.ArrayBuffer\n    , $DataView    = buffer.DataView\n    , $slice       = $ArrayBuffer && $ArrayBuffer.prototype.slice\n    , VIEW         = $typed.VIEW\n    , ARRAY_BUFFER = 'ArrayBuffer';\n\n  $export($export.G + $export.W + $export.F * !$typed.ABV, {ArrayBuffer: $ArrayBuffer});\n\n  $export($export.S + $export.F * !$typed.CONSTR, ARRAY_BUFFER, {\n    // 24.1.3.1 ArrayBuffer.isView(arg)\n    isView: function isView(it){ // not cross-realm\n      return isObject(it) && VIEW in it;\n    }\n  });\n\n  $export($export.P + $export.F * require('./$.fails')(function(){\n    return !new $ArrayBuffer(2).slice(1, undefined).byteLength;\n  }), ARRAY_BUFFER, {\n    // 24.1.4.3 ArrayBuffer.prototype.slice(start, end)\n    slice: function slice(start, end){\n      if($slice !== undefined && end === undefined)return $slice.call(this, start); // FF fix\n      var len    = this.byteLength\n        , first  = toIndex(start, len)\n        , final  = toIndex(end === undefined ? len : end, len)\n        , result = new $ArrayBuffer(toLength(final - first))\n        , viewS  = new $DataView(this)\n        , viewT  = new $DataView(result)\n        , index  = 0;\n      while(first < final){\n        viewT.setUint8(index++, viewS.getUint8(first++));\n      } return result;\n    }\n  });\n}"]}