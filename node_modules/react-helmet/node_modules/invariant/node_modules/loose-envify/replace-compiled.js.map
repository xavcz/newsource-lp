{"version":3,"sources":["replace.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;AAEb,IAAI,QAAQ,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC;;AAEpC,IAAI,YAAY,GAAG,oCAAoC,CAAC;AACxD,IAAI,gBAAgB,GAAG,gBAAgB,CAAC;;AAExC,SAAS,OAAO,CAAC,GAAG,EAAE,IAAI,EAAE;AAC1B,MAAI,CAAC,YAAY,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;AAC3B,WAAO,GAAG,CAAC;GACZ;;AAED,MAAI,GAAG,GAAG,EAAE,CAAC;AACb,MAAI,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,UAAS,GAAG,EAAE;AAClC,WAAO,GAAG,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;GAC/C,CAAC,CAAC;;AAEH,UAAQ,CAAC,SAAS,GAAG,CAAC,CAAA;AACtB,MAAI,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;;AAEhC,OAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACrC,QAAI,KAAK,CAAC,CAAC,CAAK,KAAK,SAAS,IAC1B,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,GAAG,IACpB,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,KAAK,IACtB,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,GAAG,EAAE;AACxB,UAAI,aAAa,GAAG,oBAAoB,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;AACvD,UAAI,aAAa,GAAG,oBAAoB,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;AAC1D,UAAI,WAAW,GAAG,oBAAoB,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;AAClE,UAAI,aAAa,KAAK,GAAG,IACrB,aAAa,KAAK,GAAG,IACrB,aAAa,KAAK,GAAG,IACrB,OAAO,WAAW,KAAK,QAAQ,EAAE;AACnC,WAAG,IAAI,WAAW,CAAC;AACnB,SAAC,IAAI,CAAC,CAAC;AACP,iBAAS;OACV;KACF;AACD,OAAG,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC;GACjB;;AAED,SAAO,GAAG,CAAC;CACZ;;AAED,SAAS,oBAAoB,CAAC,GAAG,EAAE,KAAK,EAAE,CAAC,EAAE;AAC3C,SAAO,IAAI,EAAE;AACX,QAAI,IAAI,GAAG,KAAK,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC;AAC3B,QAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;AAChC,aAAO,IAAI,CAAC;KACb;GACF;CACF;;AAED,SAAS,oBAAoB,CAAC,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE;AAC/C,OAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACpC,QAAI,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;AAClB,QAAI,OAAO,GAAG,CAAC,IAAI,CAAC,KAAK,WAAW,EAAE;AACpC,aAAO,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;KAClC;GACF;AACD,MAAI,KAAK,EAAE;AACT,WAAO,WAAW,CAAC;GACpB;CACF;;AAED,MAAM,CAAC,OAAO,GAAG,OAAO,CAAC","file":"replace-compiled.js","sourcesContent":["'use strict';\n\nvar jsTokens = require('js-tokens');\n\nvar processEnvRe = /\\bprocess\\.env\\.[_$a-zA-Z][$\\w]+\\b/;\nvar spaceOrCommentRe = /^(?:\\s|\\/[/*])/;\n\nfunction replace(src, envs) {\n  if (!processEnvRe.test(src)) {\n    return src;\n  }\n\n  var out = '';\n  var purge = envs.some(function(env) {\n    return env._ && env._.indexOf('purge') !== -1;\n  });\n\n  jsTokens.lastIndex = 0\n  var parts = src.match(jsTokens);\n\n  for (var i = 0; i < parts.length; i++) {\n    if (parts[i    ] === 'process' &&\n        parts[i + 1] === '.' &&\n        parts[i + 2] === 'env' &&\n        parts[i + 3] === '.') {\n      var prevCodeToken = getAdjacentCodeToken(-1, parts, i);\n      var nextCodeToken = getAdjacentCodeToken(1, parts, i + 4);\n      var replacement = getReplacementString(envs, parts[i + 4], purge);\n      if (prevCodeToken !== '.' &&\n          nextCodeToken !== '.' &&\n          nextCodeToken !== '=' &&\n          typeof replacement === 'string') {\n        out += replacement;\n        i += 4;\n        continue;\n      }\n    }\n    out += parts[i];\n  }\n\n  return out;\n}\n\nfunction getAdjacentCodeToken(dir, parts, i) {\n  while (true) {\n    var part = parts[i += dir];\n    if (!spaceOrCommentRe.test(part)) {\n      return part;\n    }\n  }\n}\n\nfunction getReplacementString(envs, name, purge) {\n  for (var j = 0; j < envs.length; j++) {\n    var env = envs[j];\n    if (typeof env[name] !== 'undefined') {\n      return JSON.stringify(env[name]);\n    }\n  }\n  if (purge) {\n    return 'undefined';\n  }\n}\n\nmodule.exports = replace;\n"]}