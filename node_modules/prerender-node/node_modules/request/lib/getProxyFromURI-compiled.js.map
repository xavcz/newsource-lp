{"version":3,"sources":["getProxyFromURI.js"],"names":[],"mappings":"AAAA,YAAY,CAAA;;AAEZ,SAAS,cAAc,CAAC,QAAQ,EAAE;;AAEhC,SAAO,QAAQ,CAAC,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,WAAW,EAAE,CAAA;CACnD;;AAED,SAAS,gBAAgB,CAAC,IAAI,EAAE;AAC9B,MAAI,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAA;;AAEhC,MAAI,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,CAAC;MAC9B,QAAQ,GAAG,cAAc,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;MACvC,QAAQ,GAAG,SAAS,CAAC,CAAC,CAAC;MACvB,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAA;;AAEpC,SAAO,EAAC,QAAQ,EAAE,QAAQ,EAAE,IAAI,EAAE,QAAQ,EAAE,OAAO,EAAE,OAAO,EAAC,CAAA;CAC9D;;AAED,SAAS,YAAY,CAAC,GAAG,EAAE,OAAO,EAAE;AAClC,MAAI,IAAI,GAAG,GAAG,CAAC,IAAI,KAAK,GAAG,CAAC,QAAQ,KAAK,QAAQ,GAAG,KAAK,GAAG,IAAI,CAAA,AAAC;MAC7D,QAAQ,GAAG,cAAc,CAAC,GAAG,CAAC,QAAQ,CAAC;MACvC,WAAW,GAAG,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;;;AAGpC,SAAO,WAAW,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC,IAAI,CAAC,UAAS,WAAW,EAAE;AAClE,QAAI,WAAW,GAAG,QAAQ,CAAC,OAAO,CAAC,WAAW,CAAC,QAAQ,CAAC;QACpD,eAAe,GACb,WAAW,GAAG,CAAC,CAAC,IACf,WAAW,KAAK,QAAQ,CAAC,MAAM,GAAG,WAAW,CAAC,QAAQ,CAAC,MAAM,AAAC,AAChE,CAAA;;AAEL,QAAI,WAAW,CAAC,OAAO,EAAE;AACvB,aAAO,AAAC,IAAI,KAAK,WAAW,CAAC,IAAI,IAAK,eAAe,CAAA;KACtD;;AAED,WAAO,eAAe,CAAA;GACvB,CAAC,CAAA;CACH;;AAED,SAAS,eAAe,CAAC,GAAG,EAAE;;;;;AAK5B,MAAI,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,IAAI,EAAE,CAAA;;;;AAIhE,MAAI,OAAO,KAAK,GAAG,EAAE;AACnB,WAAO,IAAI,CAAA;GACZ;;;;AAID,MAAI,OAAO,KAAK,EAAE,IAAI,YAAY,CAAC,GAAG,EAAE,OAAO,CAAC,EAAE;AAChD,WAAO,IAAI,CAAA;GACZ;;;;AAID,MAAI,GAAG,CAAC,QAAQ,KAAK,OAAO,EAAE;AAC5B,WAAO,OAAO,CAAC,GAAG,CAAC,UAAU,IACtB,OAAO,CAAC,GAAG,CAAC,UAAU,IAAI,IAAI,CAAA;GACtC;;AAED,MAAI,GAAG,CAAC,QAAQ,KAAK,QAAQ,EAAE;AAC7B,WAAO,OAAO,CAAC,GAAG,CAAC,WAAW,IACvB,OAAO,CAAC,GAAG,CAAC,WAAW,IACvB,OAAO,CAAC,GAAG,CAAC,UAAU,IACtB,OAAO,CAAC,GAAG,CAAC,UAAU,IAAK,IAAI,CAAA;GACvC;;;;;AAKD,SAAO,IAAI,CAAA;CACZ;;AAED,MAAM,CAAC,OAAO,GAAG,eAAe,CAAA","file":"getProxyFromURI-compiled.js","sourcesContent":["'use strict'\n\nfunction formatHostname(hostname) {\n  // canonicalize the hostname, so that 'oogle.com' won't match 'google.com'\n  return hostname.replace(/^\\.*/, '.').toLowerCase()\n}\n\nfunction parseNoProxyZone(zone) {\n  zone = zone.trim().toLowerCase()\n\n  var zoneParts = zone.split(':', 2)\n    , zoneHost = formatHostname(zoneParts[0])\n    , zonePort = zoneParts[1]\n    , hasPort = zone.indexOf(':') > -1\n\n  return {hostname: zoneHost, port: zonePort, hasPort: hasPort}\n}\n\nfunction uriInNoProxy(uri, noProxy) {\n  var port = uri.port || (uri.protocol === 'https:' ? '443' : '80')\n    , hostname = formatHostname(uri.hostname)\n    , noProxyList = noProxy.split(',')\n\n  // iterate through the noProxyList until it finds a match.\n  return noProxyList.map(parseNoProxyZone).some(function(noProxyZone) {\n    var isMatchedAt = hostname.indexOf(noProxyZone.hostname)\n      , hostnameMatched = (\n          isMatchedAt > -1 &&\n          (isMatchedAt === hostname.length - noProxyZone.hostname.length)\n        )\n\n    if (noProxyZone.hasPort) {\n      return (port === noProxyZone.port) && hostnameMatched\n    }\n\n    return hostnameMatched\n  })\n}\n\nfunction getProxyFromURI(uri) {\n  // Decide the proper request proxy to use based on the request URI object and the\n  // environmental variables (NO_PROXY, HTTP_PROXY, etc.)\n  // respect NO_PROXY environment variables (see: http://lynx.isc.org/current/breakout/lynx_help/keystrokes/environments.html)\n\n  var noProxy = process.env.NO_PROXY || process.env.no_proxy || ''\n\n  // if the noProxy is a wildcard then return null\n\n  if (noProxy === '*') {\n    return null\n  }\n\n  // if the noProxy is not empty and the uri is found return null\n\n  if (noProxy !== '' && uriInNoProxy(uri, noProxy)) {\n    return null\n  }\n\n  // Check for HTTP or HTTPS Proxy in environment Else default to null\n\n  if (uri.protocol === 'http:') {\n    return process.env.HTTP_PROXY ||\n           process.env.http_proxy || null\n  }\n\n  if (uri.protocol === 'https:') {\n    return process.env.HTTPS_PROXY ||\n           process.env.https_proxy ||\n           process.env.HTTP_PROXY  ||\n           process.env.http_proxy  || null\n  }\n\n  // if none of that works, return null\n  // (What uri protocol are you using then?)\n\n  return null\n}\n\nmodule.exports = getProxyFromURI\n"]}