{"version":3,"sources":["redirect.js"],"names":[],"mappings":"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","file":"redirect-compiled.js","sourcesContent":["'use strict'\n\nvar url = require('url')\nvar isUrl = /^https?:/\n\nfunction Redirect (request) {\n  this.request = request\n  this.followRedirect = true\n  this.followRedirects = true\n  this.followAllRedirects = false\n  this.allowRedirect = function () {return true}\n  this.maxRedirects = 10\n  this.redirects = []\n  this.redirectsFollowed = 0\n  this.removeRefererHeader = false\n}\n\nRedirect.prototype.onRequest = function (options) {\n  var self = this\n\n  if (options.maxRedirects !== undefined) {\n    self.maxRedirects = options.maxRedirects\n  }\n  if (typeof options.followRedirect === 'function') {\n    self.allowRedirect = options.followRedirect\n  }\n  if (options.followRedirect !== undefined) {\n    self.followRedirects = !!options.followRedirect\n  }\n  if (options.followAllRedirects !== undefined) {\n    self.followAllRedirects = options.followAllRedirects\n  }\n  if (self.followRedirects || self.followAllRedirects) {\n    self.redirects = self.redirects || []\n  }\n  if (options.removeRefererHeader !== undefined) {\n    self.removeRefererHeader = options.removeRefererHeader\n  }\n}\n\nRedirect.prototype.redirectTo = function (response) {\n  var self = this\n    , request = self.request\n\n  var redirectTo = null\n  if (response.statusCode >= 300 && response.statusCode < 400 && response.caseless.has('location')) {\n    var location = response.caseless.get('location')\n    request.debug('redirect', location)\n\n    if (self.followAllRedirects) {\n      redirectTo = location\n    } else if (self.followRedirects) {\n      switch (request.method) {\n        case 'PATCH':\n        case 'PUT':\n        case 'POST':\n        case 'DELETE':\n          // Do not follow redirects\n          break\n        default:\n          redirectTo = location\n          break\n      }\n    }\n  } else if (response.statusCode === 401) {\n    var authHeader = request._auth.onResponse(response)\n    if (authHeader) {\n      request.setHeader('authorization', authHeader)\n      redirectTo = request.uri\n    }\n  }\n  return redirectTo\n}\n\nRedirect.prototype.onResponse = function (response) {\n  var self = this\n    , request = self.request\n\n  var redirectTo = self.redirectTo(response)\n  if (!redirectTo || !self.allowRedirect.call(request, response)) {\n    return false\n  }\n\n  request.debug('redirect to', redirectTo)\n\n  // ignore any potential response body.  it cannot possibly be useful\n  // to us at this point.\n  // response.resume should be defined, but check anyway before calling. Workaround for browserify.\n  if (response.resume) {\n    response.resume()\n  }\n\n  if (self.redirectsFollowed >= self.maxRedirects) {\n    request.emit('error', new Error('Exceeded maxRedirects. Probably stuck in a redirect loop ' + request.uri.href))\n    return false\n  }\n  self.redirectsFollowed += 1\n\n  if (!isUrl.test(redirectTo)) {\n    redirectTo = url.resolve(request.uri.href, redirectTo)\n  }\n\n  var uriPrev = request.uri\n  request.uri = url.parse(redirectTo)\n\n  // handle the case where we change protocol from https to http or vice versa\n  if (request.uri.protocol !== uriPrev.protocol) {\n    delete request.agent\n  }\n\n  self.redirects.push(\n    { statusCode : response.statusCode\n    , redirectUri: redirectTo\n    }\n  )\n  if (self.followAllRedirects && request.method !== 'HEAD'\n    && response.statusCode !== 401 && response.statusCode !== 307) {\n    request.method = 'GET'\n  }\n  // request.method = 'GET' // Force all redirects to use GET || commented out fixes #215\n  delete request.src\n  delete request.req\n  delete request._started\n  if (response.statusCode !== 401 && response.statusCode !== 307) {\n    // Remove parameters from the previous response, unless this is the second request\n    // for a server that requires digest authentication.\n    delete request.body\n    delete request._form\n    if (request.headers) {\n      request.removeHeader('host')\n      request.removeHeader('content-type')\n      request.removeHeader('content-length')\n      if (request.uri.hostname !== request.originalHost.split(':')[0]) {\n        // Remove authorization if changing hostnames (but not if just\n        // changing ports or protocols).  This matches the behavior of curl:\n        // https://github.com/bagder/curl/blob/6beb0eee/lib/http.c#L710\n        request.removeHeader('authorization')\n      }\n    }\n  }\n\n  if (!self.removeRefererHeader) {\n    request.setHeader('referer', uriPrev.href)\n  }\n\n  request.emit('redirect')\n\n  request.init()\n\n  return true\n}\n\nexports.Redirect = Redirect\n"]}