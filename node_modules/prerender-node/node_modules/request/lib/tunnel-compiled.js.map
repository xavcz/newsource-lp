{"version":3,"sources":["tunnel.js"],"names":[],"mappings":"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","file":"tunnel-compiled.js","sourcesContent":["'use strict'\n\nvar url = require('url')\n  , tunnel = require('tunnel-agent')\n\nvar defaultProxyHeaderWhiteList = [\n  'accept',\n  'accept-charset',\n  'accept-encoding',\n  'accept-language',\n  'accept-ranges',\n  'cache-control',\n  'content-encoding',\n  'content-language',\n  'content-location',\n  'content-md5',\n  'content-range',\n  'content-type',\n  'connection',\n  'date',\n  'expect',\n  'max-forwards',\n  'pragma',\n  'referer',\n  'te',\n  'user-agent',\n  'via'\n]\n\nvar defaultProxyHeaderExclusiveList = [\n  'proxy-authorization'\n]\n\nfunction constructProxyHost(uriObject) {\n  var port = uriObject.port\n    , protocol = uriObject.protocol\n    , proxyHost = uriObject.hostname + ':'\n\n  if (port) {\n    proxyHost += port\n  } else if (protocol === 'https:') {\n    proxyHost += '443'\n  } else {\n    proxyHost += '80'\n  }\n\n  return proxyHost\n}\n\nfunction constructProxyHeaderWhiteList(headers, proxyHeaderWhiteList) {\n  var whiteList = proxyHeaderWhiteList\n    .reduce(function (set, header) {\n      set[header.toLowerCase()] = true\n      return set\n    }, {})\n\n  return Object.keys(headers)\n    .filter(function (header) {\n      return whiteList[header.toLowerCase()]\n    })\n    .reduce(function (set, header) {\n      set[header] = headers[header]\n      return set\n    }, {})\n}\n\nfunction constructTunnelOptions (request, proxyHeaders) {\n  var proxy = request.proxy\n\n  var tunnelOptions = {\n    proxy : {\n      host      : proxy.hostname,\n      port      : +proxy.port,\n      proxyAuth : proxy.auth,\n      headers   : proxyHeaders\n    },\n    headers            : request.headers,\n    ca                 : request.ca,\n    cert               : request.cert,\n    key                : request.key,\n    passphrase         : request.passphrase,\n    pfx                : request.pfx,\n    ciphers            : request.ciphers,\n    rejectUnauthorized : request.rejectUnauthorized,\n    secureOptions      : request.secureOptions,\n    secureProtocol     : request.secureProtocol\n  }\n\n  return tunnelOptions\n}\n\nfunction constructTunnelFnName(uri, proxy) {\n  var uriProtocol = (uri.protocol === 'https:' ? 'https' : 'http')\n  var proxyProtocol = (proxy.protocol === 'https:' ? 'Https' : 'Http')\n  return [uriProtocol, proxyProtocol].join('Over')\n}\n\nfunction getTunnelFn(request) {\n  var uri = request.uri\n  var proxy = request.proxy\n  var tunnelFnName = constructTunnelFnName(uri, proxy)\n  return tunnel[tunnelFnName]\n}\n\n\nfunction Tunnel (request) {\n  this.request = request\n  this.proxyHeaderWhiteList = defaultProxyHeaderWhiteList\n  this.proxyHeaderExclusiveList = []\n  if (typeof request.tunnel !== 'undefined') {\n    this.tunnelOverride = request.tunnel\n  }\n}\n\nTunnel.prototype.isEnabled = function () {\n  var self = this\n    , request = self.request\n  // Tunnel HTTPS by default. Allow the user to override this setting.\n\n  // If self.tunnelOverride is set (the user specified a value), use it.\n  if (typeof self.tunnelOverride !== 'undefined') {\n    return self.tunnelOverride\n  }\n\n  // If the destination is HTTPS, tunnel.\n  if (request.uri.protocol === 'https:') {\n    return true\n  }\n\n  // Otherwise, do not use tunnel.\n  return false\n}\n\nTunnel.prototype.setup = function (options) {\n  var self = this\n    , request = self.request\n\n  options = options || {}\n\n  if (typeof request.proxy === 'string') {\n    request.proxy = url.parse(request.proxy)\n  }\n\n  if (!request.proxy || !request.tunnel) {\n    return false\n  }\n\n  // Setup Proxy Header Exclusive List and White List\n  if (options.proxyHeaderWhiteList) {\n    self.proxyHeaderWhiteList = options.proxyHeaderWhiteList\n  }\n  if (options.proxyHeaderExclusiveList) {\n    self.proxyHeaderExclusiveList = options.proxyHeaderExclusiveList\n  }\n\n  var proxyHeaderExclusiveList = self.proxyHeaderExclusiveList.concat(defaultProxyHeaderExclusiveList)\n  var proxyHeaderWhiteList = self.proxyHeaderWhiteList.concat(proxyHeaderExclusiveList)\n\n  // Setup Proxy Headers and Proxy Headers Host\n  // Only send the Proxy White Listed Header names\n  var proxyHeaders = constructProxyHeaderWhiteList(request.headers, proxyHeaderWhiteList)\n  proxyHeaders.host = constructProxyHost(request.uri)\n\n  proxyHeaderExclusiveList.forEach(request.removeHeader, request)\n\n  // Set Agent from Tunnel Data\n  var tunnelFn = getTunnelFn(request)\n  var tunnelOptions = constructTunnelOptions(request, proxyHeaders)\n  request.agent = tunnelFn(tunnelOptions)\n\n  return true\n}\n\nTunnel.defaultProxyHeaderWhiteList = defaultProxyHeaderWhiteList\nTunnel.defaultProxyHeaderExclusiveList = defaultProxyHeaderExclusiveList\nexports.Tunnel = Tunnel\n"]}