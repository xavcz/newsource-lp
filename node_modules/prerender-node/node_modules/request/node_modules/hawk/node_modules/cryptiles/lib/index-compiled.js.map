{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;AAEA,IAAI,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AAC/B,IAAI,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;;;;AAK3B,IAAI,SAAS,GAAG,EAAE,CAAC;;;;AAKnB,OAAO,CAAC,YAAY,GAAG,UAAU,IAAI,EAAE;;AAEnC,QAAI,MAAM,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC,IAAI,GAAG,CAAC,CAAA,GAAI,CAAC,CAAC,CAAC;AAChD,QAAI,MAAM,YAAY,KAAK,EAAE;AACzB,eAAO,MAAM,CAAC;KACjB;;AAED,QAAI,MAAM,GAAG,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;AAClG,WAAO,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;CAChC,CAAC;;AAGF,OAAO,CAAC,UAAU,GAAG,UAAU,IAAI,EAAE;;AAEjC,QAAI,CAAC,IAAI,IACL,IAAI,GAAG,CAAC,EAAE;;AAEV,eAAO,IAAI,CAAC,QAAQ,CAAC,2BAA2B,CAAC,CAAC;KACrD;;AAED,QAAI,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC;AAChC,QAAI;AACA,eAAO,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;KACpC,CACD,OAAO,GAAG,EAAE;AACR,eAAO,IAAI,CAAC,QAAQ,CAAC,iCAAiC,GAAG,GAAG,CAAC,OAAO,CAAC,CAAC;KACzE;CACJ,CAAC;;;;AAKF,OAAO,CAAC,mBAAmB,GAAG,UAAU,CAAC,EAAE,CAAC,EAAE;;AAE1C,QAAI,OAAO,CAAC,KAAK,QAAQ,IACrB,OAAO,CAAC,KAAK,QAAQ,EAAE;;AAEvB,eAAO,KAAK,CAAC;KAChB;;AAED,QAAI,QAAQ,GAAI,CAAC,CAAC,MAAM,KAAK,CAAC,CAAC,MAAM,GAAG,CAAC,GAAG,CAAC,AAAC,CAAC;AAC/C,QAAI,QAAQ,EAAE;AACV,SAAC,GAAG,CAAC,CAAC;KACT;;AAED,SAAK,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE;AACxC,YAAI,EAAE,GAAG,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;AACzB,YAAI,EAAE,GAAG,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;AACzB,gBAAQ,IAAK,EAAE,GAAG,EAAE,AAAC,CAAC;KACzB;;AAED,WAAQ,QAAQ,KAAK,CAAC,CAAE;CAC3B,CAAC","file":"index-compiled.js","sourcesContent":["// Load modules\n\nvar Crypto = require('crypto');\nvar Boom = require('boom');\n\n\n// Declare internals\n\nvar internals = {};\n\n\n// Generate a cryptographically strong pseudo-random data\n\nexports.randomString = function (size) {\n\n    var buffer = exports.randomBits((size + 1) * 6);\n    if (buffer instanceof Error) {\n        return buffer;\n    }\n\n    var string = buffer.toString('base64').replace(/\\+/g, '-').replace(/\\//g, '_').replace(/\\=/g, '');\n    return string.slice(0, size);\n};\n\n\nexports.randomBits = function (bits) {\n\n    if (!bits ||\n        bits < 0) {\n\n        return Boom.internal('Invalid random bits count');\n    }\n\n    var bytes = Math.ceil(bits / 8);\n    try {\n        return Crypto.randomBytes(bytes);\n    }\n    catch (err) {\n        return Boom.internal('Failed generating random bits: ' + err.message);\n    }\n};\n\n\n// Compare two strings using fixed time algorithm (to prevent time-based analysis of MAC digest match)\n\nexports.fixedTimeComparison = function (a, b) {\n\n    if (typeof a !== 'string' ||\n        typeof b !== 'string') {\n\n        return false;\n    }\n\n    var mismatch = (a.length === b.length ? 0 : 1);\n    if (mismatch) {\n        b = a;\n    }\n\n    for (var i = 0, il = a.length; i < il; ++i) {\n        var ac = a.charCodeAt(i);\n        var bc = b.charCodeAt(i);\n        mismatch |= (ac ^ bc);\n    }\n\n    return (mismatch === 0);\n};\n\n\n"]}