{"version":3,"sources":["example.js"],"names":[],"mappings":";;AAAA,IAAI,EAAE,GAAK,OAAO,CAAC,IAAI,CAAC,CAAA;AACxB,IAAI,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAA;AAC1B,IAAI,IAAI,GAAG,OAAO,CAAC,cAAc,CAAC,CAAA;;AAElC,IAAI,UAAU,GAAG,EAAE,CAAC,gBAAgB,CAAC,mBAAmB,CAAC,CACtD,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC,CACzB,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAA;;AAErB,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAA;;;AAG/B,IAAI,WAAW,GAAG,EAAE,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAC5C,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC,CACzB,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC,CAAA;;AAE9B,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAA;;;AAGhC,IAAI,MAAM,GAAG,EAAE,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAA;;AAE/D,IAAI,SAAS,GAAG,EAAE,CAAA;;AAElB,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,UAAS,IAAI,EAAE;AAAE,WAAS,IAAI,IAAI,CAAA;CAAE,CAAC,CAAA;AACvD,MAAM,CAAC,EAAE,CAAC,KAAK,EAAE,YAAW;AAC1B,SAAO,CAAC,GAAG,CAAC,6BAA6B,GAAG,SAAS,CAAC,CAAA;AACtD,SAAO,CAAC,GAAG,CAAC,oBAAoB,GAAG,IAAI,MAAM,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC,CAAA;CACpE,CAAC,CAAA","file":"example-compiled.js","sourcesContent":["var fs   = require('fs')\nvar zlib = require('zlib')\nvar strs = require('stringstream')\n\nvar utf8Stream = fs.createReadStream('massiveLogFile.gz')\n  .pipe(zlib.createGunzip())\n  .pipe(strs('utf8'))\n\nutf8Stream.pipe(process.stdout)\n\n// Stream from utf8 to hex to base64... Why not, ay.\nvar hex64Stream = fs.createReadStream('myFile')\n  .pipe(strs('utf8', 'hex'))\n  .pipe(strs('hex', 'base64'))\n\nhex64Stream.pipe(process.stdout)\n\n// Deals with base64 correctly by aligning chunks\nvar stream = fs.createReadStream('myFile').pipe(strs('base64'))\n\nvar base64Str = ''\n\nstream.on('data', function(data) { base64Str += data })\nstream.on('end', function() {\n  console.log('My base64 encoded file is: ' + base64Str) // Wouldn't work with setEncoding()\n  console.log('Original file is: ' + new Buffer(base64Str, 'base64'))\n})\n"]}