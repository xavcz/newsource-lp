{"version":3,"sources":["browser.js"],"names":[],"mappings":";;;;;;;AAKA,MAAM,CAAC,OAAO,GAAG,SAAS,CAAC;;;;;;;;;;;;;;;;;;;;AAoB3B,SAAS,SAAS,CAAE,EAAE,EAAE,GAAG,EAAE;AAC3B,MAAI,MAAM,CAAC,eAAe,CAAC,EAAE;AAC3B,WAAO,EAAE,CAAC;GACX;;AAED,MAAI,MAAM,GAAG,KAAK,CAAC;AACnB,WAAS,UAAU,GAAG;AACpB,QAAI,CAAC,MAAM,EAAE;AACX,UAAI,MAAM,CAAC,kBAAkB,CAAC,EAAE;AAC9B,cAAM,IAAI,KAAK,CAAC,GAAG,CAAC,CAAC;OACtB,MAAM,IAAI,MAAM,CAAC,kBAAkB,CAAC,EAAE;AACrC,eAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;OACpB,MAAM;AACL,eAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;OACnB;AACD,YAAM,GAAG,IAAI,CAAC;KACf;AACD,WAAO,EAAE,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;GAClC;;AAED,SAAO,UAAU,CAAC;CACnB;;;;;;;;;;AAUD,SAAS,MAAM,CAAE,IAAI,EAAE;;AAErB,MAAI;AACF,QAAI,CAAC,MAAM,CAAC,YAAY,EAAE,OAAO,KAAK,CAAC;GACxC,CAAC,OAAO,CAAC,EAAE;AACV,WAAO,KAAK,CAAC;GACd;AACD,MAAI,GAAG,GAAG,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;AACpC,MAAI,IAAI,IAAI,GAAG,EAAE,OAAO,KAAK,CAAC;AAC9B,SAAO,MAAM,CAAC,GAAG,CAAC,CAAC,WAAW,EAAE,KAAK,MAAM,CAAC;CAC7C","file":"browser-compiled.js","sourcesContent":["\n/**\n * Module exports.\n */\n\nmodule.exports = deprecate;\n\n/**\n * Mark that a method should not be used.\n * Returns a modified function which warns once by default.\n *\n * If `localStorage.noDeprecation = true` is set, then it is a no-op.\n *\n * If `localStorage.throwDeprecation = true` is set, then deprecated functions\n * will throw an Error when invoked.\n *\n * If `localStorage.traceDeprecation = true` is set, then deprecated functions\n * will invoke `console.trace()` instead of `console.error()`.\n *\n * @param {Function} fn - the function to deprecate\n * @param {String} msg - the string to print to the console when `fn` is invoked\n * @returns {Function} a new \"deprecated\" version of `fn`\n * @api public\n */\n\nfunction deprecate (fn, msg) {\n  if (config('noDeprecation')) {\n    return fn;\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (config('throwDeprecation')) {\n        throw new Error(msg);\n      } else if (config('traceDeprecation')) {\n        console.trace(msg);\n      } else {\n        console.warn(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n}\n\n/**\n * Checks `localStorage` for boolean values for the given `name`.\n *\n * @param {String} name\n * @returns {Boolean}\n * @api private\n */\n\nfunction config (name) {\n  // accessing global.localStorage can trigger a DOMException in sandboxed iframes\n  try {\n    if (!global.localStorage) return false;\n  } catch (_) {\n    return false;\n  }\n  var val = global.localStorage[name];\n  if (null == val) return false;\n  return String(val).toLowerCase() === 'true';\n}\n"]}