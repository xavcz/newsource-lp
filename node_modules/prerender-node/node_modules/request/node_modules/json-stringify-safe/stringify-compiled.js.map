{"version":3,"sources":["stringify.js"],"names":[],"mappings":";;AAAA,OAAO,GAAG,MAAM,CAAC,OAAO,GAAG,SAAS,CAAA;AACpC,OAAO,CAAC,YAAY,GAAG,UAAU,CAAA;;AAEjC,SAAS,SAAS,CAAC,GAAG,EAAE,QAAQ,EAAE,MAAM,EAAE,aAAa,EAAE;AACvD,SAAO,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,UAAU,CAAC,QAAQ,EAAE,aAAa,CAAC,EAAE,MAAM,CAAC,CAAA;CACxE;;AAED,SAAS,UAAU,CAAC,QAAQ,EAAE,aAAa,EAAE;AAC3C,MAAI,KAAK,GAAG,EAAE;MAAE,IAAI,GAAG,EAAE,CAAA;;AAEzB,MAAI,aAAa,IAAI,IAAI,EAAE,aAAa,GAAG,UAAS,GAAG,EAAE,KAAK,EAAE;AAC9D,QAAI,KAAK,CAAC,CAAC,CAAC,KAAK,KAAK,EAAE,OAAO,cAAc,CAAA;AAC7C,WAAO,cAAc,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,CAAA;GAC5E,CAAA;;AAED,SAAO,UAAS,GAAG,EAAE,KAAK,EAAE;AAC1B,QAAI,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;AACpB,UAAI,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAA;AACjC,OAAC,OAAO,GAAG,KAAK,CAAC,MAAM,CAAC,OAAO,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;AACvD,OAAC,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,QAAQ,EAAE,GAAG,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;AAC/D,UAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,KAAK,GAAG,aAAa,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,EAAE,KAAK,CAAC,CAAA;KACxE,MACI,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;;AAEtB,WAAO,QAAQ,IAAI,IAAI,GAAG,KAAK,GAAG,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,EAAE,KAAK,CAAC,CAAA;GAClE,CAAA;CACF","file":"stringify-compiled.js","sourcesContent":["exports = module.exports = stringify\nexports.getSerialize = serializer\n\nfunction stringify(obj, replacer, spaces, cycleReplacer) {\n  return JSON.stringify(obj, serializer(replacer, cycleReplacer), spaces)\n}\n\nfunction serializer(replacer, cycleReplacer) {\n  var stack = [], keys = []\n\n  if (cycleReplacer == null) cycleReplacer = function(key, value) {\n    if (stack[0] === value) return \"[Circular ~]\"\n    return \"[Circular ~.\" + keys.slice(0, stack.indexOf(value)).join(\".\") + \"]\"\n  }\n\n  return function(key, value) {\n    if (stack.length > 0) {\n      var thisPos = stack.indexOf(this)\n      ~thisPos ? stack.splice(thisPos + 1) : stack.push(this)\n      ~thisPos ? keys.splice(thisPos, Infinity, key) : keys.push(key)\n      if (~stack.indexOf(value)) value = cycleReplacer.call(this, key, value)\n    }\n    else stack.push(value)\n\n    return replacer == null ? value : replacer.call(this, key, value)\n  }\n}\n"]}