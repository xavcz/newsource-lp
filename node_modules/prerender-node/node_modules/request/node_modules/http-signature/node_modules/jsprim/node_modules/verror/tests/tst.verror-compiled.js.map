{"version":3,"sources":["tst.verror.js"],"names":[],"mappings":"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","file":"tst.verror-compiled.js","sourcesContent":["/*\n * tst.verror.js: tests basic functionality of the VError class.\n */\n\nvar mod_assert = require('assert');\nvar mod_verror = require('../lib/verror');\n\nvar VError = mod_verror.VError;\nvar WError = mod_verror.WError;\n\nvar err, suberr, stack, substack;\n\n/*\n * Remove full paths and relative line numbers from stack traces so that we can\n * compare against \"known-good\" output.\n */\nfunction cleanStack(stacktxt)\n{\n\tvar re = new RegExp(__filename + ':\\\\d+:\\\\d+', 'gm');\n\tstacktxt = stacktxt.replace(re, 'tst.verror.js');\n\treturn (stacktxt);\n}\n\n/*\n * Save the generic parts of all stack traces so we can avoid hardcoding\n * Node-specific implementation details in our testing of stack traces.\n */\nvar nodestack = new Error().stack.split('\\n').slice(2).join('\\n');\n\n/* no arguments */\nerr = new VError();\nmod_assert.equal(err.name, 'VError');\nmod_assert.ok(err instanceof Error);\nmod_assert.ok(err instanceof VError);\nmod_assert.equal(err.message, '');\nmod_assert.ok(err.cause() === undefined);\nstack = cleanStack(err.stack);\nmod_assert.equal(stack, [\n    'VError',\n    '    at Object.<anonymous> (tst.verror.js)'\n].join('\\n') + '\\n' + nodestack);\n\n/* options-argument form */\nerr = new VError({});\nmod_assert.equal(err.message, '');\nmod_assert.ok(err.cause() === undefined);\n\n/* simple message */\nerr = new VError('my error');\nmod_assert.equal(err.message, 'my error');\nmod_assert.ok(err.cause() === undefined);\nstack = cleanStack(err.stack);\nmod_assert.equal(stack, [\n    'VError: my error',\n    '    at Object.<anonymous> (tst.verror.js)'\n].join('\\n') + '\\n' + nodestack);\n\nerr = new VError({}, 'my error');\nmod_assert.equal(err.message, 'my error');\nmod_assert.ok(err.cause() === undefined);\n\n/* printf-style message */\nerr = new VError('%s error: %3d problems', 'very bad', 15);\nmod_assert.equal(err.message, 'very bad error:  15 problems');\nmod_assert.ok(err.cause() === undefined);\n\nerr = new VError({}, '%s error: %3d problems', 'very bad', 15);\nmod_assert.equal(err.message, 'very bad error:  15 problems');\nmod_assert.ok(err.cause() === undefined);\n\n/* caused by another error, with no additional message */\nsuberr = new Error('root cause');\nerr = new VError(suberr);\nmod_assert.equal(err.message, ': root cause');\nmod_assert.ok(err.cause() === suberr);\n\nerr = new VError({ 'cause': suberr });\nmod_assert.equal(err.message, ': root cause');\nmod_assert.ok(err.cause() === suberr);\n\n/* caused by another error, with annotation */\nerr = new VError(suberr, 'proximate cause: %d issues', 3);\nmod_assert.equal(err.message, 'proximate cause: 3 issues: root cause');\nmod_assert.ok(err.cause() === suberr);\nstack = cleanStack(err.stack);\nmod_assert.equal(stack, [\n    'VError: proximate cause: 3 issues: root cause',\n    '    at Object.<anonymous> (tst.verror.js)'\n].join('\\n') + '\\n' + nodestack);\n\nerr = new VError({ 'cause': suberr }, 'proximate cause: %d issues', 3);\nmod_assert.equal(err.message, 'proximate cause: 3 issues: root cause');\nmod_assert.ok(err.cause() === suberr);\nstack = cleanStack(err.stack);\nmod_assert.equal(stack, [\n    'VError: proximate cause: 3 issues: root cause',\n    '    at Object.<anonymous> (tst.verror.js)'\n].join('\\n') + '\\n' + nodestack);\n\n/* caused by another VError, with annotation. */\nsuberr = err;\nerr = new VError(suberr, 'top');\nmod_assert.equal(err.message, 'top: proximate cause: 3 issues: root cause');\nmod_assert.ok(err.cause() === suberr);\n\nerr = new VError({ 'cause': suberr }, 'top');\nmod_assert.equal(err.message, 'top: proximate cause: 3 issues: root cause');\nmod_assert.ok(err.cause() === suberr);\n\n/* caused by a WError */\nsuberr = new WError(new Error('root cause'), 'mid');\nerr = new VError(suberr, 'top');\nmod_assert.equal(err.message, 'top: mid');\nmod_assert.ok(err.cause() === suberr);\n\n/* null cause (for backwards compatibility with older versions) */\nerr = new VError(null, 'my error');\nmod_assert.equal(err.message, 'my error');\nmod_assert.ok(err.cause() === undefined);\nstack = cleanStack(err.stack);\nmod_assert.equal(stack, [\n    'VError: my error',\n    '    at Object.<anonymous> (tst.verror.js)'\n].join('\\n') + '\\n' + nodestack);\n\nerr = new VError({ 'cause': null }, 'my error');\nmod_assert.equal(err.message, 'my error');\nmod_assert.ok(err.cause() === undefined);\n\nerr = new VError(null);\nmod_assert.equal(err.message, '');\nmod_assert.ok(err.cause() === undefined);\nstack = cleanStack(err.stack);\nmod_assert.equal(stack, [\n    'VError',\n    '    at Object.<anonymous> (tst.verror.js)'\n].join('\\n') + '\\n' + nodestack);\n\n/* constructorOpt */\nfunction makeErr(options) {\n\treturn (new VError(options, 'test error'));\n}\nerr = makeErr({});\nstack = cleanStack(err.stack);\nmod_assert.equal(stack, [\n    'VError: test error',\n    '    at makeErr (tst.verror.js)',\n    '    at Object.<anonymous> (tst.verror.js)'\n].join('\\n') + '\\n' + nodestack);\n\nerr = makeErr({ 'constructorOpt': makeErr });\nstack = cleanStack(err.stack);\nmod_assert.equal(stack, [\n    'VError: test error',\n    '    at Object.<anonymous> (tst.verror.js)'\n].join('\\n') + '\\n' + nodestack);\n"]}