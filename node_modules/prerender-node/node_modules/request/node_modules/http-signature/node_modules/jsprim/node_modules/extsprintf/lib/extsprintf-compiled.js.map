{"version":3,"sources":["extsprintf.js"],"names":[],"mappings":"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","file":"extsprintf-compiled.js","sourcesContent":["/*\n * extsprintf.js: extended POSIX-style sprintf\n */\n\nvar mod_assert = require('assert');\nvar mod_util = require('util');\n\n/*\n * Public interface\n */\nexports.sprintf = jsSprintf;\n\n/*\n * Stripped down version of s[n]printf(3c).  We make a best effort to throw an\n * exception when given a format string we don't understand, rather than\n * ignoring it, so that we won't break existing programs if/when we go implement\n * the rest of this.\n *\n * This implementation currently supports specifying\n *\t- field alignment ('-' flag),\n * \t- zero-pad ('0' flag)\n *\t- always show numeric sign ('+' flag),\n *\t- field width\n *\t- conversions for strings, decimal integers, and floats (numbers).\n *\t- argument size specifiers.  These are all accepted but ignored, since\n *\t  Javascript has no notion of the physical size of an argument.\n *\n * Everything else is currently unsupported, most notably precision, unsigned\n * numbers, non-decimal numbers, and characters.\n */\nfunction jsSprintf(fmt)\n{\n\tvar regex = [\n\t    '([^%]*)',\t\t\t\t/* normal text */\n\t    '%',\t\t\t\t/* start of format */\n\t    '([\\'\\\\-+ #0]*?)',\t\t\t/* flags (optional) */\n\t    '([1-9]\\\\d*)?',\t\t\t/* width (optional) */\n\t    '(\\\\.([1-9]\\\\d*))?',\t\t/* precision (optional) */\n\t    '[lhjztL]*?',\t\t\t/* length mods (ignored) */\n\t    '([diouxXfFeEgGaAcCsSp%jr])'\t/* conversion */\n\t].join('');\n\n\tvar re = new RegExp(regex);\n\tvar args = Array.prototype.slice.call(arguments, 1);\n\tvar flags, width, precision, conversion;\n\tvar left, pad, sign, arg, match;\n\tvar ret = '';\n\tvar argn = 1;\n\n\tmod_assert.equal('string', typeof (fmt));\n\n\twhile ((match = re.exec(fmt)) !== null) {\n\t\tret += match[1];\n\t\tfmt = fmt.substring(match[0].length);\n\n\t\tflags = match[2] || '';\n\t\twidth = match[3] || 0;\n\t\tprecision = match[4] || '';\n\t\tconversion = match[6];\n\t\tleft = false;\n\t\tsign = false;\n\t\tpad = ' ';\n\n\t\tif (conversion == '%') {\n\t\t\tret += '%';\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (args.length === 0)\n\t\t\tthrow (new Error('too few args to sprintf'));\n\n\t\targ = args.shift();\n\t\targn++;\n\n\t\tif (flags.match(/[\\' #]/))\n\t\t\tthrow (new Error(\n\t\t\t    'unsupported flags: ' + flags));\n\n\t\tif (precision.length > 0)\n\t\t\tthrow (new Error(\n\t\t\t    'non-zero precision not supported'));\n\n\t\tif (flags.match(/-/))\n\t\t\tleft = true;\n\n\t\tif (flags.match(/0/))\n\t\t\tpad = '0';\n\n\t\tif (flags.match(/\\+/))\n\t\t\tsign = true;\n\n\t\tswitch (conversion) {\n\t\tcase 's':\n\t\t\tif (arg === undefined || arg === null)\n\t\t\t\tthrow (new Error('argument ' + argn +\n\t\t\t\t    ': attempted to print undefined or null ' +\n\t\t\t\t    'as a string'));\n\t\t\tret += doPad(pad, width, left, arg.toString());\n\t\t\tbreak;\n\n\t\tcase 'd':\n\t\t\targ = Math.floor(arg);\n\t\t\t/*jsl:fallthru*/\n\t\tcase 'f':\n\t\t\tsign = sign && arg > 0 ? '+' : '';\n\t\t\tret += sign + doPad(pad, width, left,\n\t\t\t    arg.toString());\n\t\t\tbreak;\n\n\t\tcase 'j': /* non-standard */\n\t\t\tif (width === 0)\n\t\t\t\twidth = 10;\n\t\t\tret += mod_util.inspect(arg, false, width);\n\t\t\tbreak;\n\n\t\tcase 'r': /* non-standard */\n\t\t\tret += dumpException(arg);\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tthrow (new Error('unsupported conversion: ' +\n\t\t\t    conversion));\n\t\t}\n\t}\n\n\tret += fmt;\n\treturn (ret);\n}\n\nfunction doPad(chr, width, left, str)\n{\n\tvar ret = str;\n\n\twhile (ret.length < width) {\n\t\tif (left)\n\t\t\tret += chr;\n\t\telse\n\t\t\tret = chr + ret;\n\t}\n\n\treturn (ret);\n}\n\n/*\n * This function dumps long stack traces for exceptions having a cause() method.\n * See node-verror for an example.\n */\nfunction dumpException(ex)\n{\n\tvar ret;\n\n\tif (!(ex instanceof Error))\n\t\tthrow (new Error(jsSprintf('invalid type for %%r: %j', ex)));\n\n\t/* Note that V8 prepends \"ex.stack\" with ex.toString(). */\n\tret = 'EXCEPTION: ' + ex.constructor.name + ': ' + ex.stack;\n\n\tif (ex.cause && typeof (ex.cause) === 'function') {\n\t\tvar cex = ex.cause();\n\t\tif (cex) {\n\t\t\tret += '\\nCaused by: ' + dumpException(cex);\n\t\t}\n\t}\n\n\treturn (ret);\n}\n"]}