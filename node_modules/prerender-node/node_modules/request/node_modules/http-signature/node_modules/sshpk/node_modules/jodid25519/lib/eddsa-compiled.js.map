{"version":3,"sources":["eddsa.js"],"names":[],"mappings":"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","file":"eddsa-compiled.js","sourcesContent":["\"use strict\";\n/**\n * @fileOverview\n * Digital signature scheme based on Curve25519 (Ed25519 or EdDSA).\n */\n\n/*\n * Copyright (c) 2011, 2012, 2014 Ron Garret\n * Copyright (c) 2014 Mega Limited\n * under the MIT License.\n *\n * Authors: Guy K. Kloss, Ron Garret\n *\n * You should have received a copy of the license along with this program.\n */\n\nvar core = require('./core');\nvar curve255 = require('./curve255');\nvar utils = require('./utils');\nvar BigInteger = require('jsbn').BigInteger;\nvar crypto = require('crypto');\n\n    /**\n     * @exports jodid25519/eddsa\n     * Digital signature scheme based on Curve25519 (Ed25519 or EdDSA).\n     *\n     * @description\n     * Digital signature scheme based on Curve25519 (Ed25519 or EdDSA).\n     *\n     * <p>\n     * This code is adapted from fast-djbec.js, a faster but more complicated\n     * version of the Ed25519 encryption scheme (as compared to djbec.js).\n     * It uses two different representations for big integers: The jsbn\n     * BigInteger class, which can represent arbitrary-length numbers, and a\n     * special fixed-length representation optimised for 256-bit integers.\n     * The reason both are needed is that the Ed25519 algorithm requires some\n     * 512-bit numbers.</p>\n    */\n    var ns = {};\n\n    function _bi255(value) {\n        if (!(this instanceof _bi255)) {\n            return new _bi255(value);\n        }\n        if (typeof value === 'undefined') {\n            return _ZERO;\n        }\n        var c = value.constructor;\n        if ((c === Array || c === Uint16Array || c === Uint32Array) && (value.length === 16)) {\n            this.n = value;\n        } else if ((c === Array) && (value.length === 32)) {\n            this.n = _bytes2bi255(value).n;\n        } else if (c === String) {\n            this.n = utils.hexDecode(value);\n        } else if (c === Number) {\n            this.n = [value & 0xffff,\n                      value >> 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n        } else if (value instanceof _bi255) {\n            this.n = value.n.slice(0); // Copy constructor\n        } else {\n            throw \"Bad argument for bignum: \" + value;\n        }\n    }\n\n   _bi255.prototype = {\n        'toString' : function() {\n            return utils.hexEncode(this.n);\n        },\n        'toSource' : function() {\n            return '_' + utils.hexEncode(this.n);\n        },\n        'plus' : function(n1) {\n            return _bi255(core.bigintadd(this.n, n1.n));\n        },\n        'minus' : function(n1) {\n            return _bi255(core.bigintsub(this.n, n1.n)).modq();\n        },\n        'times' : function(n1) {\n            return _bi255(core.mulmodp(this.n, n1.n));\n        },\n        'divide' : function(n1) {\n            return this.times(n1.inv());\n        },\n        'sqr' : function() {\n            return _bi255(core.sqrmodp(this.n));\n        },\n        'cmp' : function(n1) {\n            return core.bigintcmp(this.n, n1.n);\n        },\n        'equals' : function(n1) {\n            return this.cmp(n1) === 0;\n        },\n        'isOdd' : function() {\n            return (this.n[0] & 1) === 1;\n        },\n        'shiftLeft' : function(cnt) {\n            _shiftL(this.n, cnt);\n            return this;\n        },\n        'shiftRight' : function(cnt) {\n            _shiftR(this.n, cnt);\n            return this;\n        },\n        'inv' : function() {\n            return _bi255(core.invmodp(this.n));\n        },\n        'pow' : function(e) {\n            return _bi255(_pow(this.n, e.n));\n        },\n        'modq' : function() {\n            return _modq(this);\n        },\n        'bytes' : function() {\n            return _bi255_bytes(this);\n        }\n    };\n\n    function _shiftL(n, cnt) {\n        var lastcarry = 0;\n        for (var i = 0; i < 16; i++) {\n            var carry = n[i] >> (16 - cnt);\n            n[i] = (n[i] << cnt) & 0xffff | lastcarry;\n            lastcarry = carry;\n        }\n        return n;\n    }\n\n    function _shiftR(n, cnt) {\n        var lastcarry = 0;\n        for (var i = 15; i >= 0; i--) {\n            var carry = n[i] << (16 - cnt) & 0xffff;\n            n[i] = (n[i] >> cnt) | lastcarry;\n            lastcarry = carry;\n        }\n        return n;\n    }\n\n    function _bi255_bytes(n) {\n        n = _bi255(n); // Make a copy because shiftRight is destructive\n        var a = new Array(32);\n        for (var i = 31; i >= 0; i--) {\n            a[i] = n.n[0] & 0xff;\n            n.shiftRight(8);\n        }\n        return a;\n    }\n\n    function _bytes2bi255(a) {\n        var n = _ZERO;\n        for (var i = 0; i < 32; i++) {\n            n.shiftLeft(8);\n            n = n.plus(_bi255(a[i]));\n        }\n        return n;\n    }\n\n    function _pow(n, e) {\n        var result = core.ONE();\n        for (var i = 0; i < 256; i++) {\n            if (core.getbit(e, i) === 1) {\n                result = core.mulmodp(result, n);\n            }\n            n = core.sqrmodp(n);\n        }\n        return result;\n    }\n\n    var _ZERO = _bi255(0);\n    var _ONE = _bi255(1);\n    var _TWO = _bi255(2);\n    // This is the core prime.\n    var _Q = _bi255([0xffff - 18, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,\n                     0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff,\n                     0xffff, 0xffff, 0x7fff]);\n\n    function _modq(n) {\n        core.reduce(n.n);\n        if (n.cmp(_Q) >= 0) {\n            return _modq(n.minus(_Q));\n        }\n        if (n.cmp(_ZERO) === -1) {\n            return _modq(n.plus(_Q));\n        } else {\n            return n;\n        }\n    }\n\n    // _RECOVERY_EXPONENT = _Q.plus(_bi255(3)).divide(_bi255(8));\n    var _RECOVERY_EXPONENT = _bi255('0ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe');\n    // _D = _Q.minus(_bi255(121665)).divide(_bi255(121666));\n    var _D = _bi255('52036cee2b6ffe738cc740797779e89800700a4d4141d8ab75eb4dca135978a3');\n    // _I = _TWO.pow(_Q.minus(_ONE).divide(_bi255(4)));\n    var _I = _bi255('2b8324804fc1df0b2b4d00993dfbd7a72f431806ad2fe478c4ee1b274a0ea0b0');\n    // _L = _TWO.pow(_bi255(252)).plus(_bi255('14def9dea2f79cd65812631a5cf5d3ed'));\n    var _L = _bi255('1000000000000000000000000000000014def9dea2f79cd65812631a5cf5d3ed');\n    var _L_BI = _bi('1000000000000000000000000000000014def9dea2f79cd65812631a5cf5d3ed', 16);\n\n\n    // ////////////////////////////////////////////////////////////\n\n    function _isoncurve(p) {\n        var x = p[0];\n        var y = p[1];\n        var xsqr = x.sqr();\n        var ysqr = y.sqr();\n        var v = _D.times(xsqr).times(ysqr);\n        return ysqr.minus(xsqr).minus(_ONE).minus(v).modq().equals(_ZERO);\n    }\n\n    function _xrecover(y) {\n        var ysquared = y.sqr();\n        var xx = ysquared.minus(_ONE).divide(_ONE.plus(_D.times(ysquared)));\n        var x = xx.pow(_RECOVERY_EXPONENT);\n        if (!(x.times(x).minus(xx).equals(_ZERO))) {\n            x = x.times(_I);\n        }\n        if (x.isOdd()) {\n            x = _Q.minus(x);\n        }\n        return x;\n    }\n\n    function _x_pt_add(pt1, pt2) {\n        var x1 = pt1[0];\n        var y1 = pt1[1];\n        var z1 = pt1[2];\n        var t1 = pt1[3];\n        var x2 = pt2[0];\n        var y2 = pt2[1];\n        var z2 = pt2[2];\n        var t2 = pt2[3];\n        var A = y1.minus(x1).times(y2.plus(x2));\n        var B = y1.plus(x1).times(y2.minus(x2));\n        var C = z1.times(_TWO).times(t2);\n        var D = t1.times(_TWO).times(z2);\n        var E = D.plus(C);\n        var F = B.minus(A);\n        var G = B.plus(A);\n        var H = D.minus(C);\n        return [E.times(F), G.times(H), F.times(G), E.times(H)];\n    }\n\n    function _xpt_double(pt1) {\n        var x1 = pt1[0];\n        var y1 = pt1[1];\n        var z1 = pt1[2];\n        var A = x1.times(x1);\n        var B = y1.times(y1);\n        var C = _TWO.times(z1).times(z1);\n        var D = _Q.minus(A);\n        var J = x1.plus(y1);\n        var E = J.times(J).minus(A).minus(B);\n        var G = D.plus(B);\n        var F = G.minus(C);\n        var H = D.minus(B);\n        return [E.times(F), G.times(H), F.times(G), E.times(H)];\n    }\n\n    function _xpt_mult(pt, n) {\n        if (n.equals(_ZERO)) {\n            return [_ZERO, _ONE, _ONE, _ZERO];\n        }\n        var odd = n.isOdd();\n        n.shiftRight(1);\n        var value = _xpt_double(_xpt_mult(pt, n));\n        return odd ? _x_pt_add(value, pt) : value;\n    }\n\n    function _pt_xform(pt) {\n        var x = pt[0];\n        var y = pt[1];\n        return [x, y, _ONE, x.times(y)];\n    }\n\n    function _pt_unxform(pt) {\n        var x = pt[0];\n        var y = pt[1];\n        var z = pt[2];\n        var invz = z.inv();\n        return [x.times(invz), y.times(invz)];\n    }\n\n    function _scalarmult(pt, n) {\n        return _pt_unxform(_xpt_mult(_pt_xform(pt), n));\n    }\n\n    function _bytesgetbit(bytes, n) {\n        return (bytes[bytes.length - (n >>> 3) - 1] >> (n & 7)) & 1;\n    }\n\n    function _xpt_mult_bytes(pt, bytes) {\n        var r = [_ZERO, _ONE, _ONE, _ZERO];\n        for (var i = (bytes.length << 3) - 1; i >= 0; i--) {\n            r = _xpt_double(r);\n            if (_bytesgetbit(bytes, i) === 1) {\n                r = _x_pt_add(r, pt);\n            }\n        }\n        return r;\n    }\n\n    function _scalarmultBytes(pt, bytes) {\n        return _pt_unxform(_xpt_mult_bytes(_pt_xform(pt), bytes));\n    }\n\n    var _by = _bi255(4).divide(_bi255(5));\n    var _bx = _xrecover(_by);\n    var _bp = [_bx, _by];\n\n    function _encodeint(n) {\n        return n.bytes(32).reverse();\n    }\n    function _decodeint(b) {\n        return _bi255(b.slice(0).reverse());\n    }\n\n    function _encodepoint(p) {\n        var v = _encodeint(p[1]);\n        if (p[0].isOdd()) {\n            v[31] |= 0x80;\n        }\n        return v;\n    }\n\n    function _decodepoint(v) {\n        v = v.slice(0);\n        var signbit = v[31] >> 7;\n        v[31] &= 127;\n        var y = _decodeint(v);\n        var x = _xrecover(y);\n        if ((x.n[0] & 1) !== signbit) {\n            x = _Q.minus(x);\n        }\n        var p = [x, y];\n        if (!_isoncurve(p)) {\n            throw ('Point is not on curve');\n        }\n        return p;\n    }\n\n    // //////////////////////////////////////////////////\n\n    /**\n     * Factory function to create a suitable BigInteger.\n     *\n     * @param value\n     *     The value for the big integer.\n     * @param base {integer}\n     *     Base of the conversion of elements in ``value``.\n     * @returns\n     *     A BigInteger object.\n     */\n    function _bi(value, base) {\n        if (base !== undefined) {\n            if (base === 256) {\n                return _bi(utils.string2bytes(value));\n            }\n            return new BigInteger(value, base);\n        } else if (typeof value === 'string') {\n            return new BigInteger(value, 10);\n        } else if ((value instanceof Array) || (value instanceof Uint8Array)\n          || Buffer.isBuffer(value)) {\n            return new BigInteger(value);\n        } else if (typeof value === 'number') {\n            return new BigInteger(value.toString(), 10);\n        } else {\n            throw \"Can't convert \" + value + \" to BigInteger\";\n        }\n    }\n\n    function _bi2bytes(n, cnt) {\n        if (cnt === undefined) {\n            cnt = (n.bitLength() + 7) >>> 3;\n        }\n        var bytes = new Array(cnt);\n        for (var i = cnt - 1; i >= 0; i--) {\n            bytes[i] = n[0] & 255; // n.and(0xff);\n            n = n.shiftRight(8);\n        }\n        return bytes;\n    }\n\n    BigInteger.prototype.bytes = function(n) {\n        return _bi2bytes(this, n);\n    };\n\n    // /////////////////////////////////////////////////////////\n\n    function _bytehash(s) {\n        var sha = crypto.createHash('sha512').update(s).digest();\n        return _bi2bytes(_bi(sha), 64).reverse();\n    }\n\n    function _stringhash(s) {\n        var sha = crypto.createHash('sha512').update(s).digest();\n        return _map(_chr, _bi2bytes(_bi(sha), 64)).join('');\n    }\n\n    function _inthash(s) {\n        // Need a leading 0 to prevent sign extension\n        return _bi([0].concat(_bytehash(s)));\n    }\n\n    function _inthash_lo(s) {\n        return _bi255(_bytehash(s).slice(32, 64));\n    }\n\n    function _inthash_mod_l(s) {\n        return _inthash(s).mod(_L_BI);\n    }\n\n    function _get_a(sk) {\n        var a = _inthash_lo(sk);\n        a.n[0] &= 0xfff8;\n        a.n[15] &= 0x3fff;\n        a.n[15] |= 0x4000;\n        return a;\n    }\n\n    function _publickey(sk) {\n        return _encodepoint(_scalarmult(_bp, _get_a(sk)));\n    }\n\n    function _map(f, l) {\n        var result = new Array(l.length);\n        for (var i = 0; i < l.length; i++) {\n            result[i] = f(l[i]);\n        }\n        return result;\n    }\n\n    function _chr(n) {\n        return String.fromCharCode(n);\n    }\n\n    function _ord(c) {\n        return c.charCodeAt(0);\n    }\n\n    function _pt_add(p1, p2) {\n        return _pt_unxform(_x_pt_add(_pt_xform(p1), _pt_xform(p2)));\n    }\n\n\n    // Exports for the API.\n\n    /**\n     * Checks whether a point is on the curve.\n     *\n     * @function\n     * @param point {string}\n     *     The point to check for in a byte string representation.\n     * @returns {boolean}\n     *     true if the point is on the curve, false otherwise.\n     */\n    ns.isOnCurve = function(point) {\n        try {\n            _isoncurve(_decodepoint(utils.string2bytes(point)));\n        } catch(e) {\n            if (e === 'Point is not on curve') {\n                return false;\n            } else {\n                throw e;\n            }\n        }\n        return true;\n    };\n\n\n    /**\n     * Computes the EdDSA public key.\n     *\n     * <p>Note: Seeds should be a byte string, not a unicode string containing\n     * multi-byte characters.</p>\n     *\n     * @function\n     * @param keySeed {string}\n     *     Private key seed in the form of a byte string.\n     * @returns {string}\n     *     Public key as byte string computed from the private key seed\n     *     (32 bytes).\n     */\n    ns.publicKey = function(keySeed) {\n        return utils.bytes2string(_publickey(keySeed));\n    };\n\n\n    /**\n     * Computes an EdDSA signature of a message.\n     *\n     * <p>Notes:</p>\n     *\n     * <ul>\n     *   <li>Unicode messages need to be converted to a byte representation\n     *   (e. g. UTF-8).</li>\n     *   <li>If `publicKey` is given, and it is *not* a point of the curve,\n     *   the signature will be faulty, but no error will be thrown.</li>\n     * </ul>\n     *\n     * @function\n     * @param message {string}\n     *     Message in the form of a byte string.\n     * @param keySeed {string}\n     *     Private key seed in the form of a byte string.\n     * @param publicKey {string}\n     *     Public key as byte string (if not present, it will be computed from\n     *     the private key seed).\n     * @returns {string}\n     *     Detached message signature in the form of a byte string (64 bytes).\n     */\n    ns.sign = function(message, keySeed, publicKey) {\n        if (publicKey === undefined) {\n            publicKey = _publickey(keySeed);\n        } else {\n            publicKey = utils.string2bytes(publicKey);\n        }\n        var a = _bi(_get_a(keySeed).toString(), 16);\n        var hs = _stringhash(keySeed);\n        var r = _bytehash(hs.slice(32, 64) + message);\n        var rp = _scalarmultBytes(_bp, r);\n        var erp = _encodepoint(rp);\n        r = _bi(r).mod(_bi(1, 10).shiftLeft(512));\n        var s = _map(_chr, erp).join('') + _map(_chr, publicKey).join('') + message;\n        s = _inthash_mod_l(s).multiply(a).add(r).mod(_L_BI);\n        return utils.bytes2string(erp.concat(_encodeint(s)));\n    };\n\n\n    /**\n     * Verifies an EdDSA signature of a message with the public key.\n     *\n     * <p>Note: Unicode messages need to be converted to a byte representation\n     * (e. g. UTF-8).</p>\n     *\n     * @function\n     * @param signature {string}\n     *     Message signature in the form of a byte string. Can be detached\n     *     (64 bytes), or attached to be sliced off.\n     * @param message {string}\n     *     Message in the form of a byte string.\n     * @param publicKey {string}\n     *     Public key as byte string (if not present, it will be computed from\n     *     the private key seed).\n     * @returns {boolean}\n     *     true, if the signature verifies.\n     */\n    ns.verify = function(signature, message, publicKey) {\n        signature = utils.string2bytes(signature.slice(0, 64));\n        publicKey = utils.string2bytes(publicKey);\n        var rpe = signature.slice(0, 32);\n        var rp = _decodepoint(rpe);\n        var a = _decodepoint(publicKey);\n        var s = _decodeint(signature.slice(32, 64));\n        var h = _inthash(utils.bytes2string(rpe.concat(publicKey)) + message);\n        var v1 = _scalarmult(_bp, s);\n        var value = _scalarmultBytes(a, _bi2bytes(h));\n        var v2 = _pt_add(rp, value);\n        return v1[0].equals(v2[0]) && v1[1].equals(v2[1]);\n    };\n\n\n    /**\n     * Generates a new random private key seed of 32 bytes length (256 bit).\n     *\n     * @function\n     * @returns {string}\n     *     Byte string containing a new random private key seed.\n     */\n    ns.generateKeySeed = function() {\n        return core.generateKey(false);\n    };\n\nmodule.exports = ns;\n"]}