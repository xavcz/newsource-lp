{"version":3,"sources":["pem.js"],"names":[],"mappings":"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","file":"pem-compiled.js","sourcesContent":["// Copyright 2015 Joyent, Inc.\n\nmodule.exports = {\n\tread: read,\n\twrite: write\n};\n\nvar assert = require('assert-plus');\nvar asn1 = require('asn1');\nvar algs = require('../algs');\nvar utils = require('../utils');\nvar Key = require('../key');\nvar PrivateKey = require('../private-key');\n\nvar pkcs1 = require('./pkcs1');\nvar pkcs8 = require('./pkcs8');\nvar sshpriv = require('./ssh-private');\nvar rfc4253 = require('./rfc4253');\n\n/*\n * For reading we support both PKCS#1 and PKCS#8. If we find a private key,\n * we just take the public component of it and use that.\n */\nfunction read(buf, forceType) {\n\tvar input = buf;\n\tif (typeof (buf) !== 'string') {\n\t\tassert.buffer(buf, 'buf');\n\t\tbuf = buf.toString('ascii');\n\t}\n\n\tvar lines = buf.trim().split('\\n');\n\n\tvar m = lines[0].match(/*JSSTYLED*/\n\t    /[-]+[ ]*BEGIN ([A-Z0-9]+ )?(PUBLIC|PRIVATE) KEY[ ]*[-]+/);\n\tassert.ok(m, 'invalid PEM header');\n\n\tvar m2 = lines[lines.length - 1].match(/*JSSTYLED*/\n\t    /[-]+[ ]*END ([A-Z0-9]+ )?(PUBLIC|PRIVATE) KEY[ ]*[-]+/);\n\tassert.ok(m2, 'invalid PEM footer');\n\n\t/* Begin and end banners must match key type */\n\tassert.equal(m[2], m2[2]);\n\tvar type = m[2].toLowerCase();\n\n\tvar alg;\n\tif (m[1]) {\n\t\t/* They also must match algorithms, if given */\n\t\tassert.equal(m[1], m2[1], 'PEM header and footer mismatch');\n\t\talg = m[1].trim();\n\t}\n\n\tvar headers = {};\n\twhile (true) {\n\t\tlines = lines.slice(1);\n\t\tm = lines[0].match(/*JSSTYLED*/\n\t\t    /^([A-Za-z0-9-]+): (.+)$/);\n\t\tif (!m)\n\t\t\tbreak;\n\t\theaders[m[1].toLowerCase()] = m[2];\n\t}\n\tif (headers['proc-type']) {\n\t\tvar parts = headers['proc-type'].split(',');\n\t\tif (parts[0] === '4' && parts[1] === 'ENCRYPTED') {\n\t\t\tthrow (new Error('PEM key is encrypted ' +\n\t\t\t    '(password-protected). Please use the ' +\n\t\t\t    'SSH agent or decrypt the key.'));\n\t\t}\n\t}\n\n\t/* Chop off the first and last lines */\n\tlines = lines.slice(0, -1).join('');\n\tbuf = new Buffer(lines, 'base64');\n\n\t/* The new OpenSSH internal format abuses PEM headers */\n\tif (alg && alg.toLowerCase() === 'openssh')\n\t\treturn (sshpriv.readSSHPrivate(type, buf));\n\tif (alg && alg.toLowerCase() === 'ssh2')\n\t\treturn (rfc4253.readType(type, buf));\n\n\tvar der = new asn1.BerReader(buf);\n\tder.originalInput = input;\n\n\t/*\n\t * All of the PEM file types start with a sequence tag, so chop it\n\t * off here\n\t */\n\tder.readSequence();\n\n\t/* PKCS#1 type keys name an algorithm in the banner explicitly */\n\tif (alg) {\n\t\tif (forceType)\n\t\t\tassert.strictEqual(forceType, 'pkcs1');\n\t\treturn (pkcs1.readPkcs1(alg, type, der));\n\t} else {\n\t\tif (forceType)\n\t\t\tassert.strictEqual(forceType, 'pkcs8');\n\t\treturn (pkcs8.readPkcs8(alg, type, der));\n\t}\n}\n\nfunction write(key, type) {\n\tassert.object(key);\n\n\tvar alg = {'ecdsa': 'EC', 'rsa': 'RSA', 'dsa': 'DSA'}[key.type];\n\tvar header;\n\n\tvar der = new asn1.BerWriter();\n\n\tif (PrivateKey.isPrivateKey(key)) {\n\t\tif (type && type === 'pkcs8') {\n\t\t\theader = 'PRIVATE KEY';\n\t\t\tpkcs8.writePkcs8(der, key);\n\t\t} else {\n\t\t\tif (type)\n\t\t\t\tassert.strictEqual(type, 'pkcs1');\n\t\t\theader = alg + ' PRIVATE KEY';\n\t\t\tpkcs1.writePkcs1(der, key);\n\t\t}\n\n\t} else if (Key.isKey(key)) {\n\t\tif (type && type === 'pkcs1') {\n\t\t\theader = alg + ' PUBLIC KEY';\n\t\t\tpkcs1.writePkcs1(der, key);\n\t\t} else {\n\t\t\tif (type)\n\t\t\t\tassert.strictEqual(type, 'pkcs8');\n\t\t\theader = 'PUBLIC KEY';\n\t\t\tpkcs8.writePkcs8(der, key);\n\t\t}\n\n\t} else {\n\t\tthrow (new Error('key is not a Key or PrivateKey'));\n\t}\n\n\tvar tmp = der.buffer.toString('base64');\n\tvar len = tmp.length + (tmp.length / 64) +\n\t    18 + 16 + header.length*2 + 10;\n\tvar buf = new Buffer(len);\n\tvar o = 0;\n\to += buf.write('-----BEGIN ' + header + '-----\\n', o);\n\tfor (var i = 0; i < tmp.length; ) {\n\t\tvar limit = i + 64;\n\t\tif (limit > tmp.length)\n\t\t\tlimit = tmp.length;\n\t\to += buf.write(tmp.slice(i, limit), o);\n\t\tbuf[o++] = 10;\n\t\ti = limit;\n\t}\n\to += buf.write('-----END ' + header + '-----\\n', o);\n\n\treturn (buf.slice(0, o));\n}\n"]}