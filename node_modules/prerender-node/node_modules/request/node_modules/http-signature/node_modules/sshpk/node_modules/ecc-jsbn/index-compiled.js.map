{"version":3,"sources":["index.js"],"names":[],"mappings":";;AAAA,IAAI,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AAC/B,IAAI,UAAU,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,UAAU,CAAC;AAC5C,IAAI,SAAS,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC,SAAS,CAAC;AACjD,OAAO,CAAC,QAAQ,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC;;;AAG3C,SAAS,QAAQ;;;4BACjB;QADkB,GAAG;QAAC,GAAG;;AAEjB,QAAC,GAAG,CAAC,MAAM,IAAI,GAAG;aAAI,GAAG;;WAAY,GAAG,GAAC,GAAG;YAAC,GAAG;;;KAAC;GACxD;CAAA;;AAED,OAAO,CAAC,KAAK,GAAG,UAAS,KAAK,EAAE,GAAG,EAAE,QAAQ,EAC7C;AACE,MAAI,IAAI,CAAC;AACV,MAAI,CAAC,GAAG,KAAK,EAAE,CAAC;AAChB,MAAI,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC;AAChB,MAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,SAAS,EAAE,GAAC,CAAC,CAAC,CAAC;;AAExC,MAAG,GAAG,EACN;AACE,QAAG,QAAQ,EACX;AACE,UAAI,KAAK,GAAG,CAAC,CAAC,QAAQ,EAAE,CAAC;;;;;;AAMzB,UAAI,CAAC,CAAC,GAAG,KAAK,CAAC,cAAc,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;KACpD,MAAI;AACH,UAAG,GAAG,CAAC,MAAM,IAAI,KAAK,EAAE,OAAO,KAAK,CAAC;AACrC,UAAI,GAAG,IAAI,UAAU,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,EAAE,CAAC,CAAC;KAChD;GACF,MAAI;AACH,QAAI,EAAE,GAAG,CAAC,CAAC,QAAQ,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;AACpC,QAAI,CAAC,GAAG,IAAI,UAAU,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;AAC1D,QAAI,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;AACrC,QAAI,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;GAClC;AACD,MAAG,IAAI,CAAC,CAAC,EACT;;;AAGE,QAAI,CAAC,SAAS,GAAG,IAAI,MAAM,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,wBAAwB,CAAC,IAAI,CAAC,CAAC,CAAC,EAAC,KAAK,CAAC,CAAC;GAClF;AACD,MAAG,IAAI,EACP;AACE,QAAI,CAAC,UAAU,GAAG,IAAI,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAC,KAAK,GAAC,CAAC,CAAC,EAAC,KAAK,CAAC,CAAC;AACxE,QAAI,CAAC,kBAAkB,GAAG,UAAS,GAAG,EACtC;AACE,UAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,OAAO,KAAK,CAAC;AAChC,UAAI,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;AAC7B,aAAO,IAAI,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,YAAY,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAC,KAAK,GAAC,CAAC,CAAC,EAAC,KAAK,CAAC,CAAC;KAClF,CAAA;GACD;CACF,CAAA","file":"index-compiled.js","sourcesContent":["var crypto = require(\"crypto\");\nvar BigInteger = require(\"jsbn\").BigInteger;\nvar ECPointFp = require(\"./lib/ec.js\").ECPointFp;\nexports.ECCurves = require(\"./lib/sec.js\");\n\n// zero prepad\nfunction unstupid(hex,len)\n{\n\treturn (hex.length >= len) ? hex : unstupid(\"0\"+hex,len);\n}\n\nexports.ECKey = function(curve, key, isPublic)\n{\n  var priv;\n\tvar c = curve();\n\tvar n = c.getN();\n  var bytes = Math.floor(n.bitLength()/8);\n\n  if(key)\n  {\n    if(isPublic)\n    {\n      var curve = c.getCurve();\n//      var x = key.slice(1,bytes+1); // skip the 04 for uncompressed format\n//      var y = key.slice(bytes+1);\n//      this.P = new ECPointFp(curve,\n//        curve.fromBigInteger(new BigInteger(x.toString(\"hex\"), 16)),\n//        curve.fromBigInteger(new BigInteger(y.toString(\"hex\"), 16)));      \n      this.P = curve.decodePointHex(key.toString(\"hex\"));\n    }else{\n      if(key.length != bytes) return false;\n      priv = new BigInteger(key.toString(\"hex\"), 16);      \n    }\n  }else{\n    var n1 = n.subtract(BigInteger.ONE);\n    var r = new BigInteger(crypto.randomBytes(n.bitLength()));\n    priv = r.mod(n1).add(BigInteger.ONE);\n    this.P = c.getG().multiply(priv);\n  }\n  if(this.P)\n  {\n//  var pubhex = unstupid(this.P.getX().toBigInteger().toString(16),bytes*2)+unstupid(this.P.getY().toBigInteger().toString(16),bytes*2);\n//  this.PublicKey = new Buffer(\"04\"+pubhex,\"hex\");\n    this.PublicKey = new Buffer(c.getCurve().encodeCompressedPointHex(this.P),\"hex\");\n  }\n  if(priv)\n  {\n    this.PrivateKey = new Buffer(unstupid(priv.toString(16),bytes*2),\"hex\");\n    this.deriveSharedSecret = function(key)\n    {\n      if(!key || !key.P) return false;\n      var S = key.P.multiply(priv);\n      return new Buffer(unstupid(S.getX().toBigInteger().toString(16),bytes*2),\"hex\");\n   }     \n  }\n}\n\n"]}