{"version":3,"sources":["pkcs8.js"],"names":[],"mappings":"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","file":"pkcs8-compiled.js","sourcesContent":["// Copyright 2015 Joyent, Inc.\n\nmodule.exports = {\n\tread: read,\n\treadPkcs8: readPkcs8,\n\twrite: write,\n\twritePkcs8: writePkcs8,\n\n\treadECDSACurve: readECDSACurve,\n\twriteECDSACurve: writeECDSACurve\n};\n\nvar assert = require('assert-plus');\nvar asn1 = require('asn1');\nvar algs = require('../algs');\nvar utils = require('../utils');\nvar Key = require('../key');\nvar PrivateKey = require('../private-key');\nvar pem = require('./pem');\n\nfunction read(buf) {\n\treturn (pem.read(buf, 'pkcs8'));\n}\n\nfunction write(key) {\n\treturn (pem.write(key, 'pkcs8'));\n}\n\n/* Helper to read in a single mpint */\nfunction readMPInt(der, nm) {\n\tassert.strictEqual(der.peek(), asn1.Ber.Integer,\n\t    nm + ' is not an Integer');\n\treturn (utils.mpNormalize(der.readString(asn1.Ber.Integer, true)));\n}\n\nfunction readPkcs8(alg, type, der) {\n\t/* Private keys in pkcs#8 format have a weird extra int */\n\tif (der.peek() === asn1.Ber.Integer) {\n\t\tassert.strictEqual(type, 'private',\n\t\t    'unexpected Integer at start of public key');\n\t\tder.readString(asn1.Ber.Integer, true);\n\t}\n\n\tder.readSequence();\n\n\tvar oid = der.readOID();\n\tswitch (oid) {\n\tcase '1.2.840.113549.1.1.1':\n\t\tif (type === 'public')\n\t\t\treturn (readPkcs8RSAPublic(der));\n\t\telse\n\t\t\treturn (readPkcs8RSAPrivate(der));\n\tcase '1.2.840.10040.4.1':\n\t\tif (type === 'public')\n\t\t\treturn (readPkcs8DSAPublic(der));\n\t\telse\n\t\t\treturn (readPkcs8DSAPrivate(der));\n\tcase '1.2.840.10045.2.1':\n\t\tif (type === 'public')\n\t\t\treturn (readPkcs8ECDSAPublic(der));\n\t\telse\n\t\t\treturn (readPkcs8ECDSAPrivate(der));\n\tdefault:\n\t\tthrow (new Error('Unknown key type OID ' + oid));\n\t}\n}\n\nfunction readPkcs8RSAPublic(der) {\n\t// Null -- XXX this probably isn't good practice\n\tder.readByte();\n\tder.readByte();\n\n\t// bit string sequence\n\tder.readSequence(asn1.Ber.BitString);\n\tder.readByte();\n\tder.readSequence();\n\n\t// modulus\n\tvar n = readMPInt(der, 'modulus');\n\tvar e = readMPInt(der, 'exponent');\n\n\t// now, make the key\n\tvar key = {\n\t\ttype: 'rsa',\n\t\tsource: der.originalInput,\n\t\tparts: [\n\t\t\t{ name: 'e', data: e },\n\t\t\t{ name: 'n', data: n }\n\t\t]\n\t};\n\n\treturn (new Key(key));\n}\n\nfunction readPkcs8RSAPrivate(der) {\n\tder.readByte();\n\tder.readByte();\n\n\tder.readSequence(asn1.Ber.OctetString);\n\tder.readSequence();\n\n\tvar ver = readMPInt(der, 'version');\n\tassert.equal(ver[0], 0x0, 'unknown RSA private key version');\n\n\t// modulus then public exponent\n\tvar n = readMPInt(der, 'modulus');\n\tvar e = readMPInt(der, 'public exponent');\n\tvar d = readMPInt(der, 'private exponent');\n\tvar p = readMPInt(der, 'prime1');\n\tvar q = readMPInt(der, 'prime2');\n\tvar dmodp = readMPInt(der, 'exponent1');\n\tvar dmodq = readMPInt(der, 'exponent2');\n\tvar iqmp = readMPInt(der, 'iqmp');\n\n\t// now, make the key\n\tvar key = {\n\t\ttype: 'rsa',\n\t\tparts: [\n\t\t\t{ name: 'n', data: n },\n\t\t\t{ name: 'e', data: e },\n\t\t\t{ name: 'd', data: d },\n\t\t\t{ name: 'iqmp', data: iqmp },\n\t\t\t{ name: 'p', data: p },\n\t\t\t{ name: 'q', data: q },\n\t\t\t{ name: 'dmodp', data: dmodp },\n\t\t\t{ name: 'dmodq', data: dmodq }\n\t\t]\n\t};\n\n\treturn (new PrivateKey(key));\n}\n\nfunction readPkcs8DSAPublic(der) {\n\tder.readSequence();\n\n\tvar p = readMPInt(der, 'p');\n\tvar q = readMPInt(der, 'q');\n\tvar g = readMPInt(der, 'g');\n\n\t// bit string sequence\n\tder.readSequence(asn1.Ber.BitString);\n\tder.readByte();\n\n\tvar y = readMPInt(der, 'y');\n\n\t// now, make the key\n\tvar key = {\n\t\ttype: 'dsa',\n\t\tparts: [\n\t\t\t{ name: 'p', data: p },\n\t\t\t{ name: 'q', data: q },\n\t\t\t{ name: 'g', data: g },\n\t\t\t{ name: 'y', data: y }\n\t\t]\n\t};\n\n\treturn (new Key(key));\n}\n\nfunction readPkcs8DSAPrivate(der) {\n\tder.readSequence();\n\n\tvar p = readMPInt(der, 'p');\n\tvar q = readMPInt(der, 'q');\n\tvar g = readMPInt(der, 'g');\n\n\tder.readSequence(asn1.Ber.OctetString);\n\tvar x = readMPInt(der, 'x');\n\n\t/* The pkcs#8 format does not include the public key */\n\tvar y = utils.calculateDSAPublic(g, p, x);\n\n\tvar key = {\n\t\ttype: 'dsa',\n\t\tparts: [\n\t\t\t{ name: 'p', data: p },\n\t\t\t{ name: 'q', data: q },\n\t\t\t{ name: 'g', data: g },\n\t\t\t{ name: 'y', data: y },\n\t\t\t{ name: 'x', data: x }\n\t\t]\n\t};\n\n\treturn (new PrivateKey(key));\n}\n\nfunction readECDSACurve(der) {\n\tvar curveName, curveNames;\n\tvar j, c, cd;\n\n\tif (der.peek() === asn1.Ber.OID) {\n\t\tvar oid = der.readOID();\n\n\t\tcurveNames = Object.keys(algs.curves);\n\t\tfor (j = 0; j < curveNames.length; ++j) {\n\t\t\tc = curveNames[j];\n\t\t\tcd = algs.curves[c];\n\t\t\tif (cd.pkcs8oid === oid) {\n\t\t\t\tcurveName = c;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t} else {\n\t\t// ECParameters sequence\n\t\tder.readSequence();\n\t\tvar version = der.readString(asn1.Ber.Integer, true);\n\t\tassert.strictEqual(version[0], 1, 'ECDSA key not version 1');\n\n\t\tvar curve = {};\n\n\t\t// FieldID sequence\n\t\tder.readSequence();\n\t\tvar fieldTypeOid = der.readOID();\n\t\tassert.strictEqual(fieldTypeOid, '1.2.840.10045.1.1',\n\t\t    'ECDSA key is not from a prime-field');\n\t\tvar p = curve.p = utils.mpNormalize(\n\t\t    der.readString(asn1.Ber.Integer, true));\n\t\t/*\n\t\t * p always starts with a 1 bit, so count the zeros to get its\n\t\t * real size.\n\t\t */\n\t\tcurve.size = p.length * 8 - utils.countZeros(p);\n\n\t\t// Curve sequence\n\t\tder.readSequence();\n\t\tcurve.a = utils.mpNormalize(\n\t\t    der.readString(asn1.Ber.OctetString, true));\n\t\tcurve.b = utils.mpNormalize(\n\t\t    der.readString(asn1.Ber.OctetString, true));\n\t\tif (der.peek() === asn1.Ber.BitString)\n\t\t\tcurve.s = der.readString(asn1.Ber.BitString, true);\n\n\t\t// Combined Gx and Gy\n\t\tcurve.G = der.readString(asn1.Ber.OctetString, true);\n\t\tassert.strictEqual(curve.G[0], 0x4,\n\t\t    'uncompressed G is required');\n\n\t\tcurve.n = utils.mpNormalize(\n\t\t    der.readString(asn1.Ber.Integer, true));\n\t\tcurve.h = utils.mpNormalize(\n\t\t    der.readString(asn1.Ber.Integer, true));\n\t\tassert.strictEqual(curve.h[0], 0x1, 'a cofactor=1 curve is ' +\n\t\t    'required');\n\n\t\tcurveNames = Object.keys(algs.curves);\n\t\tvar ks = Object.keys(curve);\n\t\tfor (j = 0; j < curveNames.length; ++j) {\n\t\t\tc = curveNames[j];\n\t\t\tcd = algs.curves[c];\n\t\t\tvar equal = true;\n\t\t\tfor (var i = 0; i < ks.length; ++i) {\n\t\t\t\tvar k = ks[i];\n\t\t\t\tif (cd[k] === undefined)\n\t\t\t\t\tcontinue;\n\t\t\t\tif (typeof (cd[k]) === 'object' &&\n\t\t\t\t    cd[k].equals !== undefined) {\n\t\t\t\t\tif (!cd[k].equals(curve[k])) {\n\t\t\t\t\t\tequal = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t} else if (Buffer.isBuffer(cd[k])) {\n\t\t\t\t\tif (cd[k].toString('binary')\n\t\t\t\t\t    !== curve[k].toString('binary')) {\n\t\t\t\t\t\tequal = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (cd[k] !== curve[k]) {\n\t\t\t\t\t\tequal = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (equal) {\n\t\t\t\tcurveName = c;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn (curveName);\n}\n\nfunction readPkcs8ECDSAPrivate(der) {\n\tvar curveName = readECDSACurve(der);\n\tassert.string(curveName, 'a known elliptic curve');\n\n\tder.readSequence(asn1.Ber.OctetString);\n\tder.readSequence();\n\n\tvar version = readMPInt(der, 'version');\n\tassert.equal(version[0], 1, 'unknown version of ECDSA key');\n\n\tvar d = der.readString(asn1.Ber.OctetString, true);\n\tder.readSequence(0xa1);\n\n\tvar Q = der.readString(asn1.Ber.BitString, true);\n\tQ = utils.ecNormalize(Q);\n\n\tvar key = {\n\t\ttype: 'ecdsa',\n\t\tparts: [\n\t\t\t{ name: 'curve', data: new Buffer(curveName) },\n\t\t\t{ name: 'Q', data: Q },\n\t\t\t{ name: 'd', data: d }\n\t\t]\n\t};\n\n\treturn (new PrivateKey(key));\n}\n\nfunction readPkcs8ECDSAPublic(der) {\n\tvar curveName = readECDSACurve(der);\n\tassert.string(curveName, 'a known elliptic curve');\n\n\tvar Q = der.readString(asn1.Ber.BitString, true);\n\tQ = utils.ecNormalize(Q);\n\n\tvar key = {\n\t\ttype: 'ecdsa',\n\t\tparts: [\n\t\t\t{ name: 'curve', data: new Buffer(curveName) },\n\t\t\t{ name: 'Q', data: Q }\n\t\t]\n\t};\n\n\treturn (new Key(key));\n}\n\nfunction writePkcs8(der, key) {\n\tder.startSequence();\n\n\tif (PrivateKey.isPrivateKey(key)) {\n\t\tvar sillyInt = new Buffer(1);\n\t\tsillyInt[0] = 0x0;\n\t\tder.writeBuffer(sillyInt, asn1.Ber.Integer);\n\t}\n\n\tder.startSequence();\n\tswitch (key.type) {\n\tcase 'rsa':\n\t\tder.writeOID('1.2.840.113549.1.1.1');\n\t\tif (PrivateKey.isPrivateKey(key))\n\t\t\twritePkcs8RSAPrivate(key, der);\n\t\telse\n\t\t\twritePkcs8RSAPublic(key, der);\n\t\tbreak;\n\tcase 'dsa':\n\t\tder.writeOID('1.2.840.10040.4.1');\n\t\tif (PrivateKey.isPrivateKey(key))\n\t\t\twritePkcs8DSAPrivate(key, der);\n\t\telse\n\t\t\twritePkcs8DSAPublic(key, der);\n\t\tbreak;\n\tcase 'ecdsa':\n\t\tder.writeOID('1.2.840.10045.2.1');\n\t\tif (PrivateKey.isPrivateKey(key))\n\t\t\twritePkcs8ECDSAPrivate(key, der);\n\t\telse\n\t\t\twritePkcs8ECDSAPublic(key, der);\n\t\tbreak;\n\tdefault:\n\t\tthrow (new Error('Unsupported key type: ' + key.type));\n\t}\n\n\tder.endSequence();\n}\n\nfunction writePkcs8RSAPrivate(key, der) {\n\tder.writeNull();\n\tder.endSequence();\n\n\tder.startSequence(asn1.Ber.OctetString);\n\tder.startSequence();\n\n\tvar version = new Buffer(1);\n\tversion[0] = 0;\n\tder.writeBuffer(version, asn1.Ber.Integer);\n\n\tder.writeBuffer(key.part.n.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.e.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.d.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.p.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.q.data, asn1.Ber.Integer);\n\tif (!key.part.dmodp || !key.part.dmodq)\n\t\tutils.addRSAMissing(key);\n\tder.writeBuffer(key.part.dmodp.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.dmodq.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.iqmp.data, asn1.Ber.Integer);\n\n\tder.endSequence();\n\tder.endSequence();\n}\n\nfunction writePkcs8RSAPublic(key, der) {\n\tder.writeNull();\n\tder.endSequence();\n\n\tder.startSequence(asn1.Ber.BitString);\n\tder.writeByte(0x00);\n\n\tder.startSequence();\n\tder.writeBuffer(key.part.n.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.e.data, asn1.Ber.Integer);\n\tder.endSequence();\n\n\tder.endSequence();\n}\n\nfunction writePkcs8DSAPrivate(key, der) {\n\tder.startSequence();\n\tder.writeBuffer(key.part.p.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.q.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.g.data, asn1.Ber.Integer);\n\tder.endSequence();\n\n\tder.endSequence();\n\n\tder.startSequence(asn1.Ber.OctetString);\n\tder.writeBuffer(key.part.x.data, asn1.Ber.Integer);\n\tder.endSequence();\n}\n\nfunction writePkcs8DSAPublic(key, der) {\n\tder.startSequence();\n\tder.writeBuffer(key.part.p.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.q.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.g.data, asn1.Ber.Integer);\n\tder.endSequence();\n\tder.endSequence();\n\n\tder.startSequence(asn1.Ber.BitString);\n\tder.writeByte(0x00);\n\tder.writeBuffer(key.part.y.data, asn1.Ber.Integer);\n\tder.endSequence();\n}\n\nfunction writeECDSACurve(key, der) {\n\tvar curve = algs.curves[key.curve];\n\tif (curve.pkcs8oid) {\n\t\t/* This one has a name in pkcs#8, so just write the oid */\n\t\tder.writeOID(curve.pkcs8oid);\n\n\t} else {\n\t\t// ECParameters sequence\n\t\tder.startSequence();\n\n\t\tvar version = new Buffer(1);\n\t\tversion.writeUInt8(1, 0);\n\t\tder.writeBuffer(version, asn1.Ber.Integer);\n\n\t\t// FieldID sequence\n\t\tder.startSequence();\n\t\tder.writeOID('1.2.840.10045.1.1'); // prime-field\n\t\tder.writeBuffer(curve.p, asn1.Ber.Integer);\n\t\tder.endSequence();\n\n\t\t// Curve sequence\n\t\tder.startSequence();\n\t\tvar a = curve.p;\n\t\tif (a[0] === 0x0)\n\t\t\ta = a.slice(1);\n\t\tder.writeBuffer(a, asn1.Ber.OctetString);\n\t\tder.writeBuffer(curve.b, asn1.Ber.OctetString);\n\t\tder.writeBuffer(curve.s, asn1.Ber.BitString);\n\t\tder.endSequence();\n\n\t\tder.writeBuffer(curve.G, asn1.Ber.OctetString);\n\t\tder.writeBuffer(curve.n, asn1.Ber.Integer);\n\t\tvar h = curve.h;\n\t\tif (!h) {\n\t\t\th = new Buffer(1);\n\t\t\th[0] = 1;\n\t\t}\n\t\tder.writeBuffer(h, asn1.Ber.Integer);\n\n\t\t// ECParameters\n\t\tder.endSequence();\n\t}\n}\n\nfunction writePkcs8ECDSAPublic(key, der) {\n\twriteECDSACurve(key, der);\n\tder.endSequence();\n\n\tvar Q = utils.ecNormalize(key.part.Q.data, true);\n\tder.writeBuffer(Q, asn1.Ber.BitString);\n}\n\nfunction writePkcs8ECDSAPrivate(key, der) {\n\twriteECDSACurve(key, der);\n\tder.endSequence();\n\n\tder.startSequence(asn1.Ber.OctetString);\n\tder.startSequence();\n\n\tvar version = new Buffer(1);\n\tversion[0] = 1;\n\tder.writeBuffer(version, asn1.Ber.Integer);\n\n\tder.writeBuffer(key.part.d.data, asn1.Ber.OctetString);\n\n\tder.startSequence(0xa1);\n\tvar Q = utils.ecNormalize(key.part.Q.data, true);\n\tder.writeBuffer(Q, asn1.Ber.BitString);\n\tder.endSequence();\n\n\tder.endSequence();\n\tder.endSequence();\n}\n"]}