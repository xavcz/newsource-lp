{"version":3,"sources":["utils.js"],"names":[],"mappings":"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","file":"utils-compiled.js","sourcesContent":["\"use strict\";\n/**\n * @fileOverview\n * A collection of general utility functions..\n */\n\n/*\n * Copyright (c) 2011, 2012, 2014 Ron Garret\n * Copyright (c) 2007, 2013, 2014 Michele Bini\n * Copyright (c) 2014 Mega Limited\n * under the MIT License.\n *\n * Authors: Guy K. Kloss, Michele Bini, Ron Garret\n *\n * You should have received a copy of the license along with this program.\n */\n\nvar core = require('./core');\n\n    /**\n     * @exports jodid25519/utils\n     * A collection of general utility functions..\n     *\n     * @description\n     * A collection of general utility functions..\n     */\n    var ns = {};\n\n    var _HEXCHARS = \"0123456789abcdef\";\n\n    function _hexencode(vector) {\n        var result = [];\n        for (var i = vector.length - 1; i >= 0; i--) {\n            var value = vector[i];\n            result.push(_HEXCHARS.substr((value >>> 12) & 0x0f, 1));\n            result.push(_HEXCHARS.substr((value >>> 8) & 0x0f, 1));\n            result.push(_HEXCHARS.substr((value >>> 4) & 0x0f, 1));\n            result.push(_HEXCHARS.substr(value & 0x0f, 1));\n        }\n        return result.join('');\n    }\n\n    function _hexdecode(vector) {\n        var result = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n        for (var i = vector.length - 1, l = 0; i >= 0; i -= 4) {\n            result[l] = (_HEXCHARS.indexOf(vector.charAt(i)))\n                      | (_HEXCHARS.indexOf(vector.charAt(i - 1)) << 4)\n                      | (_HEXCHARS.indexOf(vector.charAt(i - 2)) << 8)\n                      | (_HEXCHARS.indexOf(vector.charAt(i - 3)) << 12);\n            l++;\n        }\n        return result;\n    }\n\n    var _BASE32CHARS = \"abcdefghijklmnopqrstuvwxyz234567\";\n\n    var _BASE32VALUES = (function () {\n        var result = {};\n        for (var i = 0; i < _BASE32CHARS.length; i++) {\n            result[_BASE32CHARS.charAt(i)] = i;\n        }\n        return result;\n    })();\n\n    function _base32encode(n) {\n        var c;\n        var r = \"\";\n        for (c = 0; c < 255; c += 5) {\n            r = _BASE32CHARS.substr(core.getbit(n, c)\n                                    + (core.getbit(n, c + 1) << 1)\n                                    + (core.getbit(n, c + 2) << 2)\n                                    + (core.getbit(n, c + 3) << 3)\n                                    + (core.getbit(n, c + 4) << 4), 1)\n                                    + r;\n        }\n        return r;\n    }\n\n    function _base32decode(n) {\n        var c = 0;\n        var r = core.ZERO();\n        var l = n.length;\n        for (c = 0; (l > 0) && (c < 255); c += 5) {\n            l--;\n            var v = _BASE32VALUES[n.substr(l, 1)];\n            core.setbit(r, c, v & 1);\n            v >>= 1;\n            core.setbit(r, c + 1, v & 1);\n            v >>= 1;\n            core.setbit(r, c + 2, v & 1);\n            v >>= 1;\n            core.setbit(r, c + 3, v & 1);\n            v >>= 1;\n            core.setbit(r, c + 4, v & 1);\n           }\n        return r;\n    }\n\n    function _map(f, l) {\n        var result = new Array(l.length);\n        for (var i = 0; i < l.length; i++) {\n            result[i] = f(l[i]);\n        }\n        return result;\n    }\n\n    function _chr(n) {\n        return String.fromCharCode(n);\n    }\n\n    function _ord(c) {\n        return c.charCodeAt(0);\n    }\n\n    function _bytes2string(bytes) {\n        return _map(_chr, bytes).join('');\n    }\n\n    function _string2bytes(s) {\n        return _map(_ord, s);\n    }\n\n\n    // Expose some functions to the outside through this name space.\n\n    /**\n     * Encodes an array of unsigned 8-bit integers to a hex string.\n     *\n     * @function\n     * @param vector {array}\n     *     Array containing the byte values.\n     * @returns {string}\n     *     String containing vector in a hexadecimal representation.\n     */\n    ns.hexEncode = _hexencode;\n\n\n    /**\n     * Decodes a hex string to an array of unsigned 8-bit integers.\n     *\n     * @function\n     * @param vector {string}\n     *     String containing vector in a hexadecimal representation.\n     * @returns {array}\n     *     Array containing the byte values.\n     */\n    ns.hexDecode = _hexdecode;\n\n\n    /**\n     * Encodes an array of unsigned 8-bit integers using base32 encoding.\n     *\n     * @function\n     * @param vector {array}\n     *     Array containing the byte values.\n     * @returns {string}\n     *     String containing vector in a hexadecimal representation.\n     */\n    ns.base32encode = _base32encode;\n\n\n    /**\n     * Decodes a base32 encoded string to an array of unsigned 8-bit integers.\n     *\n     * @function\n     * @param vector {string}\n     *     String containing vector in a hexadecimal representation.\n     * @returns {array}\n     *     Array containing the byte values.\n     */\n    ns.base32decode = _base32decode;\n\n\n    /**\n     * Converts an unsigned 8-bit integer array representation to a byte string.\n     *\n     * @function\n     * @param vector {array}\n     *     Array containing the byte values.\n     * @returns {string}\n     *     Byte string representation of vector.\n     */\n    ns.bytes2string = _bytes2string;\n\n\n    /**\n     * Converts a byte string representation to an array of unsigned\n     * 8-bit integers.\n     *\n     * @function\n     * @param vector {array}\n     *     Array containing the byte values.\n     * @returns {string}\n     *     Byte string representation of vector.\n     */\n    ns.string2bytes = _string2bytes;\n\nmodule.exports = ns;\n"]}