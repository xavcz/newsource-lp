{"version":3,"sources":["ec.js"],"names":[],"mappings":"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","file":"ec-compiled.js","sourcesContent":["// Basic Javascript Elliptic Curve implementation\n// Ported loosely from BouncyCastle's Java EC code\n// Only Fp curves implemented for now\n\n// Requires jsbn.js and jsbn2.js\nvar BigInteger = require('jsbn').BigInteger\nvar Barrett = BigInteger.prototype.Barrett\n\n// ----------------\n// ECFieldElementFp\n\n// constructor\nfunction ECFieldElementFp(q,x) {\n    this.x = x;\n    // TODO if(x.compareTo(q) >= 0) error\n    this.q = q;\n}\n\nfunction feFpEquals(other) {\n    if(other == this) return true;\n    return (this.q.equals(other.q) && this.x.equals(other.x));\n}\n\nfunction feFpToBigInteger() {\n    return this.x;\n}\n\nfunction feFpNegate() {\n    return new ECFieldElementFp(this.q, this.x.negate().mod(this.q));\n}\n\nfunction feFpAdd(b) {\n    return new ECFieldElementFp(this.q, this.x.add(b.toBigInteger()).mod(this.q));\n}\n\nfunction feFpSubtract(b) {\n    return new ECFieldElementFp(this.q, this.x.subtract(b.toBigInteger()).mod(this.q));\n}\n\nfunction feFpMultiply(b) {\n    return new ECFieldElementFp(this.q, this.x.multiply(b.toBigInteger()).mod(this.q));\n}\n\nfunction feFpSquare() {\n    return new ECFieldElementFp(this.q, this.x.square().mod(this.q));\n}\n\nfunction feFpDivide(b) {\n    return new ECFieldElementFp(this.q, this.x.multiply(b.toBigInteger().modInverse(this.q)).mod(this.q));\n}\n\nECFieldElementFp.prototype.equals = feFpEquals;\nECFieldElementFp.prototype.toBigInteger = feFpToBigInteger;\nECFieldElementFp.prototype.negate = feFpNegate;\nECFieldElementFp.prototype.add = feFpAdd;\nECFieldElementFp.prototype.subtract = feFpSubtract;\nECFieldElementFp.prototype.multiply = feFpMultiply;\nECFieldElementFp.prototype.square = feFpSquare;\nECFieldElementFp.prototype.divide = feFpDivide;\n\n// ----------------\n// ECPointFp\n\n// constructor\nfunction ECPointFp(curve,x,y,z) {\n    this.curve = curve;\n    this.x = x;\n    this.y = y;\n    // Projective coordinates: either zinv == null or z * zinv == 1\n    // z and zinv are just BigIntegers, not fieldElements\n    if(z == null) {\n      this.z = BigInteger.ONE;\n    }\n    else {\n      this.z = z;\n    }\n    this.zinv = null;\n    //TODO: compression flag\n}\n\nfunction pointFpGetX() {\n    if(this.zinv == null) {\n      this.zinv = this.z.modInverse(this.curve.q);\n    }\n    var r = this.x.toBigInteger().multiply(this.zinv);\n    this.curve.reduce(r);\n    return this.curve.fromBigInteger(r);\n}\n\nfunction pointFpGetY() {\n    if(this.zinv == null) {\n      this.zinv = this.z.modInverse(this.curve.q);\n    }\n    var r = this.y.toBigInteger().multiply(this.zinv);\n    this.curve.reduce(r);\n    return this.curve.fromBigInteger(r);\n}\n\nfunction pointFpEquals(other) {\n    if(other == this) return true;\n    if(this.isInfinity()) return other.isInfinity();\n    if(other.isInfinity()) return this.isInfinity();\n    var u, v;\n    // u = Y2 * Z1 - Y1 * Z2\n    u = other.y.toBigInteger().multiply(this.z).subtract(this.y.toBigInteger().multiply(other.z)).mod(this.curve.q);\n    if(!u.equals(BigInteger.ZERO)) return false;\n    // v = X2 * Z1 - X1 * Z2\n    v = other.x.toBigInteger().multiply(this.z).subtract(this.x.toBigInteger().multiply(other.z)).mod(this.curve.q);\n    return v.equals(BigInteger.ZERO);\n}\n\nfunction pointFpIsInfinity() {\n    if((this.x == null) && (this.y == null)) return true;\n    return this.z.equals(BigInteger.ZERO) && !this.y.toBigInteger().equals(BigInteger.ZERO);\n}\n\nfunction pointFpNegate() {\n    return new ECPointFp(this.curve, this.x, this.y.negate(), this.z);\n}\n\nfunction pointFpAdd(b) {\n    if(this.isInfinity()) return b;\n    if(b.isInfinity()) return this;\n\n    // u = Y2 * Z1 - Y1 * Z2\n    var u = b.y.toBigInteger().multiply(this.z).subtract(this.y.toBigInteger().multiply(b.z)).mod(this.curve.q);\n    // v = X2 * Z1 - X1 * Z2\n    var v = b.x.toBigInteger().multiply(this.z).subtract(this.x.toBigInteger().multiply(b.z)).mod(this.curve.q);\n\n    if(BigInteger.ZERO.equals(v)) {\n        if(BigInteger.ZERO.equals(u)) {\n            return this.twice(); // this == b, so double\n        }\n\treturn this.curve.getInfinity(); // this = -b, so infinity\n    }\n\n    var THREE = new BigInteger(\"3\");\n    var x1 = this.x.toBigInteger();\n    var y1 = this.y.toBigInteger();\n    var x2 = b.x.toBigInteger();\n    var y2 = b.y.toBigInteger();\n\n    var v2 = v.square();\n    var v3 = v2.multiply(v);\n    var x1v2 = x1.multiply(v2);\n    var zu2 = u.square().multiply(this.z);\n\n    // x3 = v * (z2 * (z1 * u^2 - 2 * x1 * v^2) - v^3)\n    var x3 = zu2.subtract(x1v2.shiftLeft(1)).multiply(b.z).subtract(v3).multiply(v).mod(this.curve.q);\n    // y3 = z2 * (3 * x1 * u * v^2 - y1 * v^3 - z1 * u^3) + u * v^3\n    var y3 = x1v2.multiply(THREE).multiply(u).subtract(y1.multiply(v3)).subtract(zu2.multiply(u)).multiply(b.z).add(u.multiply(v3)).mod(this.curve.q);\n    // z3 = v^3 * z1 * z2\n    var z3 = v3.multiply(this.z).multiply(b.z).mod(this.curve.q);\n\n    return new ECPointFp(this.curve, this.curve.fromBigInteger(x3), this.curve.fromBigInteger(y3), z3);\n}\n\nfunction pointFpTwice() {\n    if(this.isInfinity()) return this;\n    if(this.y.toBigInteger().signum() == 0) return this.curve.getInfinity();\n\n    // TODO: optimized handling of constants\n    var THREE = new BigInteger(\"3\");\n    var x1 = this.x.toBigInteger();\n    var y1 = this.y.toBigInteger();\n\n    var y1z1 = y1.multiply(this.z);\n    var y1sqz1 = y1z1.multiply(y1).mod(this.curve.q);\n    var a = this.curve.a.toBigInteger();\n\n    // w = 3 * x1^2 + a * z1^2\n    var w = x1.square().multiply(THREE);\n    if(!BigInteger.ZERO.equals(a)) {\n      w = w.add(this.z.square().multiply(a));\n    }\n    w = w.mod(this.curve.q);\n    //this.curve.reduce(w);\n    // x3 = 2 * y1 * z1 * (w^2 - 8 * x1 * y1^2 * z1)\n    var x3 = w.square().subtract(x1.shiftLeft(3).multiply(y1sqz1)).shiftLeft(1).multiply(y1z1).mod(this.curve.q);\n    // y3 = 4 * y1^2 * z1 * (3 * w * x1 - 2 * y1^2 * z1) - w^3\n    var y3 = w.multiply(THREE).multiply(x1).subtract(y1sqz1.shiftLeft(1)).shiftLeft(2).multiply(y1sqz1).subtract(w.square().multiply(w)).mod(this.curve.q);\n    // z3 = 8 * (y1 * z1)^3\n    var z3 = y1z1.square().multiply(y1z1).shiftLeft(3).mod(this.curve.q);\n\n    return new ECPointFp(this.curve, this.curve.fromBigInteger(x3), this.curve.fromBigInteger(y3), z3);\n}\n\n// Simple NAF (Non-Adjacent Form) multiplication algorithm\n// TODO: modularize the multiplication algorithm\nfunction pointFpMultiply(k) {\n    if(this.isInfinity()) return this;\n    if(k.signum() == 0) return this.curve.getInfinity();\n\n    var e = k;\n    var h = e.multiply(new BigInteger(\"3\"));\n\n    var neg = this.negate();\n    var R = this;\n\n    var i;\n    for(i = h.bitLength() - 2; i > 0; --i) {\n\tR = R.twice();\n\n\tvar hBit = h.testBit(i);\n\tvar eBit = e.testBit(i);\n\n\tif (hBit != eBit) {\n\t    R = R.add(hBit ? this : neg);\n\t}\n    }\n\n    return R;\n}\n\n// Compute this*j + x*k (simultaneous multiplication)\nfunction pointFpMultiplyTwo(j,x,k) {\n  var i;\n  if(j.bitLength() > k.bitLength())\n    i = j.bitLength() - 1;\n  else\n    i = k.bitLength() - 1;\n\n  var R = this.curve.getInfinity();\n  var both = this.add(x);\n  while(i >= 0) {\n    R = R.twice();\n    if(j.testBit(i)) {\n      if(k.testBit(i)) {\n        R = R.add(both);\n      }\n      else {\n        R = R.add(this);\n      }\n    }\n    else {\n      if(k.testBit(i)) {\n        R = R.add(x);\n      }\n    }\n    --i;\n  }\n\n  return R;\n}\n\nECPointFp.prototype.getX = pointFpGetX;\nECPointFp.prototype.getY = pointFpGetY;\nECPointFp.prototype.equals = pointFpEquals;\nECPointFp.prototype.isInfinity = pointFpIsInfinity;\nECPointFp.prototype.negate = pointFpNegate;\nECPointFp.prototype.add = pointFpAdd;\nECPointFp.prototype.twice = pointFpTwice;\nECPointFp.prototype.multiply = pointFpMultiply;\nECPointFp.prototype.multiplyTwo = pointFpMultiplyTwo;\n\n// ----------------\n// ECCurveFp\n\n// constructor\nfunction ECCurveFp(q,a,b) {\n    this.q = q;\n    this.a = this.fromBigInteger(a);\n    this.b = this.fromBigInteger(b);\n    this.infinity = new ECPointFp(this, null, null);\n    this.reducer = new Barrett(this.q);\n}\n\nfunction curveFpGetQ() {\n    return this.q;\n}\n\nfunction curveFpGetA() {\n    return this.a;\n}\n\nfunction curveFpGetB() {\n    return this.b;\n}\n\nfunction curveFpEquals(other) {\n    if(other == this) return true;\n    return(this.q.equals(other.q) && this.a.equals(other.a) && this.b.equals(other.b));\n}\n\nfunction curveFpGetInfinity() {\n    return this.infinity;\n}\n\nfunction curveFpFromBigInteger(x) {\n    return new ECFieldElementFp(this.q, x);\n}\n\nfunction curveReduce(x) {\n    this.reducer.reduce(x);\n}\n\n// for now, work with hex strings because they're easier in JS\nfunction curveFpDecodePointHex(s) {\n    switch(parseInt(s.substr(0,2), 16)) { // first byte\n    case 0:\n\treturn this.infinity;\n    case 2:\n    case 3:\n\t// point compression not supported yet\n\treturn null;\n    case 4:\n    case 6:\n    case 7:\n\tvar len = (s.length - 2) / 2;\n\tvar xHex = s.substr(2, len);\n\tvar yHex = s.substr(len+2, len);\n\n\treturn new ECPointFp(this,\n\t\t\t     this.fromBigInteger(new BigInteger(xHex, 16)),\n\t\t\t     this.fromBigInteger(new BigInteger(yHex, 16)));\n\n    default: // unsupported\n\treturn null;\n    }\n}\n\nfunction curveFpEncodePointHex(p) {\n\tif (p.isInfinity()) return \"00\";\n\tvar xHex = p.getX().toBigInteger().toString(16);\n\tvar yHex = p.getY().toBigInteger().toString(16);\n\tvar oLen = this.getQ().toString(16).length;\n\tif ((oLen % 2) != 0) oLen++;\n\twhile (xHex.length < oLen) {\n\t\txHex = \"0\" + xHex;\n\t}\n\twhile (yHex.length < oLen) {\n\t\tyHex = \"0\" + yHex;\n\t}\n\treturn \"04\" + xHex + yHex;\n}\n\nECCurveFp.prototype.getQ = curveFpGetQ;\nECCurveFp.prototype.getA = curveFpGetA;\nECCurveFp.prototype.getB = curveFpGetB;\nECCurveFp.prototype.equals = curveFpEquals;\nECCurveFp.prototype.getInfinity = curveFpGetInfinity;\nECCurveFp.prototype.fromBigInteger = curveFpFromBigInteger;\nECCurveFp.prototype.reduce = curveReduce;\n//ECCurveFp.prototype.decodePointHex = curveFpDecodePointHex;\nECCurveFp.prototype.encodePointHex = curveFpEncodePointHex;\n\n// from: https://github.com/kaielvin/jsbn-ec-point-compression\nECCurveFp.prototype.decodePointHex = function(s)\n{\n\tvar yIsEven;\n    switch(parseInt(s.substr(0,2), 16)) { // first byte\n    case 0:\n\treturn this.infinity;\n    case 2:\n\tyIsEven = false;\n    case 3:\n\tif(yIsEven == undefined) yIsEven = true;\n\tvar len = s.length - 2;\n\tvar xHex = s.substr(2, len);\n\tvar x = this.fromBigInteger(new BigInteger(xHex,16));\n\tvar alpha = x.multiply(x.square().add(this.getA())).add(this.getB());\n\tvar beta = alpha.sqrt();\n\n    if (beta == null) throw \"Invalid point compression\";\n\n    var betaValue = beta.toBigInteger();\n    if (betaValue.testBit(0) != yIsEven)\n    {\n        // Use the other root\n        beta = this.fromBigInteger(this.getQ().subtract(betaValue));\n    }\n    return new ECPointFp(this,x,beta);\n    case 4:\n    case 6:\n    case 7:\n\tvar len = (s.length - 2) / 2;\n\tvar xHex = s.substr(2, len);\n\tvar yHex = s.substr(len+2, len);\n\n\treturn new ECPointFp(this,\n\t\t\t     this.fromBigInteger(new BigInteger(xHex, 16)),\n\t\t\t     this.fromBigInteger(new BigInteger(yHex, 16)));\n\n    default: // unsupported\n\treturn null;\n    }\n}\nECCurveFp.prototype.encodeCompressedPointHex = function(p)\n{\n\tif (p.isInfinity()) return \"00\";\n\tvar xHex = p.getX().toBigInteger().toString(16);\n\tvar oLen = this.getQ().toString(16).length;\n\tif ((oLen % 2) != 0) oLen++;\n\twhile (xHex.length < oLen)\n\t\txHex = \"0\" + xHex;\n\tvar yPrefix;\n\tif(p.getY().toBigInteger().isEven()) yPrefix = \"02\";\n\telse                                 yPrefix = \"03\";\n\n\treturn yPrefix + xHex;\n}\n\n\nECFieldElementFp.prototype.getR = function()\n{\n\tif(this.r != undefined) return this.r;\n\n    this.r = null;\n    var bitLength = this.q.bitLength();\n    if (bitLength > 128)\n    {\n        var firstWord = this.q.shiftRight(bitLength - 64);\n        if (firstWord.intValue() == -1)\n        {\n            this.r = BigInteger.ONE.shiftLeft(bitLength).subtract(this.q);\n        }\n    }\n    return this.r;\n}\nECFieldElementFp.prototype.modMult = function(x1,x2)\n{\n    return this.modReduce(x1.multiply(x2));\n}\nECFieldElementFp.prototype.modReduce = function(x)\n{\n    if (this.getR() != null)\n    {\n        var qLen = q.bitLength();\n        while (x.bitLength() > (qLen + 1))\n        {\n            var u = x.shiftRight(qLen);\n            var v = x.subtract(u.shiftLeft(qLen));\n            if (!this.getR().equals(BigInteger.ONE))\n            {\n                u = u.multiply(this.getR());\n            }\n            x = u.add(v); \n        }\n        while (x.compareTo(q) >= 0)\n        {\n            x = x.subtract(q);\n        }\n    }\n    else\n    {\n        x = x.mod(q);\n    }\n    return x;\n}\nECFieldElementFp.prototype.sqrt = function()\n{\n    if (!this.q.testBit(0)) throw \"unsupported\";\n\n    // p mod 4 == 3\n    if (this.q.testBit(1))\n    {\n    \tvar z = new ECFieldElementFp(this.q,this.x.modPow(this.q.shiftRight(2).add(BigInteger.ONE),this.q));\n    \treturn z.square().equals(this) ? z : null;\n    }\n\n    // p mod 4 == 1\n    var qMinusOne = this.q.subtract(BigInteger.ONE);\n\n    var legendreExponent = qMinusOne.shiftRight(1);\n    if (!(this.x.modPow(legendreExponent, this.q).equals(BigInteger.ONE)))\n    {\n        return null;\n    }\n\n    var u = qMinusOne.shiftRight(2);\n    var k = u.shiftLeft(1).add(BigInteger.ONE);\n\n    var Q = this.x;\n    var fourQ = modDouble(modDouble(Q));\n\n    var U, V;\n    do\n    {\n        var P;\n        do\n        {\n            P = new BigInteger(this.q.bitLength(), new SecureRandom());\n        }\n        while (P.compareTo(this.q) >= 0\n            || !(P.multiply(P).subtract(fourQ).modPow(legendreExponent, this.q).equals(qMinusOne)));\n\n        var result = this.lucasSequence(P, Q, k);\n        U = result[0];\n        V = result[1];\n\n        if (this.modMult(V, V).equals(fourQ))\n        {\n            // Integer division by 2, mod q\n            if (V.testBit(0))\n            {\n                V = V.add(q);\n            }\n\n            V = V.shiftRight(1);\n\n            return new ECFieldElementFp(q,V);\n        }\n    }\n    while (U.equals(BigInteger.ONE) || U.equals(qMinusOne));\n\n    return null;\n}\nECFieldElementFp.prototype.lucasSequence = function(P,Q,k)\n{\n    var n = k.bitLength();\n    var s = k.getLowestSetBit();\n\n    var Uh = BigInteger.ONE;\n    var Vl = BigInteger.TWO;\n    var Vh = P;\n    var Ql = BigInteger.ONE;\n    var Qh = BigInteger.ONE;\n\n    for (var j = n - 1; j >= s + 1; --j)\n    {\n        Ql = this.modMult(Ql, Qh);\n\n        if (k.testBit(j))\n        {\n            Qh = this.modMult(Ql, Q);\n            Uh = this.modMult(Uh, Vh);\n            Vl = this.modReduce(Vh.multiply(Vl).subtract(P.multiply(Ql)));\n            Vh = this.modReduce(Vh.multiply(Vh).subtract(Qh.shiftLeft(1)));\n        }\n        else\n        {\n            Qh = Ql;\n            Uh = this.modReduce(Uh.multiply(Vl).subtract(Ql));\n            Vh = this.modReduce(Vh.multiply(Vl).subtract(P.multiply(Ql)));\n            Vl = this.modReduce(Vl.multiply(Vl).subtract(Ql.shiftLeft(1)));\n        }\n    }\n\n    Ql = this.modMult(Ql, Qh);\n    Qh = this.modMult(Ql, Q);\n    Uh = this.modReduce(Uh.multiply(Vl).subtract(Ql));\n    Vl = this.modReduce(Vh.multiply(Vl).subtract(P.multiply(Ql)));\n    Ql = this.modMult(Ql, Qh);\n\n    for (var j = 1; j <= s; ++j)\n    {\n        Uh = this.modMult(Uh, Vl);\n        Vl = this.modReduce(Vl.multiply(Vl).subtract(Ql.shiftLeft(1)));\n        Ql = this.modMult(Ql, Ql);\n    }\n\n    return [ Uh, Vl ];\n}\n\nvar exports = {\n  ECCurveFp: ECCurveFp,\n  ECPointFp: ECPointFp,\n  ECFieldElementFp: ECFieldElementFp\n}\n\nmodule.exports = exports\n"]}