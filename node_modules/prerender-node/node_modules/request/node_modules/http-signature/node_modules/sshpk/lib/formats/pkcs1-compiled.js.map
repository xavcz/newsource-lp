{"version":3,"sources":["pkcs1.js"],"names":[],"mappings":"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","file":"pkcs1-compiled.js","sourcesContent":["// Copyright 2015 Joyent, Inc.\n\nmodule.exports = {\n\tread: read,\n\treadPkcs1: readPkcs1,\n\twrite: write,\n\twritePkcs1: writePkcs1\n};\n\nvar assert = require('assert-plus');\nvar asn1 = require('asn1');\nvar algs = require('../algs');\nvar utils = require('../utils');\n\nvar Key = require('../key');\nvar PrivateKey = require('../private-key');\nvar pem = require('./pem');\n\nvar pkcs8 = require('./pkcs8');\nvar readECDSACurve = pkcs8.readECDSACurve;\n\nfunction read(buf) {\n\treturn (pem.read(buf, 'pkcs1'));\n}\n\nfunction write(key) {\n\treturn (pem.write(key, 'pkcs1'));\n}\n\n/* Helper to read in a single mpint */\nfunction readMPInt(der, nm) {\n\tassert.strictEqual(der.peek(), asn1.Ber.Integer,\n\t    nm + ' is not an Integer');\n\treturn (utils.mpNormalize(der.readString(asn1.Ber.Integer, true)));\n}\n\nfunction readPkcs1(alg, type, der) {\n\tswitch (alg) {\n\tcase 'RSA':\n\t\tif (type === 'public')\n\t\t\treturn (readPkcs1RSAPublic(der));\n\t\telse if (type === 'private')\n\t\t\treturn (readPkcs1RSAPrivate(der));\n\t\tthrow (new Error('Unknown key type: ' + type));\n\tcase 'DSA':\n\t\tif (type === 'public')\n\t\t\treturn (readPkcs1DSAPublic(der));\n\t\telse if (type === 'private')\n\t\t\treturn (readPkcs1DSAPrivate(der));\n\t\tthrow (new Error('Unknown key type: ' + type));\n\tcase 'EC':\n\tcase 'ECDSA':\n\t\tif (type === 'private')\n\t\t\treturn (readPkcs1ECDSAPrivate(der));\n\t\telse if (type === 'public')\n\t\t\treturn (readPkcs1ECDSAPublic(der));\n\t\tthrow (new Error('Unknown key type: ' + type));\n\tdefault:\n\t\tthrow (new Error('Unknown key algo: ' + alg));\n\t}\n}\n\nfunction readPkcs1RSAPublic(der) {\n\t// modulus and exponent\n\tvar n = readMPInt(der, 'modulus');\n\tvar e = readMPInt(der, 'exponent');\n\n\t// now, make the key\n\tvar key = {\n\t\ttype: 'rsa',\n\t\tparts: [\n\t\t\t{ name: 'e', data: e },\n\t\t\t{ name: 'n', data: n }\n\t\t]\n\t};\n\n\treturn (new Key(key));\n}\n\nfunction readPkcs1RSAPrivate(der) {\n\tvar version = readMPInt(der, 'version');\n\tassert.strictEqual(version[0], 0);\n\n\t// modulus then public exponent\n\tvar n = readMPInt(der, 'modulus');\n\tvar e = readMPInt(der, 'public exponent');\n\tvar d = readMPInt(der, 'private exponent');\n\tvar p = readMPInt(der, 'prime1');\n\tvar q = readMPInt(der, 'prime2');\n\tvar dmodp = readMPInt(der, 'exponent1');\n\tvar dmodq = readMPInt(der, 'exponent2');\n\tvar iqmp = readMPInt(der, 'iqmp');\n\n\t// now, make the key\n\tvar key = {\n\t\ttype: 'rsa',\n\t\tparts: [\n\t\t\t{ name: 'n', data: n },\n\t\t\t{ name: 'e', data: e },\n\t\t\t{ name: 'd', data: d },\n\t\t\t{ name: 'iqmp', data: iqmp },\n\t\t\t{ name: 'p', data: p },\n\t\t\t{ name: 'q', data: q },\n\t\t\t{ name: 'dmodp', data: dmodp },\n\t\t\t{ name: 'dmodq', data: dmodq }\n\t\t]\n\t};\n\n\treturn (new PrivateKey(key));\n}\n\nfunction readPkcs1DSAPrivate(der) {\n\tvar version = readMPInt(der, 'version');\n\tassert.strictEqual(version.readUInt8(0), 0);\n\n\tvar p = readMPInt(der, 'p');\n\tvar q = readMPInt(der, 'q');\n\tvar g = readMPInt(der, 'g');\n\tvar y = readMPInt(der, 'y');\n\tvar x = readMPInt(der, 'x');\n\n\t// now, make the key\n\tvar key = {\n\t\ttype: 'dsa',\n\t\tparts: [\n\t\t\t{ name: 'p', data: p },\n\t\t\t{ name: 'q', data: q },\n\t\t\t{ name: 'g', data: g },\n\t\t\t{ name: 'y', data: y },\n\t\t\t{ name: 'x', data: x }\n\t\t]\n\t};\n\n\treturn (new PrivateKey(key));\n}\n\nfunction readPkcs1DSAPublic(der) {\n\tvar y = readMPInt(der, 'y');\n\tvar p = readMPInt(der, 'p');\n\tvar q = readMPInt(der, 'q');\n\tvar g = readMPInt(der, 'g');\n\n\tvar key = {\n\t\ttype: 'dsa',\n\t\tparts: [\n\t\t\t{ name: 'y', data: y },\n\t\t\t{ name: 'p', data: p },\n\t\t\t{ name: 'q', data: q },\n\t\t\t{ name: 'g', data: g }\n\t\t]\n\t};\n\n\treturn (new Key(key));\n}\n\nfunction readPkcs1ECDSAPublic(der) {\n\tder.readSequence();\n\n\tvar oid = der.readOID();\n\tassert.strictEqual(oid, '1.2.840.10045.2.1', 'must be ecPublicKey');\n\n\tvar curveOid = der.readOID();\n\n\tvar curve;\n\tvar curves = Object.keys(algs.curves);\n\tfor (var j = 0; j < curves.length; ++j) {\n\t\tvar c = curves[j];\n\t\tvar cd = algs.curves[c];\n\t\tif (cd.pkcs8oid === curveOid) {\n\t\t\tcurve = c;\n\t\t\tbreak;\n\t\t}\n\t}\n\tassert.string(curve, 'a known ECDSA named curve');\n\n\tvar Q = der.readString(asn1.Ber.BitString, true);\n\tQ = utils.ecNormalize(Q);\n\n\tvar key = {\n\t\ttype: 'ecdsa',\n\t\tparts: [\n\t\t\t{ name: 'curve', data: new Buffer(curve) },\n\t\t\t{ name: 'Q', data: Q }\n\t\t]\n\t};\n\n\treturn (new Key(key));\n}\n\nfunction readPkcs1ECDSAPrivate(der) {\n\tvar version = readMPInt(der, 'version');\n\tassert.strictEqual(version.readUInt8(0), 1);\n\n\t// private key\n\tvar d = der.readString(asn1.Ber.OctetString, true);\n\n\tder.readSequence(0xa0);\n\tvar curve = readECDSACurve(der);\n\tassert.string(curve, 'a known elliptic curve');\n\n\tder.readSequence(0xa1);\n\tvar Q = der.readString(asn1.Ber.BitString, true);\n\tQ = utils.ecNormalize(Q);\n\n\tvar key = {\n\t\ttype: 'ecdsa',\n\t\tparts: [\n\t\t\t{ name: 'curve', data: new Buffer(curve) },\n\t\t\t{ name: 'Q', data: Q },\n\t\t\t{ name: 'd', data: d }\n\t\t]\n\t};\n\n\treturn (new PrivateKey(key));\n}\n\nfunction writePkcs1(der, key) {\n\tder.startSequence();\n\n\tswitch (key.type) {\n\tcase 'rsa':\n\t\tif (PrivateKey.isPrivateKey(key))\n\t\t\twritePkcs1RSAPrivate(der, key);\n\t\telse\n\t\t\twritePkcs1RSAPublic(der, key);\n\t\tbreak;\n\tcase 'dsa':\n\t\tif (PrivateKey.isPrivateKey(key))\n\t\t\twritePkcs1DSAPrivate(der, key);\n\t\telse\n\t\t\twritePkcs1DSAPublic(der, key);\n\t\tbreak;\n\tcase 'ecdsa':\n\t\tif (PrivateKey.isPrivateKey(key))\n\t\t\twritePkcs1ECDSAPrivate(der, key);\n\t\telse\n\t\t\twritePkcs1ECDSAPublic(der, key);\n\t\tbreak;\n\tdefault:\n\t\tthrow (new Error('Unknown key algo: ' + key.type));\n\t}\n\n\tder.endSequence();\n}\n\nfunction writePkcs1RSAPublic(der, key) {\n\tder.writeBuffer(key.part.n.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.e.data, asn1.Ber.Integer);\n}\n\nfunction writePkcs1RSAPrivate(der, key) {\n\tvar ver = new Buffer(1);\n\tver[0] = 0;\n\tder.writeBuffer(ver, asn1.Ber.Integer);\n\n\tder.writeBuffer(key.part.n.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.e.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.d.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.p.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.q.data, asn1.Ber.Integer);\n\tif (!key.part.dmodp || !key.part.dmodq)\n\t\tutils.addRSAMissing(key);\n\tder.writeBuffer(key.part.dmodp.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.dmodq.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.iqmp.data, asn1.Ber.Integer);\n}\n\nfunction writePkcs1DSAPrivate(der, key) {\n\tvar ver = new Buffer(1);\n\tver[0] = 0;\n\tder.writeBuffer(ver, asn1.Ber.Integer);\n\n\tder.writeBuffer(key.part.p.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.q.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.g.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.y.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.x.data, asn1.Ber.Integer);\n}\n\nfunction writePkcs1DSAPublic(der, key) {\n\tder.writeBuffer(key.part.y.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.p.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.q.data, asn1.Ber.Integer);\n\tder.writeBuffer(key.part.g.data, asn1.Ber.Integer);\n}\n\nfunction writePkcs1ECDSAPublic(der, key) {\n\tder.startSequence();\n\n\tder.writeOID('1.2.840.10045.2.1'); /* ecPublicKey */\n\tvar curve = key.part.curve.data.toString();\n\tvar curveOid = algs.curves[curve].pkcs8oid;\n\tassert.string(curveOid, 'a known ECDSA named curve');\n\tder.writeOID(curveOid);\n\n\tder.endSequence();\n\n\tvar Q = utils.ecNormalize(key.part.Q.data, true);\n\tder.writeBuffer(Q, asn1.Ber.BitString);\n}\n\nfunction writePkcs1ECDSAPrivate(der, key) {\n\tvar ver = new Buffer(1);\n\tver[0] = 1;\n\tder.writeBuffer(ver, asn1.Ber.Integer);\n\n\tder.writeBuffer(key.part.d.data, asn1.Ber.OctetString);\n\n\tder.startSequence(0xa0);\n\tvar curve = key.part.curve.data.toString();\n\tvar curveOid = algs.curves[curve].pkcs8oid;\n\tassert.string(curveOid, 'a known ECDSA named curve');\n\tder.writeOID(curveOid);\n\tder.endSequence();\n\n\tder.startSequence(0xa1);\n\tvar Q = utils.ecNormalize(key.part.Q.data, true);\n\tder.writeBuffer(Q, asn1.Ber.BitString);\n\tder.endSequence();\n}\n"]}