{"version":3,"sources":["dh.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;;;;;;;;AAeb,IAAI,IAAI,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AAC7B,IAAI,KAAK,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;AAC/B,IAAI,QAAQ,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC;;;;;;;;;AAUjC,IAAI,EAAE,GAAG,EAAE,CAAC;;AAGZ,SAAS,SAAS,CAAC,MAAM,EAAE;AACvB,QAAI,CAAC,GAAG,IAAI,WAAW,CAAC,MAAM,CAAC,CAAC;AAChC,WAAQ,IAAI,MAAM,CAAC,IAAI,UAAU,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAE;CACjD;;AAED,SAAS,WAAW,CAAC,MAAM,EAAE;AACzB,QAAI,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;AACzB,YAAI,CAAC,GAAG,IAAI,UAAU,CAAC,MAAM,CAAC,CAAC;AAC/B,eAAQ,IAAI,WAAW,CAAC,CAAC,CAAC,MAAM,CAAC,CAAE;KACtC;;AAED,QAAI,MAAM,GAAG,IAAI,KAAK,CAAC,EAAE,CAAC,CAAC;AAC3B,SAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;AAC9C,cAAM,CAAC,CAAC,CAAC,GAAG,AAAC,MAAM,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAI,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;AACnE,SAAC,EAAE,CAAC;KACP;AACD,WAAO,MAAM,CAAC;CACjB;;;;;;;;;;;;;;;;;;;;;;;AAwBD,EAAE,CAAC,UAAU,GAAG,UAAS,gBAAgB,EAAE,eAAe,EAAE;AACxD,QAAI,eAAe,EAAE;AACjB,eAAO,SAAS,CAAC,QAAQ,CAAC,UAAU,CAAC,WAAW,CAAC,gBAAgB,CAAC,EAC7B,WAAW,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;KACvE,MAAM;AACH,eAAO,SAAS,CAAC,QAAQ,CAAC,UAAU,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC;KACxE;CACJ,CAAC;;;;;;;;;;;;;;;;AAgBF,EAAE,CAAC,SAAS,GAAG,UAAS,UAAU,EAAE;AAChC,WAAO,SAAS,CAAC,QAAQ,CAAC,UAAU,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;CAClE,CAAC;;;;;;;;;AAUF,EAAE,CAAC,WAAW,GAAG,YAAW;AACxB,WAAO,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;CACjC,CAAC;;AAEN,MAAM,CAAC,OAAO,GAAG,EAAE,CAAC","file":"dh-compiled.js","sourcesContent":["\"use strict\";\n/**\n * @fileOverview\n * EC Diffie-Hellman operations on Curve25519.\n */\n\n/*\n * Copyright (c) 2014 Mega Limited\n * under the MIT License.\n *\n * Authors: Guy K. Kloss\n *\n * You should have received a copy of the license along with this program.\n */\n\nvar core = require('./core');\nvar utils = require('./utils');\nvar curve255 = require('./curve255');\n\n\n    /**\n     * @exports jodid25519/dh\n     * EC Diffie-Hellman operations on Curve25519.\n     *\n     * @description\n     * EC Diffie-Hellman operations on Curve25519.\n     */\n    var ns = {};\n\n\n    function _toString(vector) {\n        var u = new Uint16Array(vector);\n        return (new Buffer(new Uint8Array(u.buffer)));\n    }\n\n    function _fromString(vector) {\n        if (Buffer.isBuffer(vector)) {\n            var u = new Uint8Array(vector);\n            return (new Uint16Array(u.buffer));\n        }\n\n        var result = new Array(16);\n        for (var i = 0, l = 0; i < vector.length; i += 2) {\n            result[l] = (vector.charCodeAt(i + 1) << 8) | vector.charCodeAt(i);\n            l++;\n        }\n        return result;\n    }\n\n\n    /**\n     * Computes a key through scalar multiplication of a point on the curve 25519.\n     *\n     * This function is used for the DH key-exchange protocol. It computes a\n     * key based on a secret key with a public component (opponent's public key\n     * or curve base point if not given) by using scalar multiplication.\n     *\n     * Before multiplication, some bit operations are applied to the\n     * private key to ensure it is a valid Curve25519 secret key.\n     * It is the user's responsibility to make sure that the private\n     * key is a uniformly random, secret value.\n     *\n     * @function\n     * @param privateComponent {string}\n     *     Private point as byte string on the curve.\n     * @param publicComponent {string}\n     *     Public point as byte string on the curve. If not given, the curve's\n     *     base point is used.\n     * @returns {string}\n     *     Key point as byte string resulting from scalar product.\n     */\n    ns.computeKey = function(privateComponent, publicComponent) {\n        if (publicComponent) {\n            return _toString(curve255.curve25519(_fromString(privateComponent),\n                                                 _fromString(publicComponent)));\n        } else {\n            return _toString(curve255.curve25519(_fromString(privateComponent)));\n        }\n    };\n\n    /**\n     * Computes the public key to a private key on the curve 25519.\n     *\n     * Before multiplication, some bit operations are applied to the\n     * private key to ensure it is a valid Curve25519 secret key.\n     * It is the user's responsibility to make sure that the private\n     * key is a uniformly random, secret value.\n     *\n     * @function\n     * @param privateKey {string}\n     *     Private point as byte string on the curve.\n     * @returns {string}\n     *     Public key point as byte string resulting from scalar product.\n     */\n    ns.publicKey = function(privateKey) {\n        return _toString(curve255.curve25519(_fromString(privateKey)));\n    };\n\n\n    /**\n     * Generates a new random private key of 32 bytes length (256 bit).\n     *\n     * @function\n     * @returns {string}\n     *     Byte string containing a new random private key seed.\n     */\n    ns.generateKey = function() {\n        return core.generateKey(true);\n    };\n\nmodule.exports = ns;\n"]}