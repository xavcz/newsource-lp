{"version":3,"sources":["dashdash.js"],"names":[],"mappings":";;;;;;;;AAMA,IAAI,MAAM,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC;AACpC,IAAI,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC;AACpC,IAAI,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;AACvB,IAAI,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;;AAG3B,IAAI,KAAK,GAAG,IAAI,CAAC;AACjB,IAAI,KAAK,EAAE;AACP,QAAI,KAAK,GAAG,OAAO,CAAC,IAAI,CAAC;CAC5B,MAAM;AACH,QAAI,KAAK,GAAG,SAAR,KAAK,GAAe,EAAE,CAAC;CAC9B;;;;;AAOD,SAAS,cAAc,CAAC,CAAC,EAAE,CAAC,EAAE;AAC1B,WAAO,CAAC,CAAC,OAAO,CAAC,kBAAkB,EAAE,UAAU,KAAK,EAAE,GAAG,EAAE;AACvD,eAAO,CAAC,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;KACjD,CAAC,CAAC;CACN;;;;;AAKD,SAAS,WAAW,CAAC,GAAG,EAAE;AACtB,QAAI,CAAC,GAAG,EAAE;AACN,eAAQ,GAAG,CAAE;KAChB;AACD,QAAI,IAAI,GAAG,EAAE,CAAC;AACd,UAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE;AAClC,YAAI,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;KACpB,CAAC,CAAC;AACH,WAAQ,IAAI,CAAE;CACjB;;AAGD,SAAS,KAAK,CAAC,CAAC,EAAE;AACd,QAAI,CAAC,GAAG,EAAE,CAAC;AACX,SAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;AACxB,SAAC,IAAI,GAAG,CAAC;KACZ;AACD,WAAO,CAAC,CAAC;CACZ;;AAGD,SAAS,UAAU,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,EAAE;AACnC,QAAI,GAAG,KAAK,IAAI,IAAI,GAAG,KAAK,SAAS,EACjC,OAAO,KAAK,CAAC,MAAM,CAAC,CAAC,KACpB,IAAI,OAAQ,GAAG,AAAC,KAAK,QAAQ,EAC9B,OAAO,KAAK,CAAC,GAAG,CAAC,CAAC,KACjB,IAAI,OAAQ,GAAG,AAAC,KAAK,QAAQ,EAC9B,OAAO,GAAG,CAAC,KAEX,MAAM,CAAC,IAAI,CAAC,WAAW,GAAG,IAAI,GAAG,6BAA6B,GAAG,GAAG,CAAC,CAAC;CAC7E;;;;;;;AAQD,SAAS,QAAQ,CAAC,CAAC,EAAE,KAAK,EAAE;AACxB,QAAI,KAAK,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;AAClC,QAAI,KAAK,GAAG,EAAE,CAAC;AACf,QAAI,IAAI,GAAG,EAAE,CAAC;AACd,SAAK,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE;AACvB,YAAI,SAAS,GAAG,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,MAAM,CAAC;AACvC,YAAI,IAAI,CAAC,MAAM,GAAG,CAAC,EACf,SAAS,IAAI,CAAC,CAAC;AACnB,YAAI,SAAS,GAAG,KAAK,EAAE;AACnB,iBAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACjB,gBAAI,GAAG,EAAE,CAAC;SACb;AACD,YAAI,IAAI,CAAC,MAAM,GAAG,CAAC,EACf,IAAI,IAAI,GAAG,CAAC;AAChB,YAAI,IAAI,CAAC,CAAC;KACb,CAAC,CAAC;AACH,SAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACjB,WAAO,KAAK,CAAC;CAChB;;;;;;;;;;;AAYD,SAAS,iBAAiB,CAAC,IAAI,EAAE;AAC7B,WAAO,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;CAClC;;;;AAMD,SAAS,SAAS,CAAC,MAAM,EAAE,MAAM,EAAE,GAAG,EAAE;AACpC,WAAO,OAAO,CAAC,GAAG,CAAC,CAAC;CACvB;;AAED,SAAS,WAAW,CAAC,MAAM,EAAE,MAAM,EAAE,GAAG,EAAE;AACtC,UAAM,CAAC,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;AAC1B,WAAO,GAAG,CAAC;CACd;;AAED,SAAS,WAAW,CAAC,MAAM,EAAE,MAAM,EAAE,GAAG,EAAE;AACtC,UAAM,CAAC,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;AAC1B,QAAI,GAAG,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;AACtB,QAAI,KAAK,CAAC,GAAG,CAAC,EAAE;AACZ,cAAM,IAAI,KAAK,CAAC,MAAM,CAAC,oCAAoC,EACvD,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC;KACrB;AACD,WAAO,GAAG,CAAC;CACd;;AAED,SAAS,YAAY,CAAC,MAAM,EAAE,MAAM,EAAE,GAAG,EAAE;AACvC,UAAM,CAAC,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;AAC1B,QAAI,GAAG,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;AACtB,QAAI,CAAC,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,KAAK,CAAC,GAAG,CAAC,EAAE;AACtC,cAAM,IAAI,KAAK,CAAC,MAAM,CAAC,sCAAsC,EACzD,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC;KACrB;AACD,WAAO,GAAG,CAAC;CACd;;AAED,SAAS,oBAAoB,CAAC,MAAM,EAAE,MAAM,EAAE,GAAG,EAAE;AAC/C,UAAM,CAAC,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;AAC1B,QAAI,GAAG,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;AACtB,QAAI,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,KAAK,CAAC,GAAG,CAAC,IAAI,GAAG,KAAK,CAAC,EAAE;AAClD,cAAM,IAAI,KAAK,CAAC,MAAM,CAAC,8CAA8C,EACjE,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC;KACrB;AACD,WAAO,GAAG,CAAC;CACd;;;;;;;;;;;;AAYD,SAAS,SAAS,CAAC,MAAM,EAAE,MAAM,EAAE,GAAG,EAAE;AACpC,UAAM,CAAC,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;AAC1B,QAAI,IAAI,CAAC;AACT,QAAI,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;;AAEnB,YAAI,GAAG,IAAI,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,CAAC;;KAEvC,MAAM,IAAI,qDAAqD,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;;AAExE,gBAAI,GAAG,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC;SACxB,MAAM;AACH,kBAAM,IAAI,KAAK,CAAC,MAAM,CAAC,+CAA+C,EAClE,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC;SACrB;AACD,QAAI,IAAI,CAAC,QAAQ,EAAE,KAAK,cAAc,EAAE;AACpC,cAAM,IAAI,KAAK,CAAC,MAAM,CAAC,uCAAuC,EAC1D,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC;KACrB;AACD,WAAO,IAAI,CAAC;CACf;;AAED,IAAI,WAAW,GAAG;AACd,QAAI,EAAE;AACF,gBAAQ,EAAE,KAAK;AACf,gBAAQ,EAAE,SAAS;KACtB;AACD,UAAM,EAAE;AACJ,gBAAQ,EAAE,IAAI;AACd,eAAO,EAAE,KAAK;AACd,gBAAQ,EAAE,WAAW;KACxB;AACD,UAAM,EAAE;AACJ,gBAAQ,EAAE,IAAI;AACd,eAAO,EAAE,KAAK;AACd,gBAAQ,EAAE,WAAW;KACxB;AACD,WAAO,EAAE;AACL,gBAAQ,EAAE,IAAI;AACd,eAAO,EAAE,KAAK;AACd,gBAAQ,EAAE,YAAY;KACzB;AACD,mBAAe,EAAE;AACb,gBAAQ,EAAE,IAAI;AACd,eAAO,EAAE,KAAK;AACd,gBAAQ,EAAE,oBAAoB;KACjC;AACD,QAAI,EAAE;AACF,gBAAQ,EAAE,IAAI;AACd,eAAO,EAAE,MAAM;AACf,gBAAQ,EAAE,SAAS;KACtB;AACD,eAAW,EAAE;AACT,gBAAQ,EAAE,KAAK;AACf,aAAK,EAAE,IAAI;AACX,gBAAQ,EAAE,SAAS;KACtB;AACD,iBAAa,EAAE;AACX,gBAAQ,EAAE,IAAI;AACd,eAAO,EAAE,KAAK;AACd,aAAK,EAAE,IAAI;AACX,gBAAQ,EAAE,WAAW;KACxB;AACD,iBAAa,EAAE;AACX,gBAAQ,EAAE,IAAI;AACd,eAAO,EAAE,KAAK;AACd,aAAK,EAAE,IAAI;AACX,gBAAQ,EAAE,WAAW;KACxB;AACD,kBAAc,EAAE;AACZ,gBAAQ,EAAE,IAAI;AACd,eAAO,EAAE,KAAK;AACd,aAAK,EAAE,IAAI;AACX,gBAAQ,EAAE,YAAY;KACzB;AACD,0BAAsB,EAAE;AACpB,gBAAQ,EAAE,IAAI;AACd,eAAO,EAAE,KAAK;AACd,aAAK,EAAE,IAAI;AACX,gBAAQ,EAAE,oBAAoB;KACjC;AACD,eAAW,EAAE;AACT,gBAAQ,EAAE,IAAI;AACd,eAAO,EAAE,KAAK;AACd,aAAK,EAAE,IAAI;AACX,gBAAQ,EAAE,SAAS;KACtB;CACJ,CAAC;;;;;;;;;;;;;;;;;;;;AAsBF,SAAS,MAAM,CAAC,MAAM,EAAE;AACpB,UAAM,CAAC,MAAM,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;AAChC,UAAM,CAAC,aAAa,CAAC,MAAM,CAAC,OAAO,EAAE,gBAAgB,CAAC,CAAC;AACvD,UAAM,CAAC,YAAY,CAAC,MAAM,CAAC,YAAY,EAAE,qBAAqB,CAAC,CAAC;AAChE,QAAI,IAAI,GAAG,IAAI,CAAC;;;AAGhB,QAAI,CAAC,YAAY,GAAI,MAAM,CAAC,YAAY,KAAK,SAAS,GAChD,MAAM,CAAC,YAAY,GAAG,IAAI,AAAC,CAAC;;;AAGlC,QAAI,CAAC,YAAY,GAAI,MAAM,CAAC,YAAY,KAAK,SAAS,GAChD,MAAM,CAAC,YAAY,GAAG,KAAK,AAAC,CAAC;;AAEnC,QAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE;AAAE,eAAO,WAAW,CAAC,CAAC,CAAC,CAAC;KAAE,CAAC,CAAC;AAC3E,QAAI,CAAC,cAAc,GAAG,EAAE,CAAC;AACzB,QAAI,CAAC,aAAa,GAAG,EAAE,CAAC;AACxB,SAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AAC1C,YAAI,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;AACxB,YAAI,CAAC,CAAC,KAAK,KAAK,SAAS,IAAI,CAAC,CAAC,KAAK,KAAK,IAAI,EAAE;AAC3C,kBAAM,CAAC,cAAc,CAAC,CAAC,CAAC,KAAK,EACzB,MAAM,CAAC,yBAAyB,EAAE,CAAC,CAAC,CAAC,CAAC;AAC1C,qBAAS;SACZ;AACD,cAAM,CAAC,EAAE,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,EACzB,MAAM,CAAC,4CAA4C,EAC5C,CAAC,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;AAC1B,cAAM,CAAC,cAAc,CAAC,CAAC,CAAC,IAAI,EAAE,MAAM,CAAC,wBAAwB,EAAE,CAAC,CAAC,CAAC,CAAC;AACnE,cAAM,CAAC,qBAAqB,CAAC,CAAC,CAAC,KAAK,EAChC,MAAM,CAAC,yBAAyB,EAAE,CAAC,CAAC,CAAC,CAAC;AAC1C,cAAM,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,KAAK,CAAA,IAAK,EAAE,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,KAAK,CAAA,AAAC,EACjD,MAAM,CAAC,+CAA+C,EAAE,CAAC,CAAC,CAAC,CAAC;AAChE,cAAM,CAAC,cAAc,CAAC,CAAC,CAAC,IAAI,EAAE,MAAM,CAAC,wBAAwB,EAAE,CAAC,CAAC,CAAC,CAAC;AACnE,YAAI,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,EAAE,CAAC;AACtB,YAAI,OAAQ,GAAG,AAAC,KAAK,QAAQ,EAAE;AAC3B,eAAG,GAAG,CAAC,GAAG,CAAC,CAAC;SACf;AACD,cAAM,CAAC,qBAAqB,CAAC,GAAG,EAAE,MAAM,CAAC,uBAAuB,EAAE,CAAC,CAAC,CAAC,CAAC;AACtE,cAAM,CAAC,cAAc,CAAC,CAAC,CAAC,SAAS,EAC7B,MAAM,CAAC,6BAA6B,EAAE,CAAC,CAAC,CAAC,CAAC;AAC9C,cAAM,CAAC,YAAY,CAAC,CAAC,CAAC,QAAQ,EAC1B,MAAM,CAAC,4BAA4B,EAAE,CAAC,CAAC,CAAC,CAAC;AAC7C,cAAM,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,EAAE,MAAM,CAAC,0BAA0B,EAAE,CAAC,CAAC,CAAC,CAAC;;AAErE,YAAI,CAAC,CAAC,IAAI,EAAE;AACR,aAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;SACtB,MAAM;AACH,kBAAM,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EACpB,MAAM,CAAC,kCAAkC,EAAE,CAAC,CAAC,CAAC,CAAC;SACtD;AACD,SAAC,CAAC,GAAG,GAAG,iBAAiB,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;AACtC,SAAC,CAAC,KAAK,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE;AACzB,gBAAI,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,EAAE;AACxB,sBAAM,IAAI,KAAK,CAAC,MAAM,CAClB,+CAA+C,EAC/C,CAAC,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;aACtC;AACD,gBAAI,CAAC,cAAc,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;SAC9B,CAAC,CAAC;AACH,WAAG,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE;AACrB,gBAAI,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,EAAE;AACvB,sBAAM,IAAI,KAAK,CAAC,MAAM,CAClB,8CAA8C,EAC9C,CAAC,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;aACrC;AACD,gBAAI,CAAC,aAAa,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;SAC7B,CAAC,CAAC;KACN;CACJ;;AAED,MAAM,CAAC,SAAS,CAAC,cAAc,GAAG,SAAS,cAAc,CAAC,MAAM,EAAE;AAC9D,WAAO,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC;CAC5C,CAAC;;;;;;;;;;;;;;;;AAgBF,MAAM,CAAC,SAAS,CAAC,KAAK,GAAG,SAAS,KAAK,CAAC,MAAM,EAAE;AAC5C,QAAI,IAAI,GAAG,IAAI,CAAC;;;AAGhB,QAAI,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,EAAE;AAC7B,cAAM,GAAG,EAAC,IAAI,EAAE,SAAS,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,SAAS,CAAC,CAAC,CAAC,EAAC,CAAC;KACtD;;AAED,UAAM,CAAC,cAAc,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;AACxC,QAAI,CAAC,MAAM,EAAE;AACT,cAAM,GAAG,EAAE,CAAC;KACf;AACD,UAAM,CAAC,qBAAqB,CAAC,MAAM,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;;AAEzD,QAAI,IAAI,GAAG,MAAM,CAAC,IAAI,IAAI,OAAO,CAAC,IAAI,CAAC;AACvC,QAAI,KAAK,GAAG,MAAM,CAAC,KAAK,KAAK,SAAS,GAAG,MAAM,CAAC,KAAK,GAAG,CAAC,CAAC;AAC1D,QAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;AAC7B,QAAI,GAAG,GAAG,MAAM,CAAC,GAAG,IAAI,OAAO,CAAC,GAAG,CAAC;AACpC,QAAI,IAAI,GAAG,EAAE,CAAC;AACd,QAAI,MAAM,GAAG,EAAE,CAAC;;AAEhB,aAAS,MAAM,CAAC,MAAM,EAAE,MAAM,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE;AAC5C,YAAI,IAAI,GAAG,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AACpC,YAAI,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,MAAM,EAAE,GAAG,CAAC,CAAC;AACnD,YAAI,IAAI,CAAC,KAAK,EAAE;AACZ,gBAAI,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;AACZ,oBAAI,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC;aAClB;AACD,gBAAI,IAAI,CAAC,YAAY,IAAI,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE;AAC/C,qBAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACvC,wBAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;iBAChC;aACJ,MAAM;AACH,oBAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;aAC7B;SACJ,MAAM;AACH,gBAAI,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC;SACzB;AACD,YAAI,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,SAAS,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;AACtD,cAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KACrB;;;AAGD,QAAI,KAAK,GAAG,EAAE,CAAC;AACf,QAAI,CAAC,GAAG,CAAC,CAAC;AACV,SAAK,EAAE,OAAO,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE;AAC3B,YAAI,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;;;AAGlB,YAAI,GAAG,KAAK,IAAI,EAAE;AACd,aAAC,EAAE,CAAC;AACJ,kBAAM;;;SAGT,MAAM,IAAI,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,IAAI,EAAE;AACjC,oBAAI,IAAI,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;AACxB,oBAAI,GAAG,GAAG,IAAI,CAAC;AACf,oBAAI,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;AAC5B,oBAAI,GAAG,KAAK,CAAC,CAAC,EAAE;AACZ,uBAAG,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;AAC1B,wBAAI,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;iBAC7B;AACD,oBAAI,MAAM,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;AACvC,oBAAI,CAAC,MAAM,EAAE;AACT,wBAAI,CAAC,IAAI,CAAC,YAAY,EAClB,MAAM,IAAI,KAAK,CAAC,MAAM,CAAC,wBAAwB,EAAE,IAAI,CAAC,CAAC,CAAC,KACvD,IAAI,IAAI,CAAC,YAAY,EACtB,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,KAEhB,MAAM,KAAK,CAAC;iBACnB,MAAM;AACH,wBAAI,QAAQ,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;AAC3C,wBAAI,GAAG,KAAK,IAAI,IAAI,CAAC,QAAQ,EAAE;AAC3B,8BAAM,IAAI,KAAK,CAAC,MAAM,CAAC,kCAAkC,GACnD,8BAA8B,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC;qBACrD;AACD,wBAAI,CAAC,QAAQ,EAAE;AACX,8BAAM,CAAC,MAAM,EAAE,IAAI,GAAC,IAAI,EAAE,MAAM,CAAC,GAAG,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC;qBACvD,MAAM,IAAI,GAAG,KAAK,IAAI,EAAE;AACrB,8BAAM,CAAC,MAAM,EAAE,IAAI,GAAC,IAAI,EAAE,MAAM,CAAC,GAAG,EAAE,GAAG,EAAE,MAAM,CAAC,CAAC;qBACtD,MAAM,IAAI,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,MAAM,EAAE;AAC7B,8BAAM,IAAI,KAAK,CAAC,MAAM,CAAC,qCAAqC,GACtD,QAAQ,EAAE,IAAI,CAAC,CAAC,CAAC;qBAC1B,MAAM;AACH,8BAAM,CAAC,MAAM,EAAE,IAAI,GAAC,IAAI,EAAE,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;AAC3D,yBAAC,EAAE,CAAC;qBACP;iBACJ;;;aAGJ,MAAM,IAAI,GAAG,CAAC,CAAC,CAAC,KAAK,GAAG,IAAI,GAAG,CAAC,MAAM,GAAG,CAAC,EAAE;AACzC,wBAAI,CAAC,GAAG,CAAC,CAAC;AACV,wBAAI,QAAQ,GAAG,IAAI,CAAC;AACpB,2BAAO,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE;AACnB,4BAAI,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;AAClB,4BAAI,MAAM,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;AACvC,4BAAI,CAAC,MAAM,EAAE;AACT,oCAAQ,GAAG,KAAK,CAAC;AACjB,gCAAI,IAAI,CAAC,YAAY,EAAE;AACnB,oCAAI,IAAI,CAAC,YAAY,EAAE;AACnB,yCAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAChB,0CAAM;iCACT,MACG,MAAM,KAAK,CAAC;6BACnB,MAAM,IAAI,GAAG,CAAC,MAAM,GAAG,CAAC,EAAE;AACvB,sCAAM,IAAI,KAAK,CAAC,MAAM,CAClB,qCAAqC,EACrC,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC;6BACnB,MAAM;AACH,sCAAM,IAAI,KAAK,CAAC,MAAM,CAAC,uBAAuB,EAAE,IAAI,CAAC,CAAC,CAAC;6BAC1D;yBACJ,MAAM,IAAI,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,EAAE;AACpC,kCAAM;yBACT;AACD,yBAAC,EAAE,CAAC;qBACP;;AAED,qBAAC,GAAG,CAAC,CAAC;AACN,2BAAO,QAAQ,IAAI,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE;AAC/B,4BAAI,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;AAClB,4BAAI,GAAG,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;AAC3B,4BAAI,MAAM,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;AACvC,4BAAI,QAAQ,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;AAC3C,4BAAI,CAAC,QAAQ,EAAE;AACX,kCAAM,CAAC,MAAM,EAAE,GAAG,GAAC,IAAI,EAAE,MAAM,CAAC,GAAG,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC;yBACtD,MAAM,IAAI,GAAG,EAAE;AACZ,kCAAM,CAAC,MAAM,EAAE,GAAG,GAAC,IAAI,EAAE,MAAM,CAAC,GAAG,EAAE,GAAG,EAAE,MAAM,CAAC,CAAC;AAClD,kCAAM;yBACT,MAAM;AACH,gCAAI,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,MAAM,EAAE;AACtB,sCAAM,IAAI,KAAK,CAAC,MAAM,CAAC,0BAA0B,GAC3C,kBAAkB,EAAE,IAAI,CAAC,CAAC,CAAC;6BACpC;AACD,kCAAM,CAAC,MAAM,EAAE,GAAG,GAAC,IAAI,EAAE,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;AAC1D,6BAAC,EAAE,CAAC;AACJ,kCAAM;yBACT;AACD,yBAAC,EAAE,CAAC;qBACP;;;iBAGJ,MAAM,IAAI,IAAI,CAAC,YAAY,EAAE;AAC1B,6BAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;;;qBAGnB,MAAM;AACH,kCAAM,KAAK,CAAC;yBACf;AACD,SAAC,EAAE,CAAC;KACP;AACD,SAAK,GAAG,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;;;AAGpC,UAAM,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,OAAO,CAAC,UAAU,OAAO,EAAE;AACvD,YAAI,GAAG,GAAG,GAAG,CAAC,OAAO,CAAC,CAAC;AACvB,YAAI,GAAG,KAAK,SAAS,EACjB,OAAO;AACX,YAAI,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;AACzC,YAAI,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,SAAS,EAC9B,OAAO;AACX,YAAI,QAAQ,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;AAC3C,YAAI,QAAQ,EAAE;AACV,kBAAM,CAAC,MAAM,EAAE,OAAO,EAAE,MAAM,CAAC,GAAG,EAAE,GAAG,EAAE,KAAK,CAAC,CAAC;SACnD,MAAM,IAAI,GAAG,KAAK,EAAE,EAAE;;;;;AAKnB,kBAAM,CAAC,MAAM,EAAE,OAAO,EAAE,MAAM,CAAC,GAAG,EAAG,GAAG,KAAK,GAAG,EAAG,KAAK,CAAC,CAAC;SAC7D;KACJ,CAAC,CAAC;;;AAGH,QAAI,CAAC,OAAO,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE;AAC9B,YAAI,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,SAAS,EAAE;AAC3B,gBAAI,CAAC,WAAQ,KAAK,SAAS,EAAE;AACzB,oBAAI,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,WAAQ,CAAC;aAC3B,MAAM,IAAI,CAAC,CAAC,IAAI,IAAI,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,WAAQ,KAAK,SAAS,EAAE;AAC5D,oBAAI,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,WAAQ,CAAC;aAC7C;SACJ;KACJ,CAAC,CAAC;;AAEH,QAAI,CAAC,MAAM,GAAG,MAAM,CAAC;AACrB,QAAI,CAAC,KAAK,GAAG,KAAK,CAAC;AACnB,WAAO,IAAI,CAAC;CACf,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCF,MAAM,CAAC,SAAS,CAAC,IAAI,GAAG,SAAS,IAAI,CAAC,MAAM,EAAE;AAC1C,UAAM,GAAG,MAAM,IAAI,EAAE,CAAC;AACtB,UAAM,CAAC,MAAM,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;;AAEhC,QAAI,MAAM,GAAG,UAAU,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,eAAe,CAAC,CAAC;AAC3D,QAAI,aAAa,GAAG,UAAU,CAAC,MAAM,CAAC,aAAa,EAC/C,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,EAAE,sBAAsB,CAAC,CAAC;;AAE3D,UAAM,CAAC,cAAc,CAAC,MAAM,CAAC,QAAQ,EAAE,iBAAiB,CAAC,CAAC;AAC1D,QAAI,QAAQ,GAAG,MAAM,CAAC,QAAQ,IAAI,QAAQ,CAAC;AAC3C,UAAM,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,EAC3C,2BAA2B,CAAC,CAAC;AACjC,UAAM,CAAC,cAAc,CAAC,MAAM,CAAC,MAAM,EAAE,eAAe,CAAC,CAAC;AACtD,UAAM,CAAC,cAAc,CAAC,MAAM,CAAC,UAAU,EAAE,mBAAmB,CAAC,CAAC;AAC9D,UAAM,CAAC,cAAc,CAAC,MAAM,CAAC,UAAU,EAAE,mBAAmB,CAAC,CAAC;AAC9D,UAAM,CAAC,cAAc,CAAC,MAAM,CAAC,OAAO,EAAE,gBAAgB,CAAC,CAAC;AACxD,UAAM,CAAC,YAAY,CAAC,MAAM,CAAC,UAAU,EAAE,mBAAmB,CAAC,CAAC;AAC5D,UAAM,CAAC,YAAY,CAAC,MAAM,CAAC,cAAc,EAAE,uBAAuB,CAAC,CAAC;AACpE,UAAM,CAAC,YAAY,CAAC,MAAM,CAAC,QAAQ,EAAE,iBAAiB,CAAC,CAAC;AACxD,QAAI,MAAM,GAAG,MAAM,CAAC,MAAM,IAAI,EAAE,CAAC;AACjC,QAAI,UAAU,GAAG,MAAM,CAAC,UAAU,IAAI,EAAE,CAAC;AACzC,QAAI,UAAU,GAAG,MAAM,CAAC,UAAU,IAAI,EAAE,CAAC;;AAEzC,QAAI,KAAK,GAAG,EAAE,CAAC;AACf,QAAI,QAAQ,GAAG,CAAC,CAAC;AACjB,QAAI,CAAC,OAAO,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE;AAC9B,YAAI,CAAC,CAAC,MAAM,EAAE;AACV,mBAAO;SACV;AACD,YAAI,CAAC,CAAC,KAAK,KAAK,SAAS,IAAI,CAAC,CAAC,KAAK,KAAK,IAAI,EAAE;;AAE3C,iBAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACjB,mBAAO;SACV;AACD,YAAI,IAAI,GAAG,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;AAC/B,YAAI,GAAG,GAAG,CAAC,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,IAAI,KAAK,CAAC;AAC7C,YAAI,IAAI,GAAG,EAAE,CAAC;AACd,YAAI,KAAK,GAAG,CAAC,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;AAC5B,YAAI,QAAQ,KAAK,QAAQ,EAAE;AACvB,iBAAK,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,EAAE;AACvB,oBAAI,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,MAAM,EACnB,OAAO,CAAC,CAAC,CAAC,KACT,IAAI,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,MAAM,EACxB,OAAO,CAAC,CAAC,KAET,OAAO,CAAC,CAAC;aAChB,CAAC,CAAA;SACL;AACD,aAAK,CAAC,OAAO,CAAC,UAAU,IAAI,EAAE,CAAC,EAAE;AAC7B,gBAAI,CAAC,GAAG,CAAC,EACL,IAAI,IAAI,IAAI,CAAC;AACjB,gBAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;AACnB,oBAAI,IAAI,GAAG,GAAG,IAAI,CAAA;AAClB,oBAAI,IAAI,CAAC,QAAQ,EACb,IAAI,IAAI,GAAG,GAAG,GAAG,CAAC;aACzB,MAAM;AACH,oBAAI,IAAI,IAAI,GAAG,IAAI,CAAA;AACnB,oBAAI,IAAI,CAAC,QAAQ,EACb,IAAI,IAAI,GAAG,GAAG,GAAG,CAAC;aACzB;SACJ,CAAC,CAAC;AACH,gBAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;AAC3C,aAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KACpB,CAAC,CAAC;;;AAGH,QAAI,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;AAC7B,QAAI,CAAC,OAAO,EAAE;AACV,eAAO,GAAG,QAAQ,GAAG,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;AACvC,eAAO,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,UAAU,CAAC,EAAE,UAAU,CAAC,CAAC;KACjE;AACD,QAAI,CAAC,GAAG,CAAC,CAAC,CAAC;AACX,QAAI,CAAC,OAAO,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE;AAC9B,YAAI,CAAC,CAAC,MAAM,EAAE;AACV,mBAAO;SACV;AACD,SAAC,EAAE,CAAC;;AAEJ,YAAI,CAAC,CAAC,KAAK,KAAK,SAAS,IAAI,CAAC,CAAC,KAAK,KAAK,IAAI,EAAE;AAC3C,gBAAI,CAAC,CAAC,KAAK,KAAK,EAAE,EAAE;;;AAGhB,qBAAK,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;aACjB,MAAM;;AAEH,qBAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,GAAG,EAAE,GAAG,IAAI,CAAA,GAAI,aAAa,GAC5C,CAAC,CAAC,KAAK,GAAG,GAAG,CAAC;aACrB;AACD,mBAAO;SACV;;AAED,YAAI,WAAW,CAAC;AAChB,YAAI,MAAM,CAAC,cAAc,EAAE;AACvB,gBAAI,CAAC,WAAQ,KAAK,SAAS,EAAE;AACzB,2BAAW,GAAG,MAAM,CAAC,aAAa,EAAE,CAAC,WAAQ,CAAC,CAAC;aAClD,MAAM,IAAI,CAAC,CAAC,IAAI,IAAI,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,WAAQ,KAAK,SAAS,EAAE;AAC5D,2BAAW,GAAG,MAAM,CAAC,aAAa,EAC9B,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,WAAQ,CAAC,CAAC;aACpC;SACJ;;AAED,YAAI,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,MAAM,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;AACxC,YAAI,CAAC,CAAC,CAAC,IAAI,IAAI,EAAE,MAAM,CAAC,UAAU,IAAI,CAAC,CAAC,GAAG,CAAA,AAAC,IAAI,CAAC,WAAW,EAAE;AAC1D,mBAAO;SACV;AACD,YAAI,CAAC,GAAG,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC;AAC9B,YAAI,CAAC,IAAI,CAAC,EAAE;AACR,gBAAI,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC;SACpB,MAAM;AACH,gBAAI,IAAI,IAAI,GAAG,KAAK,CAAC,OAAO,CAAC,CAAC;SACjC;;AAED,YAAI,OAAO,GAAG,EAAE,CAAC;AACjB,YAAI,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC,MAAM,IAAI,MAAM,CAAC,UAAU,EAAE;AAC5C,mBAAO,IAAI,eAAe,CAAC;AAC3B,gBAAI,IAAI,GAAG,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;AAC/B,gBAAI,GAAG,GAAG,CAAC,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,IAAI,KAAK,CAAC;AAC7C,gBAAI,IAAI,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAA,CAAE,GAAG,CACnD,UAAU,CAAC,EAAE;AACT,oBAAI,IAAI,CAAC,QAAQ,EAAE;AACf,2BAAO,CAAC,GAAG,GAAG,GAAG,GAAG,CAAC;iBACxB,MAAM;AACH,2BAAO,CAAC,GAAG,IAAI,CAAC;iBACnB;aACJ,CACJ,CAAC;AACF,mBAAO,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SAC9B;AACD,YAAI,IAAI,GAAG,CAAC,CAAC,CAAC,IAAI,IAAI,EAAE,CAAA,CAAE,IAAI,EAAE,CAAC;AACjC,YAAI,CAAC,CAAC,QAAQ,KAAK,KAAK,IAAI,MAAM,CAAC,QAAQ,KAAK,KAAK,EAAE;;AAEnD,gBAAI,IAAI,CAAC,MAAM,IAAI,EAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;AACnD,oBAAI,IAAI,GAAG,CAAC;aACf;AACD,gBAAI,IAAI,CAAC,MAAM,EAAE;AACb,oBAAI,IAAI,GAAG,CAAC;aACf;AACD,gBAAI,IAAI,OAAO,CAAC;AAChB,gBAAI,WAAW,EAAE;AACb,oBAAI,OAAO,EAAE;AACT,wBAAI,IAAI,IAAI,CAAC;iBAChB;AACD,oBAAI,IAAI,WAAW,CAAC;aACvB;AACD,gBAAI,IAAI,QAAQ,CAAC,IAAI,EAAE,MAAM,GAAG,OAAO,CAAC,CAAC,IAAI,CACzC,IAAI,GAAG,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC;SAC9B,MAAM;;AAEH,gBAAI,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,MAAM,CAC/B,UAAU,EAAE,EAAE;AAAE,uBAAO,EAAE,CAAC,MAAM,CAAA;aAAE,CAAC,CAAC;AAC5C,gBAAI,OAAO,KAAK,EAAE,EAAE;AAChB,yBAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;aAC3B;AACD,gBAAI,WAAW,EAAE;AACb,yBAAS,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;aAC/B;AACD,gBAAI,IAAI,SAAS,CAAC,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC;SACjD;;AAED,aAAK,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;KACnB,CAAC,CAAC;;AAEH,QAAI,EAAE,GAAG,EAAE,CAAC;AACZ,QAAI,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;AAClB,UAAE,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC;KAChC;AACD,WAAO,EAAE,CAAC;CACb,CAAC;;;;;;;;;;;;;;;;;;;AAoBF,MAAM,CAAC,SAAS,CAAC,cAAc,GAAG,SAAS,cAAc,CAAC,IAAI,EAAE;AAC5D,UAAM,CAAC,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;AAC5B,UAAM,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;AACtC,UAAM,CAAC,cAAc,CAAC,IAAI,CAAC,SAAS,EAAE,gBAAgB,CAAC,CAAC;AACxD,UAAM,CAAC,qBAAqB,CAAC,IAAI,CAAC,QAAQ,EAAE,eAAe,CAAC,CAAC;;AAE7D,WAAO,yBAAyB,CAAC;AAC7B,YAAI,EAAE,IAAI,CAAC,IAAI;AACf,iBAAS,EAAE,IAAI,CAAC,SAAS;AACzB,gBAAQ,EAAE,IAAI,CAAC,QAAQ;AACvB,eAAO,EAAE,IAAI,CAAC,OAAO;KACxB,CAAC,CAAC;CACN,CAAC;;;;AAKF,IAAM,6BAA6B,GAAG,IAAI,CAAC,IAAI,CAC3C,SAAS,EAAE,oCAAoC,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCrD,SAAS,6BAA6B,CAAC,IAAI,EAAE;AACzC,UAAM,CAAC,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;AAC5B,UAAM,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,cAAc,CAAC,CAAC;AAC5C,UAAM,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,EAAE,cAAc,CAAC,CAAC;AACpD,UAAM,CAAC,YAAY,CAAC,IAAI,CAAC,aAAa,EAAE,oBAAoB,CAAC,CAAC;AAC9D,UAAM,CAAC,qBAAqB,CAAC,IAAI,CAAC,QAAQ,EAAE,eAAe,CAAC,CAAC;;AAE7D,QAAI,OAAO,GAAG,IAAI,CAAC,OAAO,IAAI,EAAE,CAAC;AACjC,QAAI,aAAa,GAAI,IAAI,CAAC,aAAa,KAAK,SAAS,GAC/C,KAAK,GAAG,IAAI,CAAC,aAAa,AAAC,CAAC;;AAElC,QAAI,IAAI,GAAG,EAAE,CAAC;AACd,QAAI,SAAS,GAAG,EAAE,CAAC;AACnB,QAAI,QAAQ,GAAG,EAAE,CAAC;AAClB,QAAI,OAAO,GAAG,EAAE,CAAC;AACjB,KAAC,IAAI,CAAC,OAAO,IAAI,EAAE,CAAA,CAAE,OAAO,CAAC,UAAU,CAAC,EAAE;AACtC,YAAI,CAAC,CAAC,KAAK,EAAE;;AAET,mBAAO;SACV;;AAED,YAAI,QAAQ,GAAG,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;AACnC,YAAI,OAAO,GAAG,aAAa,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;AACpC,YAAI,OAAO,CAAC,QAAQ,EAAE;AAClB,gBAAI,cAAc,GAAG,CAAC,CAAC,cAAc,IACjC,OAAO,CAAC,cAAc,IAAI,CAAC,CAAC,IAAI,CAAC;AACrC,oBAAQ,CAAC,OAAO,CAAC,UAAU,OAAO,EAAE;AAChC,oBAAI,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE;AACtB,wBAAI,aAAa,IAAI,CAAC,CAAC,CAAC,MAAM,EAAE;AAC5B,iCAAS,CAAC,IAAI,CAAC,GAAG,GAAG,OAAO,CAAC,CAAC;qBACjC;;;AAGD,2BAAO,CAAC,IAAI,CAAC,GAAG,GAAG,OAAO,GAAG,GAAG,GAAG,cAAc,CAAC,CAAC;iBACtD,MAAM;AACH,wBAAI,aAAa,IAAI,CAAC,CAAC,CAAC,MAAM,EAAE;AAC5B,gCAAQ,CAAC,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,CAAC;qBACjC;AACD,2BAAO,CAAC,IAAI,CAAC,IAAI,GAAG,OAAO,GAAG,GAAG,GAAG,cAAc,CAAC,CAAC;iBACvD;aACJ,CAAC,CAAC;SACN,MAAM;AACH,oBAAQ,CAAC,OAAO,CAAC,UAAU,OAAO,EAAE;AAChC,oBAAI,aAAa,IAAI,CAAC,CAAC,CAAC,MAAM,EAAE;AAC5B,wBAAI,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE;AACtB,iCAAS,CAAC,IAAI,CAAC,GAAG,GAAG,OAAO,CAAC,CAAC;qBACjC,MAAM;AACH,gCAAQ,CAAC,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,CAAC;qBACjC;iBACJ;aACJ,CAAC,CAAC;SACN;KACJ,CAAC,CAAC;;AAEH,QAAI,CAAC,IAAI,CAAC,MAAM,CAAC,4BAA4B,EACzC,OAAO,EAAE,SAAS,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AAC1C,QAAI,CAAC,IAAI,CAAC,MAAM,CAAC,2BAA2B,EACxC,OAAO,EAAE,QAAQ,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AACzC,QAAI,CAAC,IAAI,CAAC,MAAM,CAAC,0BAA0B,EACvC,OAAO,EAAE,OAAO,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AACxC,QAAI,IAAI,CAAC,QAAQ,EAAE;AACf,YAAI,CAAC,IAAI,CAAC,MAAM,CAAC,2BAA2B,EACxC,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;KAC1C;AACD,WAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;CAC1B;;;;;;;;;;;;;;;;;;;;AAqBD,SAAS,yBAAyB,CAAC,IAAI,EAAE;AACrC,UAAM,CAAC,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;AAC5B,UAAM,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,cAAc,CAAC,CAAC;AAC5C,UAAM,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;AACtC,UAAM,CAAC,cAAc,CAAC,IAAI,CAAC,SAAS,EAAE,gBAAgB,CAAC,CAAC;AACxD,UAAM,CAAC,qBAAqB,CAAC,IAAI,CAAC,QAAQ,EAAE,eAAe,CAAC,CAAC;;;AAG7D,QAAI,IAAI,GAAG;AACP,YAAI,EAAE,IAAI,CAAC,IAAI;AACf,YAAI,EAAE,IAAI,IAAI,EAAE;AAChB,YAAI,EAAE,6BAA6B,CAAC;AAChC,mBAAO,EAAE,IAAI,CAAC,OAAO;AACrB,oBAAQ,EAAE,IAAI,CAAC,QAAQ;SAC1B,CAAC;KACL,CAAC;AACF,QAAI,IAAI,CAAC,SAAS,EAAE;AAChB,YAAI,CAAC,IAAI,IAAI,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC;KACxC;;;AAGD,QAAI,QAAQ,GAAG,EAAE,CAAC,YAAY,CAAC,6BAA6B,EAAE,MAAM,CAAC,CAAC;AACtE,WAAO,cAAc,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;CACzC;;;;AAMD,SAAS,YAAY,CAAC,MAAM,EAAE;AAC1B,WAAO,IAAI,MAAM,CAAC,MAAM,CAAC,CAAC;CAC7B;;;;;;;;;AASD,SAAS,KAAK,CAAC,MAAM,EAAE;AACnB,UAAM,CAAC,MAAM,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;AAChC,UAAM,CAAC,qBAAqB,CAAC,MAAM,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;AACzD,UAAM,CAAC,cAAc,CAAC,MAAM,CAAC,GAAG,EAAE,YAAY,CAAC,CAAC;AAChD,QAAI,MAAM,GAAG,WAAW,CAAC,MAAM,CAAC,CAAC;AACjC,QAAI,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;AACvB,WAAO,MAAM,CAAC,IAAI,CAAC;AACnB,QAAI,GAAG,GAAG,MAAM,CAAC,GAAG,CAAC;AACrB,WAAO,MAAM,CAAC,GAAG,CAAC;;AAElB,QAAI,MAAM,GAAG,IAAI,MAAM,CAAC,MAAM,CAAC,CAAC;AAChC,WAAO,MAAM,CAAC,KAAK,CAAC,EAAC,IAAI,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,EAAC,CAAC,CAAC;CAC/C;;;;;;;;;;;;;;;;;;;;;;AAuBD,SAAS,aAAa,CAAC,UAAU,EAAE;AAC/B,UAAM,CAAC,MAAM,CAAC,UAAU,EAAE,YAAY,CAAC,CAAC;AACxC,UAAM,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,EAAE,iBAAiB,CAAC,CAAC;AAClD,UAAM,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,qBAAqB,CAAC,CAAC;AACxD,QAAI,UAAU,CAAC,QAAQ,EAAE;AACrB,cAAM,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,EAAE,oBAAoB,CAAC,CAAC;KAC3D;AACD,UAAM,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,qBAAqB,CAAC,CAAC;AACxD,UAAM,CAAC,YAAY,CAAC,UAAU,CAAC,KAAK,EAAE,kBAAkB,CAAC,CAAC;AAC1D,UAAM,CAAC,YAAY,CAAC,UAAU,CAAC,YAAY,EAAE,yBAAyB,CAAC,CAAC;;AAExE,eAAW,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG;AAC3B,gBAAQ,EAAE,UAAU,CAAC,QAAQ;AAC7B,eAAO,EAAE,UAAU,CAAC,OAAO;AAC3B,gBAAQ,EAAE,UAAU,CAAC,QAAQ;AAC7B,aAAK,EAAE,UAAU,CAAC,KAAK;AACvB,oBAAY,EAAE,UAAU,CAAC,YAAY;AACrC,mBAAS,UAAU,WAAQ;KAC9B,CAAA;CACJ;;AAGD,SAAS,aAAa,CAAC,IAAI,EAAE;AACzB,UAAM,CAAC,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;AAC5B,WAAO,WAAW,CAAC,IAAI,CAAC,CAAC;CAC5B;;AAGD,MAAM,CAAC,OAAO,GAAG;AACb,gBAAY,EAAE,YAAY;AAC1B,UAAM,EAAE,MAAM;AACd,SAAK,EAAE,KAAK;AACZ,iBAAa,EAAE,aAAa;AAC5B,iBAAa,EAAE,aAAa;;;AAG5B,iCAA6B,EAAE,6BAA6B;AAC5D,6BAAyB,EAAE,yBAAyB;AACpD,iCAA6B,EAAE,6BAA6B;;;;AAI5D,aAAS,EAAE,SAAS;AACpB,eAAW,EAAE,WAAW;AACxB,eAAW,EAAE,WAAW;AACxB,gBAAY,EAAE,YAAY;AAC1B,wBAAoB,EAAE,oBAAoB;AAC1C,aAAS,EAAE,SAAS;CACvB,CAAC","file":"dashdash-compiled.js","sourcesContent":["/**\n * dashdash - A light, featureful and explicit option parsing library for\n * node.js.\n */\n// vim: set ts=4 sts=4 sw=4 et:\n\nvar assert = require('assert-plus');\nvar format = require('util').format;\nvar fs = require('fs');\nvar path = require('path');\n\n\nvar DEBUG = true;\nif (DEBUG) {\n    var debug = console.warn;\n} else {\n    var debug = function () {};\n}\n\n\n\n// ---- internal support stuff\n\n// Replace {{variable}} in `s` with the template data in `d`.\nfunction renderTemplate(s, d) {\n    return s.replace(/{{([a-zA-Z]+)}}/g, function (match, key) {\n        return d.hasOwnProperty(key) ? d[key] : match;\n    });\n}\n\n/**\n * Return a shallow copy of the given object;\n */\nfunction shallowCopy(obj) {\n    if (!obj) {\n        return (obj);\n    }\n    var copy = {};\n    Object.keys(obj).forEach(function (k) {\n        copy[k] = obj[k];\n    });\n    return (copy);\n}\n\n\nfunction space(n) {\n    var s = '';\n    for (var i = 0; i < n; i++) {\n        s += ' ';\n    }\n    return s;\n}\n\n\nfunction makeIndent(arg, deflen, name) {\n    if (arg === null || arg === undefined)\n        return space(deflen);\n    else if (typeof (arg) === 'number')\n        return space(arg);\n    else if (typeof (arg) === 'string')\n        return arg;\n    else\n        assert.fail('invalid \"' + name + '\": not a string or number: ' + arg);\n}\n\n\n/**\n * Return an array of lines wrapping the given text to the given width.\n * This splits on whitespace. Single tokens longer than `width` are not\n * broken up.\n */\nfunction textwrap(s, width) {\n    var words = s.trim().split(/\\s+/);\n    var lines = [];\n    var line = '';\n    words.forEach(function (w) {\n        var newLength = line.length + w.length;\n        if (line.length > 0)\n            newLength += 1;\n        if (newLength > width) {\n            lines.push(line);\n            line = '';\n        }\n        if (line.length > 0)\n            line += ' ';\n        line += w;\n    });\n    lines.push(line);\n    return lines;\n}\n\n\n/**\n * Transform an option name to a \"key\" that is used as the field\n * on the `opts` object returned from `<parser>.parse()`.\n *\n * Transformations:\n * - '-' -> '_': This allow one to use hyphen in option names (common)\n *   but not have to do silly things like `opt[\"dry-run\"]` to access the\n *   parsed results.\n */\nfunction optionKeyFromName(name) {\n    return name.replace(/-/g, '_');\n}\n\n\n\n// ---- Option types\n\nfunction parseBool(option, optstr, arg) {\n    return Boolean(arg);\n}\n\nfunction parseString(option, optstr, arg) {\n    assert.string(arg, 'arg');\n    return arg;\n}\n\nfunction parseNumber(option, optstr, arg) {\n    assert.string(arg, 'arg');\n    var num = Number(arg);\n    if (isNaN(num)) {\n        throw new Error(format('arg for \"%s\" is not a number: \"%s\"',\n            optstr, arg));\n    }\n    return num;\n}\n\nfunction parseInteger(option, optstr, arg) {\n    assert.string(arg, 'arg');\n    var num = Number(arg);\n    if (!/^[0-9-]+$/.test(arg) || isNaN(num)) {\n        throw new Error(format('arg for \"%s\" is not an integer: \"%s\"',\n            optstr, arg));\n    }\n    return num;\n}\n\nfunction parsePositiveInteger(option, optstr, arg) {\n    assert.string(arg, 'arg');\n    var num = Number(arg);\n    if (!/^[0-9]+$/.test(arg) || isNaN(num) || num === 0) {\n        throw new Error(format('arg for \"%s\" is not a positive integer: \"%s\"',\n            optstr, arg));\n    }\n    return num;\n}\n\n/**\n * Supported date args:\n * - epoch second times (e.g. 1396031701)\n * - ISO 8601 format: YYYY-MM-DD[THH:MM:SS[.sss][Z]]\n *      2014-03-28T18:35:01.489Z\n *      2014-03-28T18:35:01.489\n *      2014-03-28T18:35:01Z\n *      2014-03-28T18:35:01\n *      2014-03-28\n */\nfunction parseDate(option, optstr, arg) {\n    assert.string(arg, 'arg');\n    var date;\n    if (/^\\d+$/.test(arg)) {\n        // epoch seconds\n        date = new Date(Number(arg) * 1000);\n    /* JSSTYLED */\n    } else if (/^\\d{4}-\\d{2}-\\d{2}(T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z?)?$/i.test(arg)) {\n        // ISO 8601 format\n        date = new Date(arg);\n    } else {\n        throw new Error(format('arg for \"%s\" is not a valid date format: \"%s\"',\n            optstr, arg));\n    }\n    if (date.toString() === 'Invalid Date') {\n        throw new Error(format('arg for \"%s\" is an invalid date: \"%s\"',\n            optstr, arg));\n    }\n    return date;\n}\n\nvar optionTypes = {\n    bool: {\n        takesArg: false,\n        parseArg: parseBool\n    },\n    string: {\n        takesArg: true,\n        helpArg: 'ARG',\n        parseArg: parseString\n    },\n    number: {\n        takesArg: true,\n        helpArg: 'NUM',\n        parseArg: parseNumber\n    },\n    integer: {\n        takesArg: true,\n        helpArg: 'INT',\n        parseArg: parseInteger\n    },\n    positiveInteger: {\n        takesArg: true,\n        helpArg: 'INT',\n        parseArg: parsePositiveInteger\n    },\n    date: {\n        takesArg: true,\n        helpArg: 'DATE',\n        parseArg: parseDate\n    },\n    arrayOfBool: {\n        takesArg: false,\n        array: true,\n        parseArg: parseBool\n    },\n    arrayOfString: {\n        takesArg: true,\n        helpArg: 'ARG',\n        array: true,\n        parseArg: parseString\n    },\n    arrayOfNumber: {\n        takesArg: true,\n        helpArg: 'NUM',\n        array: true,\n        parseArg: parseNumber\n    },\n    arrayOfInteger: {\n        takesArg: true,\n        helpArg: 'INT',\n        array: true,\n        parseArg: parseInteger\n    },\n    arrayOfPositiveInteger: {\n        takesArg: true,\n        helpArg: 'INT',\n        array: true,\n        parseArg: parsePositiveInteger\n    },\n    arrayOfDate: {\n        takesArg: true,\n        helpArg: 'INT',\n        array: true,\n        parseArg: parseDate\n    },\n};\n\n\n\n// ---- Parser\n\n/**\n * Parser constructor.\n *\n * @param config {Object} The parser configuration\n *      - options {Array} Array of option specs. See the README for how to\n *        specify each option spec.\n *      - allowUnknown {Boolean} Default false. Whether to throw on unknown\n *        options. If false, then unknown args are included in the _args array.\n *      - interspersed {Boolean} Default true. Whether to allow interspersed\n *        arguments (non-options) and options. E.g.:\n *              node tool.js arg1 arg2 -v\n *        '-v' is after some args here. If `interspersed: false` then '-v'\n *        would not be parsed out. Note that regardless of `interspersed`\n *        the presence of '--' will stop option parsing, as all good\n *        option parsers should.\n */\nfunction Parser(config) {\n    assert.object(config, 'config');\n    assert.arrayOfObject(config.options, 'config.options');\n    assert.optionalBool(config.interspersed, 'config.interspersed');\n    var self = this;\n\n    // Allow interspersed arguments (true by default).\n    this.interspersed = (config.interspersed !== undefined\n        ? config.interspersed : true);\n\n    // Don't allow unknown flags (true by default).\n    this.allowUnknown = (config.allowUnknown !== undefined\n        ? config.allowUnknown : false);\n\n    this.options = config.options.map(function (o) { return shallowCopy(o); });\n    this.optionFromName = {};\n    this.optionFromEnv = {};\n    for (var i = 0; i < this.options.length; i++) {\n        var o = this.options[i];\n        if (o.group !== undefined && o.group !== null) {\n            assert.optionalString(o.group,\n                format('config.options.%d.group', i));\n            continue;\n        }\n        assert.ok(optionTypes[o.type],\n            format('invalid config.options.%d.type: \"%s\" in %j',\n                   i, o.type, o));\n        assert.optionalString(o.name, format('config.options.%d.name', i));\n        assert.optionalArrayOfString(o.names,\n            format('config.options.%d.names', i));\n        assert.ok((o.name || o.names) && !(o.name && o.names),\n            format('exactly one of \"name\" or \"names\" required: %j', o));\n        assert.optionalString(o.help, format('config.options.%d.help', i));\n        var env = o.env || [];\n        if (typeof (env) === 'string') {\n            env = [env];\n        }\n        assert.optionalArrayOfString(env, format('config.options.%d.env', i));\n        assert.optionalString(o.helpGroup,\n            format('config.options.%d.helpGroup', i));\n        assert.optionalBool(o.helpWrap,\n            format('config.options.%d.helpWrap', i));\n        assert.optionalBool(o.hidden, format('config.options.%d.hidden', i));\n\n        if (o.name) {\n            o.names = [o.name];\n        } else {\n            assert.string(o.names[0],\n                format('config.options.%d.names is empty', i));\n        }\n        o.key = optionKeyFromName(o.names[0]);\n        o.names.forEach(function (n) {\n            if (self.optionFromName[n]) {\n                throw new Error(format(\n                    'option name collision: \"%s\" used in %j and %j',\n                    n, self.optionFromName[n], o));\n            }\n            self.optionFromName[n] = o;\n        });\n        env.forEach(function (n) {\n            if (self.optionFromEnv[n]) {\n                throw new Error(format(\n                    'option env collision: \"%s\" used in %j and %j',\n                    n, self.optionFromEnv[n], o));\n            }\n            self.optionFromEnv[n] = o;\n        });\n    }\n}\n\nParser.prototype.optionTakesArg = function optionTakesArg(option) {\n    return optionTypes[option.type].takesArg;\n};\n\n/**\n * Parse options from the given argv.\n *\n * @param inputs {Object} Optional.\n *      - argv {Array} Optional. The argv to parse. Defaults to\n *        `process.argv`.\n *      - slice {Number} The index into argv at which options/args begin.\n *        Default is 2, as appropriate for `process.argv`.\n *      - env {Object} Optional. The env to use for 'env' entries in the\n *        option specs. Defaults to `process.env`.\n * @returns {Object} Parsed `opts`. It has special keys `_args` (the\n *      remaining args from `argv`) and `_order` (gives the order that\n *      options were specified).\n */\nParser.prototype.parse = function parse(inputs) {\n    var self = this;\n\n    // Old API was `parse([argv, [slice]])`\n    if (Array.isArray(arguments[0])) {\n        inputs = {argv: arguments[0], slice: arguments[1]};\n    }\n\n    assert.optionalObject(inputs, 'inputs');\n    if (!inputs) {\n        inputs = {};\n    }\n    assert.optionalArrayOfString(inputs.argv, 'inputs.argv');\n    //assert.optionalNumber(slice, 'slice');\n    var argv = inputs.argv || process.argv;\n    var slice = inputs.slice !== undefined ? inputs.slice : 2;\n    var args = argv.slice(slice);\n    var env = inputs.env || process.env;\n    var opts = {};\n    var _order = [];\n\n    function addOpt(option, optstr, key, val, from) {\n        var type = optionTypes[option.type];\n        var parsedVal = type.parseArg(option, optstr, val);\n        if (type.array) {\n            if (!opts[key]) {\n                opts[key] = [];\n            }\n            if (type.arrayFlatten && Array.isArray(parsedVal)) {\n                for (var i = 0; i < parsedVal.length; i++) {\n                    opts[key].push(parsedVal[i]);\n                }\n            } else {\n                opts[key].push(parsedVal);\n            }\n        } else {\n            opts[key] = parsedVal;\n        }\n        var item = { key: key, value: parsedVal, from: from };\n        _order.push(item);\n    }\n\n    // Parse args.\n    var _args = [];\n    var i = 0;\n    outer: while (i < args.length) {\n        var arg = args[i];\n\n        // End of options marker.\n        if (arg === '--') {\n            i++;\n            break;\n\n        // Long option\n        } else if (arg.slice(0, 2) === '--') {\n            var name = arg.slice(2);\n            var val = null;\n            var idx = name.indexOf('=');\n            if (idx !== -1) {\n                val = name.slice(idx + 1);\n                name = name.slice(0, idx);\n            }\n            var option = this.optionFromName[name];\n            if (!option) {\n                if (!this.allowUnknown)\n                    throw new Error(format('unknown option: \"--%s\"', name));\n                else if (this.interspersed)\n                    _args.push(arg);\n                else\n                    break outer;\n            } else {\n                var takesArg = this.optionTakesArg(option);\n                if (val !== null && !takesArg) {\n                    throw new Error(format('argument given to \"--%s\" option '\n                        + 'that does not take one: \"%s\"', name, arg));\n                }\n                if (!takesArg) {\n                    addOpt(option, '--'+name, option.key, true, 'argv');\n                } else if (val !== null) {\n                    addOpt(option, '--'+name, option.key, val, 'argv');\n                } else if (i + 1 >= args.length) {\n                    throw new Error(format('do not have enough args for \"--%s\" '\n                        + 'option', name));\n                } else {\n                    addOpt(option, '--'+name, option.key, args[i + 1], 'argv');\n                    i++;\n                }\n            }\n\n        // Short option\n        } else if (arg[0] === '-' && arg.length > 1) {\n            var j = 1;\n            var allFound = true;\n            while (j < arg.length) {\n                var name = arg[j];\n                var option = this.optionFromName[name];\n                if (!option) {\n                    allFound = false;\n                    if (this.allowUnknown) {\n                        if (this.interspersed) {\n                            _args.push(arg);\n                            break;\n                        } else\n                            break outer;\n                    } else if (arg.length > 2) {\n                        throw new Error(format(\n                            'unknown option: \"-%s\" in \"%s\" group',\n                            name, arg));\n                    } else {\n                        throw new Error(format('unknown option: \"-%s\"', name));\n                    }\n                } else if (this.optionTakesArg(option)) {\n                    break;\n                }\n                j++;\n            }\n\n            j = 1;\n            while (allFound && j < arg.length) {\n                var name = arg[j];\n                var val = arg.slice(j + 1);  // option val if it takes an arg\n                var option = this.optionFromName[name];\n                var takesArg = this.optionTakesArg(option);\n                if (!takesArg) {\n                    addOpt(option, '-'+name, option.key, true, 'argv');\n                } else if (val) {\n                    addOpt(option, '-'+name, option.key, val, 'argv');\n                    break;\n                } else {\n                    if (i + 1 >= args.length) {\n                        throw new Error(format('do not have enough args '\n                            + 'for \"-%s\" option', name));\n                    }\n                    addOpt(option, '-'+name, option.key, args[i + 1], 'argv');\n                    i++;\n                    break;\n                }\n                j++;\n            }\n\n        // An interspersed arg\n        } else if (this.interspersed) {\n            _args.push(arg);\n\n        // An arg and interspersed args are not allowed, so done options.\n        } else {\n            break outer;\n        }\n        i++;\n    }\n    _args = _args.concat(args.slice(i));\n\n    // Parse environment.\n    Object.keys(this.optionFromEnv).forEach(function (envname) {\n        var val = env[envname];\n        if (val === undefined)\n            return;\n        var option = self.optionFromEnv[envname];\n        if (opts[option.key] !== undefined)\n            return;\n        var takesArg = self.optionTakesArg(option);\n        if (takesArg) {\n            addOpt(option, envname, option.key, val, 'env');\n        } else if (val !== '') {\n            // Boolean envvar handling:\n            // - VAR=<empty-string>     not set (as if the VAR was not set)\n            // - VAR=0                  false\n            // - anything else          true\n            addOpt(option, envname, option.key, (val !== '0'), 'env');\n        }\n    });\n\n    // Apply default values.\n    this.options.forEach(function (o) {\n        if (opts[o.key] === undefined) {\n            if (o.default !== undefined) {\n                opts[o.key] = o.default;\n            } else if (o.type && optionTypes[o.type].default !== undefined) {\n                opts[o.key] = optionTypes[o.type].default;\n            }\n        }\n    });\n\n    opts._order = _order;\n    opts._args = _args;\n    return opts;\n};\n\n\n/**\n * Return help output for the current options.\n *\n * E.g.: if the current options are:\n *      [{names: ['help', 'h'], type: 'bool', help: 'Show help and exit.'}]\n * then this would return:\n *      '  -h, --help     Show help and exit.\\n'\n *\n * @param config {Object} Config for controlling the option help output.\n *      - indent {Number|String} Default 4. An indent/prefix to use for\n *        each option line.\n *      - nameSort {String} Default is 'length'. By default the names are\n *        sorted to put the short opts first (i.e. '-h, --help' preferred\n *        to '--help, -h'). Set to 'none' to not do this sorting.\n *      - maxCol {Number} Default 80. Note that long tokens in a help string\n *        can go past this.\n *      - helpCol {Number} Set to specify a specific column at which\n *        option help will be aligned. By default this is determined\n *        automatically.\n *      - minHelpCol {Number} Default 20.\n *      - maxHelpCol {Number} Default 40.\n *      - includeEnv {Boolean} Default false. If true, a note stating the `env`\n *        envvar (if specified for this option) will be appended to the help\n *        output.\n *      - includeDefault {Boolean} Default false. If true, a note stating\n *        the `default` for this option, if any, will be appended to the help\n *        output.\n *      - helpWrap {Boolean} Default true. Wrap help text in helpCol..maxCol\n *        bounds.\n * @returns {String}\n */\nParser.prototype.help = function help(config) {\n    config = config || {};\n    assert.object(config, 'config');\n\n    var indent = makeIndent(config.indent, 4, 'config.indent');\n    var headingIndent = makeIndent(config.headingIndent,\n        Math.round(indent.length / 2), 'config.headingIndent');\n\n    assert.optionalString(config.nameSort, 'config.nameSort');\n    var nameSort = config.nameSort || 'length';\n    assert.ok(~['length', 'none'].indexOf(nameSort),\n        'invalid \"config.nameSort\"');\n    assert.optionalNumber(config.maxCol, 'config.maxCol');\n    assert.optionalNumber(config.maxHelpCol, 'config.maxHelpCol');\n    assert.optionalNumber(config.minHelpCol, 'config.minHelpCol');\n    assert.optionalNumber(config.helpCol, 'config.helpCol');\n    assert.optionalBool(config.includeEnv, 'config.includeEnv');\n    assert.optionalBool(config.includeDefault, 'config.includeDefault');\n    assert.optionalBool(config.helpWrap, 'config.helpWrap');\n    var maxCol = config.maxCol || 80;\n    var minHelpCol = config.minHelpCol || 20;\n    var maxHelpCol = config.maxHelpCol || 40;\n\n    var lines = [];\n    var maxWidth = 0;\n    this.options.forEach(function (o) {\n        if (o.hidden) {\n            return;\n        }\n        if (o.group !== undefined && o.group !== null) {\n            // We deal with groups in the next pass\n            lines.push(null);\n            return;\n        }\n        var type = optionTypes[o.type];\n        var arg = o.helpArg || type.helpArg || 'ARG';\n        var line = '';\n        var names = o.names.slice();\n        if (nameSort === 'length') {\n            names.sort(function (a, b) {\n                if (a.length < b.length)\n                    return -1;\n                else if (b.length < a.length)\n                    return 1;\n                else\n                    return 0;\n            })\n        }\n        names.forEach(function (name, i) {\n            if (i > 0)\n                line += ', ';\n            if (name.length === 1) {\n                line += '-' + name\n                if (type.takesArg)\n                    line += ' ' + arg;\n            } else {\n                line += '--' + name\n                if (type.takesArg)\n                    line += '=' + arg;\n            }\n        });\n        maxWidth = Math.max(maxWidth, line.length);\n        lines.push(line);\n    });\n\n    // Add help strings.\n    var helpCol = config.helpCol;\n    if (!helpCol) {\n        helpCol = maxWidth + indent.length + 2;\n        helpCol = Math.min(Math.max(helpCol, minHelpCol), maxHelpCol);\n    }\n    var i = -1;\n    this.options.forEach(function (o) {\n        if (o.hidden) {\n            return;\n        }\n        i++;\n\n        if (o.group !== undefined && o.group !== null) {\n            if (o.group === '') {\n                // Support a empty string \"group\" to have a blank line between\n                // sets of options.\n                lines[i] = '';\n            } else {\n                // Render the group heading with the heading-specific indent.\n                lines[i] = (i === 0 ? '' : '\\n') + headingIndent +\n                    o.group + ':';\n            }\n            return;\n        }\n\n        var helpDefault;\n        if (config.includeDefault) {\n            if (o.default !== undefined) {\n                helpDefault = format('Default: %j', o.default);\n            } else if (o.type && optionTypes[o.type].default !== undefined) {\n                helpDefault = format('Default: %j',\n                    optionTypes[o.type].default);\n            }\n        }\n\n        var line = lines[i] = indent + lines[i];\n        if (!o.help && !(config.includeEnv && o.env) && !helpDefault) {\n            return;\n        }\n        var n = helpCol - line.length;\n        if (n >= 0) {\n            line += space(n);\n        } else {\n            line += '\\n' + space(helpCol);\n        }\n\n        var helpEnv = '';\n        if (o.env && o.env.length && config.includeEnv) {\n            helpEnv += 'Environment: ';\n            var type = optionTypes[o.type];\n            var arg = o.helpArg || type.helpArg || 'ARG';\n            var envs = (Array.isArray(o.env) ? o.env : [o.env]).map(\n                function (e) {\n                    if (type.takesArg) {\n                        return e + '=' + arg;\n                    } else {\n                        return e + '=1';\n                    }\n                }\n            );\n            helpEnv += envs.join(', ');\n        }\n        var help = (o.help || '').trim();\n        if (o.helpWrap !== false && config.helpWrap !== false) {\n            // Wrap help description normally.\n            if (help.length && !~'.!?\"\\''.indexOf(help.slice(-1))) {\n                help += '.';\n            }\n            if (help.length) {\n                help += ' ';\n            }\n            help += helpEnv;\n            if (helpDefault) {\n                if (helpEnv) {\n                    help += '. ';\n                }\n                help += helpDefault;\n            }\n            line += textwrap(help, maxCol - helpCol).join(\n                '\\n' + space(helpCol));\n        } else {\n            // Do not wrap help description, but indent newlines appropriately.\n            var helpLines = help.split('\\n').filter(\n                    function (ln) { return ln.length });\n            if (helpEnv !== '') {\n                helpLines.push(helpEnv);\n            }\n            if (helpDefault) {\n                helpLines.push(helpDefault);\n            }\n            line += helpLines.join('\\n' + space(helpCol));\n        }\n\n        lines[i] = line;\n    });\n\n    var rv = '';\n    if (lines.length > 0) {\n        rv = lines.join('\\n') + '\\n';\n    }\n    return rv;\n};\n\n\n/**\n * Return a string suitable for a Bash completion file for this tool.\n *\n * @param args.name {String} The tool name.\n * @param args.specExtra {String} Optional. Extra Bash code content to add\n *      to the end of the \"spec\". Typically this is used to append Bash\n *      \"complete_TYPE\" functions for custom option types. See\n *      \"examples/ddcompletion.js\" for an example.\n * @param args.argtypes {Array} Optional. Array of completion types for\n *      positional args (i.e. non-options). E.g.\n *          argtypes = ['fruit', 'veggie', 'file']\n *      will result in completion of fruits for the first arg, veggies for the\n *      second, and filenames for the third and subsequent positional args.\n *      If not given, positional args will use Bash's 'default' completion.\n *      See `specExtra` for providing Bash `complete_TYPE` functions, e.g.\n *      `complete_fruit` and `complete_veggie` in this example.\n */\nParser.prototype.bashCompletion = function bashCompletion(args) {\n    assert.object(args, 'args');\n    assert.string(args.name, 'args.name');\n    assert.optionalString(args.specExtra, 'args.specExtra');\n    assert.optionalArrayOfString(args.argtypes, 'args.argtypes');\n\n    return bashCompletionFromOptions({\n        name: args.name,\n        specExtra: args.specExtra,\n        argtypes: args.argtypes,\n        options: this.options\n    });\n};\n\n\n// ---- Bash completion\n\nconst BASH_COMPLETION_TEMPLATE_PATH = path.join(\n    __dirname, '../etc/dashdash.bash_completion.in');\n\n/**\n * Return the Bash completion \"spec\" (the string value for the \"{{spec}}\"\n * var in the \"dashdash.bash_completion.in\" template) for this tool.\n *\n * The \"spec\" is Bash code that defines the CLI options and subcmds for\n * the template's completion code. It looks something like this:\n *\n *      local cmd_shortopts=\"-J ...\"\n *      local cmd_longopts=\"--help ...\"\n *      local cmd_optargs=\"-p=tritonprofile ...\"\n *\n * @param args.options {Array} The array of dashdash option specs.\n * @param args.context {String} Optional. A context string for the \"local cmd*\"\n *      vars in the spec. By default it is the empty string. When used to\n *      scope for completion on a *sub-command* (e.g. for \"git log\" on a \"git\"\n *      tool), then it would have a value (e.g. \"__log\"). See\n *      <http://github.com/trentm/node-cmdln> Bash completion for details.\n * @param opts.includeHidden {Boolean} Optional. Default false. By default\n *      hidden options and subcmds are \"excluded\". Here excluded means they\n *      won't be offered as a completion, but if used, their argument type\n *      will be completed. \"Hidden\" options and subcmds are ones with the\n *      `hidden: true` attribute to exclude them from default help output.\n * @param args.argtypes {Array} Optional. Array of completion types for\n *      positional args (i.e. non-options). E.g.\n *          argtypes = ['fruit', 'veggie', 'file']\n *      will result in completion of fruits for the first arg, veggies for the\n *      second, and filenames for the third and subsequent positional args.\n *      If not given, positional args will use Bash's 'default' completion.\n *      See `specExtra` for providing Bash `complete_TYPE` functions, e.g.\n *      `complete_fruit` and `complete_veggie` in this example.\n */\nfunction bashCompletionSpecFromOptions(args) {\n    assert.object(args, 'args');\n    assert.object(args.options, 'args.options');\n    assert.optionalString(args.context, 'args.context');\n    assert.optionalBool(args.includeHidden, 'args.includeHidden');\n    assert.optionalArrayOfString(args.argtypes, 'args.argtypes');\n\n    var context = args.context || '';\n    var includeHidden = (args.includeHidden === undefined\n        ? false : args.includeHidden);\n\n    var spec = [];\n    var shortopts = [];\n    var longopts = [];\n    var optargs = [];\n    (args.options || []).forEach(function (o) {\n        if (o.group) {\n            // Skip group headers.\n            return;\n        }\n\n        var optNames = o.names || [o.name];\n        var optType = getOptionType(o.type);\n        if (optType.takesArg) {\n            var completionType = o.completionType ||\n                optType.completionType || o.type;\n            optNames.forEach(function (optName) {\n                if (optName.length === 1) {\n                    if (includeHidden || !o.hidden) {\n                        shortopts.push('-' + optName);\n                    }\n                    // Include even hidden options in `optargs` so that bash\n                    // completion of its arg still works.\n                    optargs.push('-' + optName + '=' + completionType);\n                } else {\n                    if (includeHidden || !o.hidden) {\n                        longopts.push('--' + optName);\n                    }\n                    optargs.push('--' + optName + '=' + completionType);\n                }\n            });\n        } else {\n            optNames.forEach(function (optName) {\n                if (includeHidden || !o.hidden) {\n                    if (optName.length === 1) {\n                        shortopts.push('-' + optName);\n                    } else {\n                        longopts.push('--' + optName);\n                    }\n                }\n            });\n        }\n    });\n\n    spec.push(format('local cmd%s_shortopts=\"%s\"',\n        context, shortopts.sort().join(' ')));\n    spec.push(format('local cmd%s_longopts=\"%s\"',\n        context, longopts.sort().join(' ')));\n    spec.push(format('local cmd%s_optargs=\"%s\"',\n        context, optargs.sort().join(' ')));\n    if (args.argtypes) {\n        spec.push(format('local cmd%s_argtypes=\"%s\"',\n            context, args.argtypes.join(' ')));\n    }\n    return spec.join('\\n');\n}\n\n\n/**\n * Return a string suitable for a Bash completion file for this tool.\n *\n * @param args.name {String} The tool name.\n * @param args.options {Array} The array of dashdash option specs.\n * @param args.specExtra {String} Optional. Extra Bash code content to add\n *      to the end of the \"spec\". Typically this is used to append Bash\n *      \"complete_TYPE\" functions for custom option types. See\n *      \"examples/ddcompletion.js\" for an example.\n * @param args.argtypes {Array} Optional. Array of completion types for\n *      positional args (i.e. non-options). E.g.\n *          argtypes = ['fruit', 'veggie', 'file']\n *      will result in completion of fruits for the first arg, veggies for the\n *      second, and filenames for the third and subsequent positional args.\n *      If not given, positional args will use Bash's 'default' completion.\n *      See `specExtra` for providing Bash `complete_TYPE` functions, e.g.\n *      `complete_fruit` and `complete_veggie` in this example.\n */\nfunction bashCompletionFromOptions(args) {\n    assert.object(args, 'args');\n    assert.object(args.options, 'args.options');\n    assert.string(args.name, 'args.name');\n    assert.optionalString(args.specExtra, 'args.specExtra');\n    assert.optionalArrayOfString(args.argtypes, 'args.argtypes');\n\n    // Gather template data.\n    var data = {\n        name: args.name,\n        date: new Date(),\n        spec: bashCompletionSpecFromOptions({\n            options: args.options,\n            argtypes: args.argtypes\n        }),\n    };\n    if (args.specExtra) {\n        data.spec += '\\n\\n' + args.specExtra;\n    }\n\n    // Render template.\n    var template = fs.readFileSync(BASH_COMPLETION_TEMPLATE_PATH, 'utf8');\n    return renderTemplate(template, data);\n}\n\n\n\n// ---- exports\n\nfunction createParser(config) {\n    return new Parser(config);\n}\n\n/**\n * Parse argv with the given options.\n *\n * @param config {Object} A merge of all the available fields from\n *      `dashdash.Parser` and `dashdash.Parser.parse`: options, interspersed,\n *      argv, env, slice.\n */\nfunction parse(config) {\n    assert.object(config, 'config');\n    assert.optionalArrayOfString(config.argv, 'config.argv');\n    assert.optionalObject(config.env, 'config.env');\n    var config = shallowCopy(config);\n    var argv = config.argv;\n    delete config.argv;\n    var env = config.env;\n    delete config.env;\n\n    var parser = new Parser(config);\n    return parser.parse({argv: argv, env: env});\n}\n\n\n/**\n * Add a new option type.\n *\n * @params optionType {Object}:\n *      - name {String} Required.\n *      - takesArg {Boolean} Required. Whether this type of option takes an\n *        argument on process.argv. Typically this is true for all but the\n *        \"bool\" type.\n *      - helpArg {String} Required iff `takesArg === true`. The string to\n *        show in generated help for options of this type.\n *      - parseArg {Function} Require. `function (option, optstr, arg)` parser\n *        that takes a string argument and returns an instance of the\n *        appropriate type, or throws an error if the arg is invalid.\n *      - array {Boolean} Optional. Set to true if this is an 'arrayOf' type\n *        that collects multiple usages of the option in process.argv and\n *        puts results in an array.\n *      - arrayFlatten {Boolean} Optional. XXX\n *      - default Optional. Default value for options of this type, if no\n *        default is specified in the option type usage.\n */\nfunction addOptionType(optionType) {\n    assert.object(optionType, 'optionType');\n    assert.string(optionType.name, 'optionType.name');\n    assert.bool(optionType.takesArg, 'optionType.takesArg');\n    if (optionType.takesArg) {\n        assert.string(optionType.helpArg, 'optionType.helpArg');\n    }\n    assert.func(optionType.parseArg, 'optionType.parseArg');\n    assert.optionalBool(optionType.array, 'optionType.array');\n    assert.optionalBool(optionType.arrayFlatten, 'optionType.arrayFlatten');\n\n    optionTypes[optionType.name] = {\n        takesArg: optionType.takesArg,\n        helpArg: optionType.helpArg,\n        parseArg: optionType.parseArg,\n        array: optionType.array,\n        arrayFlatten: optionType.arrayFlatten,\n        default: optionType.default\n    }\n}\n\n\nfunction getOptionType(name) {\n    assert.string(name, 'name');\n    return optionTypes[name];\n}\n\n\nmodule.exports = {\n    createParser: createParser,\n    Parser: Parser,\n    parse: parse,\n    addOptionType: addOptionType,\n    getOptionType: getOptionType,\n\n    // Bash completion-related exports\n    BASH_COMPLETION_TEMPLATE_PATH: BASH_COMPLETION_TEMPLATE_PATH,\n    bashCompletionFromOptions: bashCompletionFromOptions,\n    bashCompletionSpecFromOptions: bashCompletionSpecFromOptions,\n\n    // Export the parseFoo parsers because they might be useful as primitives\n    // for custom option types.\n    parseBool: parseBool,\n    parseString: parseString,\n    parseNumber: parseNumber,\n    parseInteger: parseInteger,\n    parsePositiveInteger: parsePositiveInteger,\n    parseDate: parseDate\n};\n"]}