{"version":3,"sources":["rfc4253.js"],"names":[],"mappings":"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","file":"rfc4253-compiled.js","sourcesContent":["// Copyright 2015 Joyent, Inc.\n\nmodule.exports = {\n\tread: read.bind(undefined, false, undefined),\n\treadType: read.bind(undefined, false),\n\twrite: write,\n\t/* semi-private api, used by sshpk-agent */\n\treadPartial: read.bind(undefined, true),\n\n\t/* shared with ssh format */\n\treadInternal: read,\n\tkeyTypeToAlg: keyTypeToAlg,\n\talgToKeyType: algToKeyType\n};\n\nvar assert = require('assert-plus');\nvar algs = require('../algs');\nvar utils = require('../utils');\nvar Key = require('../key');\nvar PrivateKey = require('../private-key');\nvar SSHBuffer = require('../ssh-buffer');\n\nfunction algToKeyType(alg) {\n\tassert.string(alg);\n\tif (alg === 'ssh-dss')\n\t\treturn ('dsa');\n\telse if (alg === 'ssh-rsa')\n\t\treturn ('rsa');\n\telse if (alg === 'ssh-ed25519')\n\t\treturn ('ed25519');\n\telse if (alg === 'ssh-curve25519')\n\t\treturn ('curve25519');\n\telse if (alg.match(/^ecdsa-sha2-/))\n\t\treturn ('ecdsa');\n\telse\n\t\tthrow (new Error('Unknown algorithm ' + alg));\n}\n\nfunction keyTypeToAlg(key) {\n\tassert.object(key);\n\tif (key.type === 'dsa')\n\t\treturn ('ssh-dss');\n\telse if (key.type === 'rsa')\n\t\treturn ('ssh-rsa');\n\telse if (key.type === 'ed25519')\n\t\treturn ('ssh-ed25519');\n\telse if (key.type === 'curve25519')\n\t\treturn ('ssh-curve25519');\n\telse if (key.type === 'ecdsa')\n\t\treturn ('ecdsa-sha2-' + key.part.curve.data.toString());\n\telse\n\t\tthrow (new Error('Unknown key type ' + key.type));\n}\n\nfunction read(partial, type, buf) {\n\tif (typeof (buf) === 'string')\n\t\tbuf = new Buffer(buf);\n\tassert.buffer(buf, 'buf');\n\n\tvar key = {};\n\n\tvar parts = key.parts = [];\n\tvar sshbuf = new SSHBuffer({buffer: buf});\n\n\tvar alg = sshbuf.readString();\n\tassert.ok(!sshbuf.atEnd(), 'key must have at least one part');\n\n\tkey.type = algToKeyType(alg);\n\n\tvar partCount = algs.info[key.type].parts.length;\n\tif (type && type === 'private')\n\t\tpartCount = algs.privInfo[key.type].parts.length;\n\n\twhile (!sshbuf.atEnd() && parts.length < partCount)\n\t\tparts.push(sshbuf.readPart());\n\twhile (!partial && !sshbuf.atEnd())\n\t\tparts.push(sshbuf.readPart());\n\n\tassert.ok(parts.length >= 1,\n\t    'key must have at least one part');\n\tassert.ok(partial || sshbuf.atEnd(),\n\t    'leftover bytes at end of key');\n\n\tvar Constructor = Key;\n\tvar algInfo = algs.info[key.type];\n\tif (type === 'private' || algInfo.parts.length !== parts.length) {\n\t\talgInfo = algs.privInfo[key.type];\n\t\tConstructor = PrivateKey;\n\t}\n\tassert.strictEqual(algInfo.parts.length, parts.length);\n\n\tif (key.type === 'ecdsa') {\n\t\tvar res = /^ecdsa-sha2-(.+)$/.exec(alg);\n\t\tassert.ok(res !== null);\n\t\tassert.strictEqual(res[1], parts[0].data.toString());\n\t}\n\n\tvar normalized = true;\n\tfor (var i = 0; i < algInfo.parts.length; ++i) {\n\t\tparts[i].name = algInfo.parts[i];\n\t\tif (parts[i].name !== 'curve' &&\n\t\t    algInfo.normalize !== false) {\n\t\t\tvar p = parts[i];\n\t\t\tvar nd = utils.mpNormalize(p.data);\n\t\t\tif (nd !== p.data) {\n\t\t\t\tp.data = nd;\n\t\t\t\tnormalized = false;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (normalized)\n\t\tkey._rfc4253Cache = sshbuf.toBuffer();\n\n\tif (partial && typeof (partial) === 'object') {\n\t\tpartial.remainder = sshbuf.remainder();\n\t\tpartial.consumed = sshbuf._offset;\n\t}\n\n\treturn (new Constructor(key));\n}\n\nfunction write(key) {\n\tassert.object(key);\n\n\tvar alg = keyTypeToAlg(key);\n\tvar i;\n\n\tvar algInfo = algs.info[key.type];\n\tif (PrivateKey.isPrivateKey(key))\n\t\talgInfo = algs.privInfo[key.type];\n\tvar parts = algInfo.parts;\n\n\tvar buf = new SSHBuffer({});\n\n\tbuf.writeString(alg);\n\n\tfor (i = 0; i < parts.length; ++i) {\n\t\tvar data = key.part[parts[i]].data;\n\t\tif (algInfo.normalize !== false)\n\t\t\tdata = utils.mpNormalize(data);\n\t\tbuf.writeBuffer(data);\n\t}\n\n\treturn (buf.toBuffer());\n}\n"]}