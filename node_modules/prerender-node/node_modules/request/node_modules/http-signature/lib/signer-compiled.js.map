{"version":3,"sources":["signer.js"],"names":[],"mappings":"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","file":"signer-compiled.js","sourcesContent":["// Copyright 2012 Joyent, Inc.  All rights reserved.\n\nvar assert = require('assert-plus');\nvar crypto = require('crypto');\nvar http = require('http');\nvar util = require('util');\nvar sshpk = require('sshpk');\nvar jsprim = require('jsprim');\nvar utils = require('./utils');\n\nvar sprintf = require('util').format;\n\nvar HASH_ALGOS = utils.HASH_ALGOS;\nvar PK_ALGOS = utils.PK_ALGOS;\nvar InvalidAlgorithmError = utils.InvalidAlgorithmError;\nvar HttpSignatureError = utils.HttpSignatureError;\nvar validateAlgorithm = utils.validateAlgorithm;\n\n///--- Globals\n\nvar AUTHZ_FMT =\n  'Signature keyId=\"%s\",algorithm=\"%s\",headers=\"%s\",signature=\"%s\"';\n\n///--- Specific Errors\n\nfunction MissingHeaderError(message) {\n  HttpSignatureError.call(this, message, MissingHeaderError);\n}\nutil.inherits(MissingHeaderError, HttpSignatureError);\n\nfunction StrictParsingError(message) {\n  HttpSignatureError.call(this, message, StrictParsingError);\n}\nutil.inherits(StrictParsingError, HttpSignatureError);\n\n/* See createSigner() */\nfunction RequestSigner(options) {\n  assert.object(options, 'options');\n\n  var alg = [];\n  if (options.algorithm !== undefined) {\n    assert.string(options.algorithm, 'options.algorithm');\n    alg = validateAlgorithm(options.algorithm);\n  }\n  this.rs_alg = alg;\n\n  /*\n   * RequestSigners come in two varieties: ones with an rs_signFunc, and ones\n   * with an rs_signer.\n   *\n   * rs_signFunc-based RequestSigners have to build up their entire signing\n   * string within the rs_lines array and give it to rs_signFunc as a single\n   * concat'd blob. rs_signer-based RequestSigners can add a line at a time to\n   * their signing state by using rs_signer.update(), thus only needing to\n   * buffer the hash function state and one line at a time.\n   */\n  if (options.sign !== undefined) {\n    assert.func(options.sign, 'options.sign');\n    this.rs_signFunc = options.sign;\n\n  } else if (alg[0] === 'hmac' && options.key !== undefined) {\n    assert.string(options.keyId, 'options.keyId');\n    this.rs_keyId = options.keyId;\n\n    if (typeof (options.key) !== 'string' && !Buffer.isBuffer(options.key))\n      throw (new TypeError('options.key for HMAC must be a string or Buffer'));\n\n    /*\n     * Make an rs_signer for HMACs, not a rs_signFunc -- HMACs digest their\n     * data in chunks rather than requiring it all to be given in one go\n     * at the end, so they are more similar to signers than signFuncs.\n     */\n    this.rs_signer = crypto.createHmac(alg[1].toUpperCase(), options.key);\n    this.rs_signer.sign = function () {\n      var digest = this.digest('base64');\n      return ({\n        hashAlgorithm: alg[1],\n        toString: function () { return (digest); }\n      });\n    };\n\n  } else if (options.key !== undefined) {\n    var key = options.key;\n    if (typeof (key) === 'string' || Buffer.isBuffer(key))\n      key = sshpk.parsePrivateKey(key);\n\n    assert.ok(sshpk.PrivateKey.isPrivateKey(key, [1, 2]),\n      'options.key must be a sshpk.PrivateKey');\n    this.rs_key = key;\n\n    assert.string(options.keyId, 'options.keyId');\n    this.rs_keyId = options.keyId;\n\n    if (!PK_ALGOS[key.type]) {\n      throw (new InvalidAlgorithmError(key.type.toUpperCase() + ' type ' +\n        'keys are not supported'));\n    }\n\n    if (alg[0] !== undefined && key.type !== alg[0]) {\n      throw (new InvalidAlgorithmError('options.key must be a ' +\n        alg[0].toUpperCase() + ' key, was given a ' +\n        key.type.toUpperCase() + ' key instead'));\n    }\n\n    this.rs_signer = key.createSign(alg[1]);\n\n  } else {\n    throw (new TypeError('options.sign (func) or options.key is required'));\n  }\n\n  this.rs_headers = [];\n  this.rs_lines = [];\n}\n\n/**\n * Adds a header to be signed, with its value, into this signer.\n *\n * @param {String} header\n * @param {String} value\n * @return {String} value written\n */\nRequestSigner.prototype.writeHeader = function (header, value) {\n  assert.string(header, 'header');\n  header = header.toLowerCase();\n  assert.string(value, 'value');\n\n  this.rs_headers.push(header);\n\n  if (this.rs_signFunc) {\n    this.rs_lines.push(header + ': ' + value);\n\n  } else {\n    var line = header + ': ' + value;\n    if (this.rs_headers.length > 0)\n      line = '\\n' + line;\n    this.rs_signer.update(line);\n  }\n\n  return (value);\n};\n\n/**\n * Adds a default Date header, returning its value.\n *\n * @return {String}\n */\nRequestSigner.prototype.writeDateHeader = function () {\n  return (this.writeHeader('date', jsprim.rfc1123(new Date())));\n};\n\n/**\n * Adds the request target line to be signed.\n *\n * @param {String} method, HTTP method (e.g. 'get', 'post', 'put')\n * @param {String} path\n */\nRequestSigner.prototype.writeTarget = function (method, path) {\n  assert.string(method, 'method');\n  assert.string(path, 'path');\n  method = method.toLowerCase();\n  this.writeHeader('(request-target)', method + ' ' + path);\n};\n\n/**\n * Calculate the value for the Authorization header on this request\n * asynchronously.\n *\n * @param {Func} callback (err, authz)\n */\nRequestSigner.prototype.sign = function (cb) {\n  assert.func(cb, 'callback');\n\n  if (this.rs_headers.length < 1)\n    throw (new Error('At least one header must be signed'));\n\n  var alg, authz;\n  if (this.rs_signFunc) {\n    var data = this.rs_lines.join('\\n');\n    var self = this;\n    this.rs_signFunc(data, function (err, sig) {\n      if (err) {\n        cb(err);\n        return;\n      }\n      try {\n        assert.object(sig, 'signature');\n        assert.string(sig.keyId, 'signature.keyId');\n        assert.string(sig.algorithm, 'signature.algorithm');\n        assert.string(sig.signature, 'signature.signature');\n        alg = validateAlgorithm(sig.algorithm);\n\n        authz = sprintf(AUTHZ_FMT,\n          sig.keyId,\n          sig.algorithm,\n          self.rs_headers.join(' '),\n          sig.signature);\n      } catch (e) {\n        cb(e);\n        return;\n      }\n      cb(null, authz);\n    });\n\n  } else {\n    try {\n      var sigObj = this.rs_signer.sign();\n    } catch (e) {\n      cb(e);\n      return;\n    }\n    alg = (this.rs_alg[0] || this.rs_key.type) + '-' + sigObj.hashAlgorithm;\n    var signature = sigObj.toString();\n    authz = sprintf(AUTHZ_FMT,\n      this.rs_keyId,\n      alg,\n      this.rs_headers.join(' '),\n      signature);\n    cb(null, authz);\n  }\n};\n\n///--- Exported API\n\nmodule.exports = {\n  /**\n   * Identifies whether a given object is a request signer or not.\n   *\n   * @param {Object} object, the object to identify\n   * @returns {Boolean}\n   */\n  isSigner: function (obj) {\n    if (typeof (obj) === 'object' && obj instanceof RequestSigner)\n      return (true);\n    return (false);\n  },\n\n  /**\n   * Creates a request signer, used to asynchronously build a signature\n   * for a request (does not have to be an http.ClientRequest).\n   *\n   * @param {Object} options, either:\n   *                   - {String} keyId\n   *                   - {String|Buffer} key\n   *                   - {String} algorithm (optional, required for HMAC)\n   *                 or:\n   *                   - {Func} sign (data, cb)\n   * @return {RequestSigner}\n   */\n  createSigner: function createSigner(options) {\n    return (new RequestSigner(options));\n  },\n\n  /**\n   * Adds an 'Authorization' header to an http.ClientRequest object.\n   *\n   * Note that this API will add a Date header if it's not already set. Any\n   * other headers in the options.headers array MUST be present, or this\n   * will throw.\n   *\n   * You shouldn't need to check the return type; it's just there if you want\n   * to be pedantic.\n   *\n   * The optional flag indicates whether parsing should use strict enforcement\n   * of the version draft-cavage-http-signatures-04 of the spec or beyond.\n   * The default is to be loose and support\n   * older versions for compatibility.\n   *\n   * @param {Object} request an instance of http.ClientRequest.\n   * @param {Object} options signing parameters object:\n   *                   - {String} keyId required.\n   *                   - {String} key required (either a PEM or HMAC key).\n   *                   - {Array} headers optional; defaults to ['date'].\n   *                   - {String} algorithm optional (unless key is HMAC);\n   *                              default is the same as the sshpk default\n   *                              signing algorithm for the type of key given\n   *                   - {String} httpVersion optional; defaults to '1.1'.\n   *                   - {Boolean} strict optional; defaults to 'false'.\n   * @return {Boolean} true if Authorization (and optionally Date) were added.\n   * @throws {TypeError} on bad parameter types (input).\n   * @throws {InvalidAlgorithmError} if algorithm was bad or incompatible with\n   *                                 the given key.\n   * @throws {sshpk.KeyParseError} if key was bad.\n   * @throws {MissingHeaderError} if a header to be signed was specified but\n   *                              was not present.\n   */\n  signRequest: function signRequest(request, options) {\n    assert.object(request, 'request');\n    assert.object(options, 'options');\n    assert.optionalString(options.algorithm, 'options.algorithm');\n    assert.string(options.keyId, 'options.keyId');\n    assert.optionalArrayOfString(options.headers, 'options.headers');\n    assert.optionalString(options.httpVersion, 'options.httpVersion');\n\n    if (!request.getHeader('Date'))\n      request.setHeader('Date', jsprim.rfc1123(new Date()));\n    if (!options.headers)\n      options.headers = ['date'];\n    if (!options.httpVersion)\n      options.httpVersion = '1.1';\n\n    var alg = [];\n    if (options.algorithm) {\n      options.algorithm = options.algorithm.toLowerCase();\n      alg = validateAlgorithm(options.algorithm);\n    }\n\n    var i;\n    var stringToSign = '';\n    for (i = 0; i < options.headers.length; i++) {\n      if (typeof (options.headers[i]) !== 'string')\n        throw new TypeError('options.headers must be an array of Strings');\n\n      var h = options.headers[i].toLowerCase();\n\n      if (h === 'request-line') {\n        if (!options.strict) {\n          /**\n           * We allow headers from the older spec drafts if strict parsing isn't\n           * specified in options.\n           */\n          stringToSign +=\n            request.method + ' ' + request.path + ' HTTP/' +\n            options.httpVersion;\n        } else {\n          /* Strict parsing doesn't allow older draft headers. */\n          throw (new StrictParsingError('request-line is not a valid header ' +\n            'with strict parsing enabled.'));\n        }\n      } else if (h === '(request-target)') {\n        stringToSign +=\n          '(request-target): ' + request.method.toLowerCase() + ' ' +\n          request.path;\n      } else {\n        var value = request.getHeader(h);\n        if (value === undefined || value === '') {\n          throw new MissingHeaderError(h + ' was not in the request');\n        }\n        stringToSign += h + ': ' + value;\n      }\n\n      if ((i + 1) < options.headers.length)\n        stringToSign += '\\n';\n    }\n\n    /* This is just for unit tests. */\n    if (request.hasOwnProperty('_stringToSign')) {\n      request._stringToSign = stringToSign;\n    }\n\n    var signature;\n    if (alg[0] === 'hmac') {\n      if (typeof (options.key) !== 'string' && !Buffer.isBuffer(options.key))\n        throw (new TypeError('options.key must be a string or Buffer'));\n\n      var hmac = crypto.createHmac(alg[1].toUpperCase(), options.key);\n      hmac.update(stringToSign);\n      signature = hmac.digest('base64');\n\n    } else {\n      var key = options.key;\n      if (typeof (key) === 'string' || Buffer.isBuffer(key))\n        key = sshpk.parsePrivateKey(options.key);\n\n      assert.ok(sshpk.PrivateKey.isPrivateKey(key, [1, 2]),\n        'options.key must be a sshpk.PrivateKey');\n\n      if (!PK_ALGOS[key.type]) {\n        throw (new InvalidAlgorithmError(key.type.toUpperCase() + ' type ' +\n          'keys are not supported'));\n      }\n\n      if (alg[0] !== undefined && key.type !== alg[0]) {\n        throw (new InvalidAlgorithmError('options.key must be a ' +\n          alg[0].toUpperCase() + ' key, was given a ' +\n          key.type.toUpperCase() + ' key instead'));\n      }\n\n      var signer = key.createSign(alg[1]);\n      signer.update(stringToSign);\n      var sigObj = signer.sign();\n      if (!HASH_ALGOS[sigObj.hashAlgorithm]) {\n        throw (new InvalidAlgorithmError(sigObj.hashAlgorithm.toUpperCase() +\n          ' is not a supported hash algorithm'));\n      }\n      options.algorithm = key.type + '-' + sigObj.hashAlgorithm;\n      signature = sigObj.toString();\n      assert.notStrictEqual(signature, '', 'empty signature produced');\n    }\n\n    request.setHeader('Authorization', sprintf(AUTHZ_FMT,\n                                               options.keyId,\n                                               options.algorithm,\n                                               options.headers.join(' '),\n                                               signature));\n\n    return true;\n  }\n\n};\n"]}