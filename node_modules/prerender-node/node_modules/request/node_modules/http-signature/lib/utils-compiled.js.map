{"version":3,"sources":["utils.js"],"names":[],"mappings":"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","file":"utils-compiled.js","sourcesContent":["// Copyright 2012 Joyent, Inc.  All rights reserved.\n\nvar assert = require('assert-plus');\nvar sshpk = require('sshpk');\nvar util = require('util');\n\nvar HASH_ALGOS = {\n  'sha1': true,\n  'sha256': true,\n  'sha512': true\n};\n\nvar PK_ALGOS = {\n  'rsa': true,\n  'dsa': true,\n  'ecdsa': true\n};\n\nfunction HttpSignatureError(message, caller) {\n  if (Error.captureStackTrace)\n    Error.captureStackTrace(this, caller || HttpSignatureError);\n\n  this.message = message;\n  this.name = caller.name;\n}\nutil.inherits(HttpSignatureError, Error);\n\nfunction InvalidAlgorithmError(message) {\n  HttpSignatureError.call(this, message, InvalidAlgorithmError);\n}\nutil.inherits(InvalidAlgorithmError, HttpSignatureError);\n\nfunction validateAlgorithm(algorithm) {\n  var alg = algorithm.toLowerCase().split('-');\n\n  if (alg.length !== 2) {\n    throw (new InvalidAlgorithmError(alg[0].toUpperCase() + ' is not a ' +\n      'valid algorithm'));\n  }\n\n  if (alg[0] !== 'hmac' && !PK_ALGOS[alg[0]]) {\n    throw (new InvalidAlgorithmError(alg[0].toUpperCase() + ' type keys ' +\n      'are not supported'));\n  }\n\n  if (!HASH_ALGOS[alg[1]]) {\n    throw (new InvalidAlgorithmError(alg[1].toUpperCase() + ' is not a ' +\n      'supported hash algorithm'));\n  }\n\n  return (alg);\n}\n\n///--- API\n\nmodule.exports = {\n\n  HASH_ALGOS: HASH_ALGOS,\n  PK_ALGOS: PK_ALGOS,\n\n  HttpSignatureError: HttpSignatureError,\n  InvalidAlgorithmError: InvalidAlgorithmError,\n\n  validateAlgorithm: validateAlgorithm,\n\n  /**\n   * Converts an OpenSSH public key (rsa only) to a PKCS#8 PEM file.\n   *\n   * The intent of this module is to interoperate with OpenSSL only,\n   * specifically the node crypto module's `verify` method.\n   *\n   * @param {String} key an OpenSSH public key.\n   * @return {String} PEM encoded form of the RSA public key.\n   * @throws {TypeError} on bad input.\n   * @throws {Error} on invalid ssh key formatted data.\n   */\n  sshKeyToPEM: function sshKeyToPEM(key) {\n    assert.string(key, 'ssh_key');\n\n    var k = sshpk.parseKey(key, 'ssh');\n    return (k.toString('pem'));\n  },\n\n\n  /**\n   * Generates an OpenSSH fingerprint from an ssh public key.\n   *\n   * @param {String} key an OpenSSH public key.\n   * @return {String} key fingerprint.\n   * @throws {TypeError} on bad input.\n   * @throws {Error} if what you passed doesn't look like an ssh public key.\n   */\n  fingerprint: function fingerprint(key) {\n    assert.string(key, 'ssh_key');\n\n    var k = sshpk.parseKey(key, 'ssh');\n    return (k.fingerprint('md5').toString('hex'));\n  },\n\n  /**\n   * Converts a PKGCS#8 PEM file to an OpenSSH public key (rsa)\n   *\n   * The reverse of the above function.\n   */\n  pemToRsaSSHKey: function pemToRsaSSHKey(pem, comment) {\n    assert.equal('string', typeof (pem), 'typeof pem');\n\n    var k = sshpk.parseKey(pem, 'pem');\n    k.comment = comment;\n    return (k.toString('ssh'));\n  }\n};\n"]}