{"version":3,"sources":["har-validator"],"names":[],"mappings":";;AAEA,YAAY,CAAA;;AAEZ,IAAI,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,CAAA;AAC5B,IAAI,GAAG,GAAG,OAAO,CAAC,WAAW,CAAC,CAAA;AAC9B,IAAI,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,CAAA;AACtB,IAAI,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAA;AAC1B,IAAI,GAAG,GAAG,OAAO,CAAC,iBAAiB,CAAC,CAAA;AACpC,IAAI,OAAO,GAAG,OAAO,CAAC,gBAAgB,CAAC,CAAA;AACvC,IAAI,QAAQ,GAAG,OAAO,CAAC,IAAI,CAAC,CAAA;AAC5B,IAAI,eAAe,GAAG,OAAO,CAAC,cAAc,CAAC,CAAA;;AAE7C,GAAG,CACA,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CACpB,KAAK,CAAC,uBAAuB,CAAC,CAC9B,MAAM,CAAC,qBAAqB,EAAE,wDAAwD,CAAC,CACvF,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAA;;AAEtB,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,EAAE;AACpB,KAAG,CAAC,IAAI,EAAE,CAAA;CACX;;AAED,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,UAAU,QAAQ,EAAE;AAC/B,MAAI,IAAI,GAAG,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAA;;AAEvD,MAAI,OAAO,CAAC,UAAU,OAAO,EAAE,MAAM,EAAE;AACrC,MAAE,CAAC,QAAQ,CAAC,QAAQ,EAAE,UAAU,GAAG,EAAE,IAAI,EAAE;AACzC,aAAO,GAAG,KAAK,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC,GAAG,CAAC,CAAA;KAClD,CAAC,CAAA;GACH,CAAC,CAEC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAEhB,IAAI,CAAC,GAAG,CAAC,MAAM,GAAG,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,QAAQ,CAAC,CAElD,IAAI,CAAC,UAAU,IAAI,EAAE;AACpB,WAAO,CAAC,GAAG,CAAC,kBAAkB,EAAE,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,CAAA;GACxD,CAAC,SAEI,CAAC,UAAU,GAAG,EAAE;AACpB,QAAI,GAAG,YAAY,WAAW,EAAE;AAC9B,aAAO,OAAO,CAAC,KAAK,CAAC,iCAAiC,EAAE,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAA;KACtG;;AAED,QAAI,GAAG,YAAY,eAAe,EAAE;AAClC,SAAG,CAAC,MAAM,CAAC,OAAO,CAAC,UAAU,OAAO,EAAE;AACpC,eAAO,CAAC,KAAK,CAAC,wCAAwC,EAAE,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAA;OACjL,CAAC,CAAA;;AAEF,aAAM;KACP;;AAED,WAAO,CAAC,KAAK,CAAC,0CAA0C,EAAE,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAA;GACxG,CAAC,CAAA;CACL,CAAC,CAAA","file":"har-validator-compiled.js","sourcesContent":["#!/usr/bin/env node\n\n'use strict'\n\nvar chalk = require('chalk')\nvar cmd = require('commander')\nvar fs = require('fs')\nvar path = require('path')\nvar pkg = require('../package.json')\nvar Promise = require('pinkie-promise')\nvar validate = require('..')\nvar ValidationError = require('../lib/error')\n\ncmd\n  .version(pkg.version)\n  .usage('[options] <files ...>')\n  .option('-s, --schema [name]', 'validate schema name (log, request, response, etc ...)')\n  .parse(process.argv)\n\nif (!cmd.args.length) {\n  cmd.help()\n}\n\ncmd.args.map(function (fileName) {\n  var file = chalk.yellow.italic(path.basename(fileName))\n\n  new Promise(function (resolve, reject) {\n    fs.readFile(fileName, function (err, data) {\n      return err === null ? resolve(data) : reject(err)\n    })\n  })\n\n    .then(JSON.parse)\n\n    .then(cmd.schema ? validate[cmd.schema] : validate)\n\n    .then(function (data) {\n      console.log('%s [%s] is valid', chalk.green('✓'), file)\n    })\n\n    .catch(function (err) {\n      if (err instanceof SyntaxError) {\n        return console.error('%s [%s] failed to read JSON: %s', chalk.red('✖'), file, chalk.red(err.message))\n      }\n\n      if (err instanceof ValidationError) {\n        err.errors.forEach(function (details) {\n          console.error('%s [%s] failed validation: (%s: %s) %s', chalk.red('✖'), file, chalk.cyan.italic(details.field), chalk.magenta.italic(details.value), chalk.red(details.message))\n        })\n\n        return\n      }\n\n      console.error('%s [%s] an unknown error has occured: %s', chalk.red('✖'), file, chalk.red(err.message))\n    })\n})\n"]}