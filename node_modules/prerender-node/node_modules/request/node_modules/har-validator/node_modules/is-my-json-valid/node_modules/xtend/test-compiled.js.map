{"version":3,"sources":["test.js"],"names":[],"mappings":";;AAAA,IAAI,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAA;AAC1B,IAAI,MAAM,GAAG,OAAO,CAAC,IAAI,CAAC,CAAA;AAC1B,IAAI,aAAa,GAAG,OAAO,CAAC,WAAW,CAAC,CAAA;;AAExC,IAAI,CAAC,OAAO,EAAE,UAAS,MAAM,EAAE;AAC3B,QAAI,CAAC,GAAG,EAAE,CAAC,EAAE,KAAK,EAAE,CAAA;AACpB,QAAI,CAAC,GAAG,EAAE,CAAC,EAAE,KAAK,EAAE,CAAA;;AAEpB,UAAM,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,CAAA;AACtD,UAAM,CAAC,GAAG,EAAE,CAAA;CACf,CAAC,CAAA;;AAEF,IAAI,CAAC,SAAS,EAAE,UAAS,MAAM,EAAE;AAC7B,QAAI,CAAC,GAAG,EAAE,CAAC,EAAE,KAAK,EAAE,CAAA;AACpB,QAAI,CAAC,GAAG,EAAE,CAAC,EAAE,KAAK,EAAE,CAAA;;AAEpB,UAAM,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,CAAA;AAC5C,UAAM,CAAC,GAAG,EAAE,CAAA;CACf,CAAC,CAAA;;AAEF,IAAI,CAAC,WAAW,EAAE,UAAS,MAAM,EAAE;AAC/B,QAAI,CAAC,GAAG,EAAE,CAAC,EAAE,SAAS,EAAE,CAAA;AACxB,QAAI,CAAC,GAAG,EAAE,CAAC,EAAE,KAAK,EAAE,CAAA;;AAEpB,UAAM,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,SAAS,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,CAAA;AAC1D,UAAM,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,SAAS,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,CAAA;AAC1D,UAAM,CAAC,GAAG,EAAE,CAAA;CACf,CAAC,CAAA;;AAEF,IAAI,CAAC,UAAU,EAAE,UAAS,MAAM,EAAE;AAC9B,QAAI,CAAC,GAAG,EAAE,CAAC,EAAE,SAAS,EAAE,CAAA;AACxB,QAAI,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAA;;AAEhB,UAAM,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAA;AACxC,UAAM,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,SAAS,EAAE,CAAC,CAAA;AAChD,UAAM,CAAC,GAAG,EAAE,CAAA;CACf,CAAC,CAAA;;AAEF,IAAI,CAAC,cAAc,EAAE,UAAU,MAAM,EAAE;AACnC,QAAI,MAAM,GAAG,EAAE,CAAA;;AAEf,UAAM,CAAC,MAAM,EAAE,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,CAAA;AAC9B,UAAM,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,EAAE,SAAS,CAAC,CAAA;AACnC,UAAM,CAAC,GAAG,EAAE,CAAA;CACf,CAAC,CAAA;;AAEF,IAAI,CAAC,kBAAkB,EAAE,UAAU,MAAM,EAAE;AACvC,QAAI,CAAC,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,CAAA;AACtB,QAAI,CAAC,GAAG,IAAI,CAAA;AACZ,QAAI,CAAC,GAAG,KAAK,CAAC,CAAA;;AAEd,UAAM,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,CAAA;AACjD,UAAM,CAAC,GAAG,EAAE,CAAA;CACf,CAAC,CAAA;;AAEF,IAAI,CAAC,SAAS,EAAE,UAAU,MAAM,EAAE;AAC9B,QAAI,CAAC,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,CAAA;;AAEtB,iBAAa,CAAC,CAAC,EAAE,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,CAAA;;AAEhC,UAAM,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,EAAE,KAAK,CAAC,CAAA;AAC1B,UAAM,CAAC,GAAG,EAAE,CAAA;CACf,CAAC,CAAA;;AAEF,IAAI,CAAC,gBAAgB,EAAE,UAAS,MAAM,EAAE;AACpC,QAAI,CAAC,GAAG,EAAE,CAAC,EAAE,KAAK,EAAE,CAAA;AACpB,QAAI,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAA;AAC3B,KAAC,CAAC,CAAC,GAAG,KAAK,CAAC;;AAEZ,UAAM,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,CAAA;AACtD,UAAM,CAAC,GAAG,EAAE,CAAA;CACf,CAAC,CAAA;;AAEF,IAAI,CAAC,wBAAwB,EAAE,UAAU,MAAM,EAAE;AAC7C,QAAI,CAAC,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,CAAA;AACtB,QAAI,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAA;AAC3B,KAAC,CAAC,GAAG,GAAG,KAAK,CAAC;;AAEd,iBAAa,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;;AAEnB,UAAM,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,EAAE,KAAK,CAAC,CAAA;AAC1B,UAAM,CAAC,GAAG,EAAE,CAAA;CACf,CAAC,CAAA","file":"test-compiled.js","sourcesContent":["var test = require(\"tape\")\nvar extend = require(\"./\")\nvar mutableExtend = require(\"./mutable\")\n\ntest(\"merge\", function(assert) {\n    var a = { a: \"foo\" }\n    var b = { b: \"bar\" }\n\n    assert.deepEqual(extend(a, b), { a: \"foo\", b: \"bar\" })\n    assert.end()\n})\n\ntest(\"replace\", function(assert) {\n    var a = { a: \"foo\" }\n    var b = { a: \"bar\" }\n\n    assert.deepEqual(extend(a, b), { a: \"bar\" })\n    assert.end()\n})\n\ntest(\"undefined\", function(assert) {\n    var a = { a: undefined }\n    var b = { b: \"foo\" }\n\n    assert.deepEqual(extend(a, b), { a: undefined, b: \"foo\" })\n    assert.deepEqual(extend(b, a), { a: undefined, b: \"foo\" })\n    assert.end()\n})\n\ntest(\"handle 0\", function(assert) {\n    var a = { a: \"default\" }\n    var b = { a: 0 }\n\n    assert.deepEqual(extend(a, b), { a: 0 })\n    assert.deepEqual(extend(b, a), { a: \"default\" })\n    assert.end()\n})\n\ntest(\"is immutable\", function (assert) {\n    var record = {}\n\n    extend(record, { foo: \"bar\" })\n    assert.equal(record.foo, undefined)\n    assert.end()\n})\n\ntest(\"null as argument\", function (assert) {\n    var a = { foo: \"bar\" }\n    var b = null\n    var c = void 0\n\n    assert.deepEqual(extend(b, a, c), { foo: \"bar\" })\n    assert.end()\n})\n\ntest(\"mutable\", function (assert) {\n    var a = { foo: \"bar\" }\n\n    mutableExtend(a, { bar: \"baz\" })\n\n    assert.equal(a.bar, \"baz\")\n    assert.end()\n})\n\ntest(\"null prototype\", function(assert) {\n    var a = { a: \"foo\" }\n    var b = Object.create(null)\n    b.b = \"bar\";\n\n    assert.deepEqual(extend(a, b), { a: \"foo\", b: \"bar\" })\n    assert.end()\n})\n\ntest(\"null prototype mutable\", function (assert) {\n    var a = { foo: \"bar\" }\n    var b = Object.create(null)\n    b.bar = \"baz\";\n\n    mutableExtend(a, b)\n\n    assert.equal(a.bar, \"baz\")\n    assert.end()\n})\n"]}