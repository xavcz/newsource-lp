{"version":3,"sources":["index.js"],"names":[],"mappings":";;AAAA,IAAI,WAAW,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC;AAC3C,IAAI,KAAK,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;;AAE/B,IAAI,OAAO,GAAG,EAAE,CAAC;;AAEjB,IAAI,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;;AAEtC,SAAS,OAAO,CAAC,EAAE,EAAE;AACpB,KAAI,SAAS,GAAG,SAAZ,SAAS,CAAa,IAAI,EAAE;AAC/B,MAAI,IAAI,KAAK,SAAS,IAAI,IAAI,KAAK,IAAI,EAAE;AACxC,UAAO,IAAI,CAAC;GACZ;;AAED,MAAI,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE;AACzB,OAAI,GAAG,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;GAC7C;;AAED,SAAO,EAAE,CAAC,IAAI,CAAC,CAAC;EAChB,CAAC;;;AAGF,KAAI,YAAY,IAAI,EAAE,EAAE;AACvB,WAAS,CAAC,UAAU,GAAG,EAAE,CAAC,UAAU,CAAC;EACrC;;AAED,QAAO,SAAS,CAAC;CACjB;;AAED,SAAS,WAAW,CAAC,EAAE,EAAE;AACxB,KAAI,SAAS,GAAG,SAAZ,SAAS,CAAa,IAAI,EAAE;AAC/B,MAAI,IAAI,KAAK,SAAS,IAAI,IAAI,KAAK,IAAI,EAAE;AACxC,UAAO,IAAI,CAAC;GACZ;;AAED,MAAI,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE;AACzB,OAAI,GAAG,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;GAC7C;;AAED,MAAI,MAAM,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC;;;;;AAKtB,MAAI,OAAO,MAAM,KAAK,QAAQ,EAAE;AAC/B,QAAK,IAAI,GAAG,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;AAClD,UAAM,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;IAClC;GACD;;AAED,SAAO,MAAM,CAAC;EACd,CAAC;;;AAGF,KAAI,YAAY,IAAI,EAAE,EAAE;AACvB,WAAS,CAAC,UAAU,GAAG,EAAE,CAAC,UAAU,CAAC;EACrC;;AAED,QAAO,SAAS,CAAC;CACjB;;AAED,MAAM,CAAC,OAAO,CAAC,UAAU,SAAS,EAAE;AACnC,QAAO,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC;;AAExB,KAAI,MAAM,GAAG,KAAK,CAAC,SAAS,CAAC,CAAC;AAC9B,KAAI,WAAW,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;;AAEtC,YAAW,CAAC,OAAO,CAAC,UAAU,OAAO,EAAE;AACtC,MAAI,EAAE,GAAG,MAAM,CAAC,OAAO,CAAC,CAAC;;AAEzB,SAAO,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,GAAG,WAAW,CAAC,EAAE,CAAC,CAAC;AAC9C,SAAO,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,GAAG,OAAO,CAAC,EAAE,CAAC,CAAC;EAC9C,CAAC,CAAC;CACH,CAAC,CAAC;;AAEH,MAAM,CAAC,OAAO,GAAG,OAAO,CAAC","file":"index-compiled.js","sourcesContent":["var conversions = require('./conversions');\nvar route = require('./route');\n\nvar convert = {};\n\nvar models = Object.keys(conversions);\n\nfunction wrapRaw(fn) {\n\tvar wrappedFn = function (args) {\n\t\tif (args === undefined || args === null) {\n\t\t\treturn args;\n\t\t}\n\n\t\tif (arguments.length > 1) {\n\t\t\targs = Array.prototype.slice.call(arguments);\n\t\t}\n\n\t\treturn fn(args);\n\t};\n\n\t// preserve .conversion property if there is one\n\tif ('conversion' in fn) {\n\t\twrappedFn.conversion = fn.conversion;\n\t}\n\n\treturn wrappedFn;\n}\n\nfunction wrapRounded(fn) {\n\tvar wrappedFn = function (args) {\n\t\tif (args === undefined || args === null) {\n\t\t\treturn args;\n\t\t}\n\n\t\tif (arguments.length > 1) {\n\t\t\targs = Array.prototype.slice.call(arguments);\n\t\t}\n\n\t\tvar result = fn(args);\n\n\t\t// we're assuming the result is an array here.\n\t\t// see notice in conversions.js; don't use box types\n\t\t// in conversion functions.\n\t\tif (typeof result === 'object') {\n\t\t\tfor (var len = result.length, i = 0; i < len; i++) {\n\t\t\t\tresult[i] = Math.round(result[i]);\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t};\n\n\t// preserve .conversion property if there is one\n\tif ('conversion' in fn) {\n\t\twrappedFn.conversion = fn.conversion;\n\t}\n\n\treturn wrappedFn;\n}\n\nmodels.forEach(function (fromModel) {\n\tconvert[fromModel] = {};\n\n\tvar routes = route(fromModel);\n\tvar routeModels = Object.keys(routes);\n\n\trouteModels.forEach(function (toModel) {\n\t\tvar fn = routes[toModel];\n\n\t\tconvert[fromModel][toModel] = wrapRounded(fn);\n\t\tconvert[fromModel][toModel].raw = wrapRaw(fn);\n\t});\n});\n\nmodule.exports = convert;\n"]}