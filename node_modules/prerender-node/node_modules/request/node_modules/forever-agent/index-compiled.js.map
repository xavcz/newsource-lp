{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index-compiled.js","sourcesContent":["module.exports = ForeverAgent\nForeverAgent.SSL = ForeverAgentSSL\n\nvar util = require('util')\n  , Agent = require('http').Agent\n  , net = require('net')\n  , tls = require('tls')\n  , AgentSSL = require('https').Agent\n  \nfunction getConnectionName(host, port) {  \n  var name = ''\n  if (typeof host === 'string') {\n    name = host + ':' + port\n  } else {\n    // For node.js v012.0 and iojs-v1.5.1, host is an object. And any existing localAddress is part of the connection name.\n    name = host.host + ':' + host.port + ':' + (host.localAddress ? (host.localAddress + ':') : ':')\n  }\n  return name\n}    \n\nfunction ForeverAgent(options) {\n  var self = this\n  self.options = options || {}\n  self.requests = {}\n  self.sockets = {}\n  self.freeSockets = {}\n  self.maxSockets = self.options.maxSockets || Agent.defaultMaxSockets\n  self.minSockets = self.options.minSockets || ForeverAgent.defaultMinSockets\n  self.on('free', function(socket, host, port) {\n    var name = getConnectionName(host, port)\n\n    if (self.requests[name] && self.requests[name].length) {\n      self.requests[name].shift().onSocket(socket)\n    } else if (self.sockets[name].length < self.minSockets) {\n      if (!self.freeSockets[name]) self.freeSockets[name] = []\n      self.freeSockets[name].push(socket)\n      \n      // if an error happens while we don't use the socket anyway, meh, throw the socket away\n      var onIdleError = function() {\n        socket.destroy()\n      }\n      socket._onIdleError = onIdleError\n      socket.on('error', onIdleError)\n    } else {\n      // If there are no pending requests just destroy the\n      // socket and it will get removed from the pool. This\n      // gets us out of timeout issues and allows us to\n      // default to Connection:keep-alive.\n      socket.destroy()\n    }\n  })\n\n}\nutil.inherits(ForeverAgent, Agent)\n\nForeverAgent.defaultMinSockets = 5\n\n\nForeverAgent.prototype.createConnection = net.createConnection\nForeverAgent.prototype.addRequestNoreuse = Agent.prototype.addRequest\nForeverAgent.prototype.addRequest = function(req, host, port) {\n  var name = getConnectionName(host, port)\n  \n  if (typeof host !== 'string') {\n    var options = host\n    port = options.port\n    host = options.host\n  }\n\n  if (this.freeSockets[name] && this.freeSockets[name].length > 0 && !req.useChunkedEncodingByDefault) {\n    var idleSocket = this.freeSockets[name].pop()\n    idleSocket.removeListener('error', idleSocket._onIdleError)\n    delete idleSocket._onIdleError\n    req._reusedSocket = true\n    req.onSocket(idleSocket)\n  } else {\n    this.addRequestNoreuse(req, host, port)\n  }\n}\n\nForeverAgent.prototype.removeSocket = function(s, name, host, port) {\n  if (this.sockets[name]) {\n    var index = this.sockets[name].indexOf(s)\n    if (index !== -1) {\n      this.sockets[name].splice(index, 1)\n    }\n  } else if (this.sockets[name] && this.sockets[name].length === 0) {\n    // don't leak\n    delete this.sockets[name]\n    delete this.requests[name]\n  }\n  \n  if (this.freeSockets[name]) {\n    var index = this.freeSockets[name].indexOf(s)\n    if (index !== -1) {\n      this.freeSockets[name].splice(index, 1)\n      if (this.freeSockets[name].length === 0) {\n        delete this.freeSockets[name]\n      }\n    }\n  }\n\n  if (this.requests[name] && this.requests[name].length) {\n    // If we have pending requests and a socket gets closed a new one\n    // needs to be created to take over in the pool for the one that closed.\n    this.createSocket(name, host, port).emit('free')\n  }\n}\n\nfunction ForeverAgentSSL (options) {\n  ForeverAgent.call(this, options)\n}\nutil.inherits(ForeverAgentSSL, ForeverAgent)\n\nForeverAgentSSL.prototype.createConnection = createConnectionSSL\nForeverAgentSSL.prototype.addRequestNoreuse = AgentSSL.prototype.addRequest\n\nfunction createConnectionSSL (port, host, options) {\n  if (typeof port === 'object') {\n    options = port;\n  } else if (typeof host === 'object') {\n    options = host;\n  } else if (typeof options === 'object') {\n    options = options;\n  } else {\n    options = {};\n  }\n\n  if (typeof port === 'number') {\n    options.port = port;\n  }\n\n  if (typeof host === 'string') {\n    options.host = host;\n  }\n\n  return tls.connect(options);\n}\n"]}