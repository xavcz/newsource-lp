{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index-compiled.js","sourcesContent":["/*!\n * mime-types\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar db = require('mime-db')\nvar extname = require('path').extname\n\n/**\n * Module variables.\n * @private\n */\n\nvar extractTypeRegExp = /^\\s*([^;\\s]*)(?:;|\\s|$)/\nvar textTypeRegExp = /^text\\//i\n\n/**\n * Module exports.\n * @public\n */\n\nexports.charset = charset\nexports.charsets = { lookup: charset }\nexports.contentType = contentType\nexports.extension = extension\nexports.extensions = Object.create(null)\nexports.lookup = lookup\nexports.types = Object.create(null)\n\n// Populate the extensions/types maps\npopulateMaps(exports.extensions, exports.types)\n\n/**\n * Get the default charset for a MIME type.\n *\n * @param {string} type\n * @return {boolean|string}\n */\n\nfunction charset(type) {\n  if (!type || typeof type !== 'string') {\n    return false\n  }\n\n  // TODO: use media-typer\n  var match = extractTypeRegExp.exec(type)\n  var mime = match && db[match[1].toLowerCase()]\n\n  if (mime && mime.charset) {\n    return mime.charset\n  }\n\n  // default text/* to utf-8\n  if (match && textTypeRegExp.test(match[1])) {\n    return 'UTF-8'\n  }\n\n  return false\n}\n\n/**\n * Create a full Content-Type header given a MIME type or extension.\n *\n * @param {string} str\n * @return {boolean|string}\n */\n\nfunction contentType(str) {\n  // TODO: should this even be in this module?\n  if (!str || typeof str !== 'string') {\n    return false\n  }\n\n  var mime = str.indexOf('/') === -1\n    ? exports.lookup(str)\n    : str\n\n  if (!mime) {\n    return false\n  }\n\n  // TODO: use content-type or other module\n  if (mime.indexOf('charset') === -1) {\n    var charset = exports.charset(mime)\n    if (charset) mime += '; charset=' + charset.toLowerCase()\n  }\n\n  return mime\n}\n\n/**\n * Get the default extension for a MIME type.\n *\n * @param {string} type\n * @return {boolean|string}\n */\n\nfunction extension(type) {\n  if (!type || typeof type !== 'string') {\n    return false\n  }\n\n  // TODO: use media-typer\n  var match = extractTypeRegExp.exec(type)\n\n  // get extensions\n  var exts = match && exports.extensions[match[1].toLowerCase()]\n\n  if (!exts || !exts.length) {\n    return false\n  }\n\n  return exts[0]\n}\n\n/**\n * Lookup the MIME type for a file path/extension.\n *\n * @param {string} path\n * @return {boolean|string}\n */\n\nfunction lookup(path) {\n  if (!path || typeof path !== 'string') {\n    return false\n  }\n\n  // get the extension (\"ext\" or \".ext\" or full path)\n  var extension = extname('x.' + path)\n    .toLowerCase()\n    .substr(1)\n\n  if (!extension) {\n    return false\n  }\n\n  return exports.types[extension] || false\n}\n\n/**\n * Populate the extensions and types maps.\n * @private\n */\n\nfunction populateMaps(extensions, types) {\n  // source preference (least -> most)\n  var preference = ['nginx', 'apache', undefined, 'iana']\n\n  Object.keys(db).forEach(function forEachMimeType(type) {\n    var mime = db[type]\n    var exts = mime.extensions\n\n    if (!exts || !exts.length) {\n      return\n    }\n\n    // mime -> extensions\n    extensions[type] = exts\n\n    // extension -> mime\n    for (var i = 0; i < exts.length; i++) {\n      var extension = exts[i]\n\n      if (types[extension]) {\n        var from = preference.indexOf(db[types[extension]].source)\n        var to = preference.indexOf(mime.source)\n\n        if (types[extension] !== 'application/octet-stream'\n          && from > to || (from === to && types[extension].substr(0, 12) === 'application/')) {\n          // skip the remapping\n          continue\n        }\n      }\n\n      // set the extension -> mime\n      types[extension] = type\n    }\n  })\n}\n"]}