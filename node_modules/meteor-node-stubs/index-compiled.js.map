{"version":3,"sources":["index.js"],"names":[],"mappings":";;AAAA,IAAI,GAAG,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC;AAChC,IAAI,aAAa,GAAG,EAAE,CAAC;;AAEvB,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,UAAU,EAAE,EAAE;AACrC,MAAI,OAAO,GAAG,CAAC,EAAE,CAAC,KAAK,QAAQ,EAAE;AAC/B,QAAI;AACF,aAAO,CAAC,EAAE,CAAC,GAAG,aAAa,CAAC,EAAE,GAAG,KAAK,CAAC,GACrC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;KAC5B,CAAC,OAAO,CAAC,EAAE;;;KAGX;GACF,MAAM;AACL,aAAO,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,EAAE,CAAC,CAAC;AACtB,mBAAa,CAAC,EAAE,GAAG,KAAK,CAAC,GAAG,YAAU,EAAE,CAAC;KAC1C;CACF,CAAC,CAAC;;AAEH,IAAI,OAAO,aAAa,KAAK,UAAU,EAAE;AACvC,eAAa,CAAC;;;;AAIZ,QAAI,EAAE;AACJ,kBAAY,EAAE,aAAa;KAC5B;GACF,CAAC,CAAC;CACJ","file":"index-compiled.js","sourcesContent":["var map = require(\"./map.json\");\nvar meteorAliases = {};\n\nObject.keys(map).forEach(function (id) {\n  if (typeof map[id] === \"string\") {\n    try {\n      exports[id] = meteorAliases[id + \".js\"] =\n        require.resolve(map[id]);\n    } catch (e) {\n      // Resolution can fail at runtime if the stub was not included in the\n      // bundle because nothing depended on it.\n    }\n  } else {\n    exports[id] = map[id];\n    meteorAliases[id + \".js\"] = function(){};\n  }\n});\n\nif (typeof meteorInstall === \"function\") {\n  meteorInstall({\n    // Install the aliases into a node_modules directory one level up from\n    // the root directory, so that they do not clutter the namespace\n    // available to apps and packages.\n    \"..\": {\n      node_modules: meteorAliases\n    }\n  });\n}\n"]}