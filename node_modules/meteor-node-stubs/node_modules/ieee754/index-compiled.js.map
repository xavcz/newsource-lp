{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index-compiled.js","sourcesContent":["exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = (value * c - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n"]}