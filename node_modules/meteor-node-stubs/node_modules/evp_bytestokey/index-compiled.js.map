{"version":3,"sources":["index.js"],"names":[],"mappings":";;AAAA,IAAI,GAAG,GAAG,OAAO,CAAC,iBAAiB,CAAC,CAAA;AACpC,MAAM,CAAC,OAAO,GAAG,cAAc,CAAA;AAC/B,SAAS,cAAc,CAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE;AACtD,MAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE;AAC9B,YAAQ,GAAG,IAAI,MAAM,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAA;GAC1C;AACD,MAAI,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;AAClC,QAAI,GAAG,IAAI,MAAM,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAA;GAClC;AACD,QAAM,GAAG,MAAM,GAAG,CAAC,CAAA;AACnB,OAAK,GAAG,KAAK,IAAI,CAAC,CAAA;AAClB,MAAI,EAAE,GAAG,CAAC,CAAA;AACV,MAAI,EAAE,GAAG,CAAC,CAAA;AACV,MAAI,GAAG,GAAG,IAAI,MAAM,CAAC,MAAM,CAAC,CAAA;AAC5B,MAAI,EAAE,GAAG,IAAI,MAAM,CAAC,KAAK,CAAC,CAAA;AAC1B,MAAI,KAAK,GAAG,CAAC,CAAA;AACb,MAAI,MAAM,CAAA;AACV,MAAI,CAAC,CAAA;AACL,MAAI,IAAI,GAAG,EAAE,CAAA;AACb,SAAO,IAAI,EAAE;AACX,QAAI,KAAK,EAAE,GAAG,CAAC,EAAE;AACf,UAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;KAClB;AACD,QAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;AACnB,QAAI,IAAI,EAAE;AACR,UAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;KAChB;AACD,UAAM,GAAG,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAA;AACjC,QAAI,GAAG,EAAE,CAAA;AACT,KAAC,GAAG,CAAC,CAAA;AACL,QAAI,MAAM,GAAG,CAAC,EAAE;AACd,aAAO,IAAI,EAAE;AACX,YAAI,MAAM,KAAK,CAAC,EAAE;AAChB,gBAAK;SACN;AACD,YAAI,CAAC,KAAK,MAAM,CAAC,MAAM,EAAE;AACvB,gBAAK;SACN;AACD,WAAG,CAAC,EAAE,EAAE,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAA;AACrB,cAAM,EAAE,CAAA;AACR,SAAC,EAAE,CAAA;OACJ;KACF;AACD,QAAI,KAAK,GAAG,CAAC,IAAI,CAAC,KAAK,MAAM,CAAC,MAAM,EAAE;AACpC,aAAO,IAAI,EAAE;AACX,YAAI,KAAK,KAAK,CAAC,EAAE;AACf,gBAAK;SACN;AACD,YAAI,CAAC,KAAK,MAAM,CAAC,MAAM,EAAE;AACvB,gBAAK;SACN;AACD,UAAE,CAAC,EAAE,EAAE,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAA;AACpB,aAAK,EAAE,CAAA;AACP,SAAC,EAAE,CAAA;OACJ;KACF;AACD,QAAI,MAAM,KAAK,CAAC,IAAI,KAAK,KAAK,CAAC,EAAE;AAC/B,YAAK;KACN;GACF;AACD,OAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AAClC,UAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAAA;GACd;AACD,SAAO;AACL,OAAG,EAAE,GAAG;AACR,MAAE,EAAE,EAAE;GACP,CAAA;CACF","file":"index-compiled.js","sourcesContent":["var md5 = require('create-hash/md5')\nmodule.exports = EVP_BytesToKey\nfunction EVP_BytesToKey (password, salt, keyLen, ivLen) {\n  if (!Buffer.isBuffer(password)) {\n    password = new Buffer(password, 'binary')\n  }\n  if (salt && !Buffer.isBuffer(salt)) {\n    salt = new Buffer(salt, 'binary')\n  }\n  keyLen = keyLen / 8\n  ivLen = ivLen || 0\n  var ki = 0\n  var ii = 0\n  var key = new Buffer(keyLen)\n  var iv = new Buffer(ivLen)\n  var addmd = 0\n  var md_buf\n  var i\n  var bufs = []\n  while (true) {\n    if (addmd++ > 0) {\n      bufs.push(md_buf)\n    }\n    bufs.push(password)\n    if (salt) {\n      bufs.push(salt)\n    }\n    md_buf = md5(Buffer.concat(bufs))\n    bufs = []\n    i = 0\n    if (keyLen > 0) {\n      while (true) {\n        if (keyLen === 0) {\n          break\n        }\n        if (i === md_buf.length) {\n          break\n        }\n        key[ki++] = md_buf[i]\n        keyLen--\n        i++\n      }\n    }\n    if (ivLen > 0 && i !== md_buf.length) {\n      while (true) {\n        if (ivLen === 0) {\n          break\n        }\n        if (i === md_buf.length) {\n          break\n        }\n        iv[ii++] = md_buf[i]\n        ivLen--\n        i++\n      }\n    }\n    if (keyLen === 0 && ivLen === 0) {\n      break\n    }\n  }\n  for (i = 0; i < md_buf.length; i++) {\n    md_buf[i] = 0\n  }\n  return {\n    key: key,\n    iv: iv\n  }\n}\n"]}