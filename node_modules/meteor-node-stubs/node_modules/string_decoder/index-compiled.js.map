{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index-compiled.js","sourcesContent":["// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar Buffer = require('buffer').Buffer;\n\nvar isBufferEncoding = Buffer.isEncoding\n  || function(encoding) {\n       switch (encoding && encoding.toLowerCase()) {\n         case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;\n         default: return false;\n       }\n     }\n\n\nfunction assertEncoding(encoding) {\n  if (encoding && !isBufferEncoding(encoding)) {\n    throw new Error('Unknown encoding: ' + encoding);\n  }\n}\n\n// StringDecoder provides an interface for efficiently splitting a series of\n// buffers into a series of JS strings without breaking apart multi-byte\n// characters. CESU-8 is handled as part of the UTF-8 encoding.\n//\n// @TODO Handling all encodings inside a single object makes it very difficult\n// to reason about this code, so it should be split up in the future.\n// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code\n// points as used by CESU-8.\nvar StringDecoder = exports.StringDecoder = function(encoding) {\n  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');\n  assertEncoding(encoding);\n  switch (this.encoding) {\n    case 'utf8':\n      // CESU-8 represents each of Surrogate Pair by 3-bytes\n      this.surrogateSize = 3;\n      break;\n    case 'ucs2':\n    case 'utf16le':\n      // UTF-16 represents each of Surrogate Pair by 2-bytes\n      this.surrogateSize = 2;\n      this.detectIncompleteChar = utf16DetectIncompleteChar;\n      break;\n    case 'base64':\n      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.\n      this.surrogateSize = 3;\n      this.detectIncompleteChar = base64DetectIncompleteChar;\n      break;\n    default:\n      this.write = passThroughWrite;\n      return;\n  }\n\n  // Enough space to store all bytes of a single character. UTF-8 needs 4\n  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).\n  this.charBuffer = new Buffer(6);\n  // Number of bytes received for the current incomplete multi-byte character.\n  this.charReceived = 0;\n  // Number of bytes expected for the current incomplete multi-byte character.\n  this.charLength = 0;\n};\n\n\n// write decodes the given buffer and returns it as JS string that is\n// guaranteed to not contain any partial multi-byte characters. Any partial\n// character found at the end of the buffer is buffered up, and will be\n// returned when calling write again with the remaining bytes.\n//\n// Note: Converting a Buffer containing an orphan surrogate to a String\n// currently works, but converting a String to a Buffer (via `new Buffer`, or\n// Buffer#write) will replace incomplete surrogates with the unicode\n// replacement character. See https://codereview.chromium.org/121173009/ .\nStringDecoder.prototype.write = function(buffer) {\n  var charStr = '';\n  // if our last write ended with an incomplete multibyte character\n  while (this.charLength) {\n    // determine how many remaining bytes this buffer has to offer for this char\n    var available = (buffer.length >= this.charLength - this.charReceived) ?\n        this.charLength - this.charReceived :\n        buffer.length;\n\n    // add the new bytes to the char buffer\n    buffer.copy(this.charBuffer, this.charReceived, 0, available);\n    this.charReceived += available;\n\n    if (this.charReceived < this.charLength) {\n      // still not enough chars in this buffer? wait for more ...\n      return '';\n    }\n\n    // remove bytes belonging to the current character from the buffer\n    buffer = buffer.slice(available, buffer.length);\n\n    // get the character that was split\n    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);\n\n    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character\n    var charCode = charStr.charCodeAt(charStr.length - 1);\n    if (charCode >= 0xD800 && charCode <= 0xDBFF) {\n      this.charLength += this.surrogateSize;\n      charStr = '';\n      continue;\n    }\n    this.charReceived = this.charLength = 0;\n\n    // if there are no more bytes in this buffer, just emit our char\n    if (buffer.length === 0) {\n      return charStr;\n    }\n    break;\n  }\n\n  // determine and set charLength / charReceived\n  this.detectIncompleteChar(buffer);\n\n  var end = buffer.length;\n  if (this.charLength) {\n    // buffer the incomplete character bytes we got\n    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);\n    end -= this.charReceived;\n  }\n\n  charStr += buffer.toString(this.encoding, 0, end);\n\n  var end = charStr.length - 1;\n  var charCode = charStr.charCodeAt(end);\n  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character\n  if (charCode >= 0xD800 && charCode <= 0xDBFF) {\n    var size = this.surrogateSize;\n    this.charLength += size;\n    this.charReceived += size;\n    this.charBuffer.copy(this.charBuffer, size, 0, size);\n    buffer.copy(this.charBuffer, 0, 0, size);\n    return charStr.substring(0, end);\n  }\n\n  // or just emit the charStr\n  return charStr;\n};\n\n// detectIncompleteChar determines if there is an incomplete UTF-8 character at\n// the end of the given buffer. If so, it sets this.charLength to the byte\n// length that character, and sets this.charReceived to the number of bytes\n// that are available for this character.\nStringDecoder.prototype.detectIncompleteChar = function(buffer) {\n  // determine how many bytes we have to check at the end of this buffer\n  var i = (buffer.length >= 3) ? 3 : buffer.length;\n\n  // Figure out if one of the last i bytes of our buffer announces an\n  // incomplete char.\n  for (; i > 0; i--) {\n    var c = buffer[buffer.length - i];\n\n    // See http://en.wikipedia.org/wiki/UTF-8#Description\n\n    // 110XXXXX\n    if (i == 1 && c >> 5 == 0x06) {\n      this.charLength = 2;\n      break;\n    }\n\n    // 1110XXXX\n    if (i <= 2 && c >> 4 == 0x0E) {\n      this.charLength = 3;\n      break;\n    }\n\n    // 11110XXX\n    if (i <= 3 && c >> 3 == 0x1E) {\n      this.charLength = 4;\n      break;\n    }\n  }\n  this.charReceived = i;\n};\n\nStringDecoder.prototype.end = function(buffer) {\n  var res = '';\n  if (buffer && buffer.length)\n    res = this.write(buffer);\n\n  if (this.charReceived) {\n    var cr = this.charReceived;\n    var buf = this.charBuffer;\n    var enc = this.encoding;\n    res += buf.slice(0, cr).toString(enc);\n  }\n\n  return res;\n};\n\nfunction passThroughWrite(buffer) {\n  return buffer.toString(this.encoding);\n}\n\nfunction utf16DetectIncompleteChar(buffer) {\n  this.charReceived = buffer.length % 2;\n  this.charLength = this.charReceived ? 2 : 0;\n}\n\nfunction base64DetectIncompleteChar(buffer) {\n  this.charReceived = buffer.length % 3;\n  this.charLength = this.charReceived ? 3 : 0;\n}\n"]}