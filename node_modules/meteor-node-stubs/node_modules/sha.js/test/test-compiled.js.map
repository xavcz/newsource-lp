{"version":3,"sources":["test.js"],"names":[],"mappings":"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","file":"test-compiled.js","sourcesContent":["var crypto = require('crypto')\nvar tape = require('tape')\nvar Sha1 = require('../').sha1\n\nvar inputs = [\n  ['', 'ascii'],\n  ['abc', 'ascii'],\n  ['123', 'ascii'],\n  ['123456789abcdef123456789abcdef123456789abcdef123456789abcdef', 'ascii'],\n  ['123456789abcdef123456789abcdef123456789abcdef123456789abc', 'ascii'],\n  ['123456789abcdef123456789abcdef123456789abcdef123456789ab', 'ascii'],\n  ['0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcde', 'ascii'],\n  ['0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef', 'ascii'],\n  ['foobarbaz', 'ascii']\n]\n\ntape(\"hash is the same as node's crypto\", function (t) {\n  inputs.forEach(function (v) {\n    var a = new Sha1().update(v[0], v[1]).digest('hex')\n    var e = crypto.createHash('sha1').update(v[0], v[1]).digest('hex')\n    console.log(a, '==', e)\n    t.equal(a, e)\n  })\n\n  t.end()\n})\n\ntape('call update multiple times', function (t) {\n  inputs.forEach(function (v) {\n    var hash = new Sha1()\n    var _hash = crypto.createHash('sha1')\n\n    for (var i = 0; i < v[0].length; i = (i + 1) * 2) {\n      var s = v[0].substring(i, (i + 1) * 2)\n      hash.update(s, v[1])\n      _hash.update(s, v[1])\n    }\n\n    var a = hash.digest('hex')\n    var e = _hash.digest('hex')\n    console.log(a, '==', e)\n    t.equal(a, e)\n  })\n  t.end()\n})\n\ntape('call update twice', function (t) {\n  var _hash = crypto.createHash('sha1')\n  var hash = new Sha1()\n\n  _hash.update('foo', 'ascii')\n  hash.update('foo', 'ascii')\n\n  _hash.update('bar', 'ascii')\n  hash.update('bar', 'ascii')\n\n  _hash.update('baz', 'ascii')\n  hash.update('baz', 'ascii')\n\n  var a = hash.digest('hex')\n  var e = _hash.digest('hex')\n\n  t.equal(a, e)\n  t.end()\n})\n\ntape('hex encoding', function (t) {\n  inputs.forEach(function (v) {\n    var hash = new Sha1()\n    var _hash = crypto.createHash('sha1')\n\n    for (var i = 0; i < v[0].length; i = (i + 1) * 2) {\n      var s = v[0].substring(i, (i + 1) * 2)\n      hash.update(new Buffer(s, 'ascii').toString('hex'), 'hex')\n      _hash.update(new Buffer(s, 'ascii').toString('hex'), 'hex')\n    }\n    var a = hash.digest('hex')\n    var e = _hash.digest('hex')\n\n    console.log(a, '==', e)\n    t.equal(a, e)\n  })\n\n  t.end()\n})\n"]}