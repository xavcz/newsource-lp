{"version":3,"sources":["hash.js"],"names":[],"mappings":"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","file":"hash-compiled.js","sourcesContent":["var hexpp = require('../hexpp').defaults({ bigendian: false })\nvar tape = require('tape')\nvar Hash = require('../hash')\n\nvar hex = '0A1B2C3D4E5F6G7H'\n\nfunction equal (t, a, b) {\n  t.equal(a.length, b.length)\n\n  for (var i = 0; i < a.length; i++) {\n    t.equal(a[i], b[i])\n  }\n}\n\nvar hexBuf = new Buffer([48, 65, 49, 66, 50, 67, 51, 68, 52, 69, 53, 70, 54, 71, 55, 72])\nvar count16 = {\n  strings: ['0A1B2C3D4E5F6G7H'],\n  buffers: [\n    hexBuf,\n    new Buffer([ 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128])\n  ]\n}\n\nvar empty = {\n  strings: [''],\n  buffers: [\n    new Buffer([ 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ])\n  ]\n}\n\nvar multi = {\n      strings: ['abcd', 'efhijk', 'lmnopq'],\n      buffers: [\n        new Buffer('abcdefhijklmnopq', 'ascii'),\n        new Buffer([128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128])\n      ]\n    }\n\nvar long = {\n  strings: [hex + hex],\n  buffers: [\n    hexBuf,\n    hexBuf,\n    new Buffer([128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0])\n  ]\n}\n\nfunction makeTest (name, data) {\n  tape(name, function (t) {\n\n    var h = new Hash(16, 8)\n    var hash = new Buffer(20)\n    var n = 2\n    var expected = data.buffers.slice()\n    // t.plan(expected.length + 1)\n\n    h._update = function (block) {\n      var e = expected.shift()\n\n      console.log('---block---')\n      console.log(hexpp(block), block.length)\n      console.log('---e---')\n      console.log(hexpp(e), block.length)\n      console.log(block)\n      equal(t, block, e)\n\n      if (n < 0) {\n        throw new Error('expecting only 2 calls to _update')\n      }\n\n      return hash\n    }\n\n    data.strings.forEach(function (string) {\n      h.update(string, 'ascii')\n    })\n\n    equal(t, h.digest(), hash)\n    t.end()\n  })\n}\n\nmakeTest('Hash#update 1 in 1', count16)\nmakeTest('empty Hash#update', empty)\nmakeTest('Hash#update 1 in 3', multi)\nmakeTest('Hash#update 2 in 1', long)\n"]}