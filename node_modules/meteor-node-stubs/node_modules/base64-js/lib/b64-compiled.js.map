{"version":3,"sources":["b64.js"],"names":[],"mappings":";;AAAA,CAAC,AAAC,CAAA,UAAU,OAAO,EAAE;AACnB,cAAY,CAAA;;AAEZ,MAAI,CAAC,CAAA;AACL,MAAI,IAAI,GAAG,kEAAkE,CAAA;AAC7E,MAAI,MAAM,GAAG,EAAE,CAAA;AACf,OAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AAChC,UAAM,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAA;GACpB;AACD,MAAI,SAAS,GAAG,EAAE,CAAA;;AAElB,OAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;AAChC,aAAS,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAA;GAClC;AACD,WAAS,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAA;AACjC,WAAS,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAA;;AAEjC,MAAI,GAAG,GAAG,AAAC,OAAO,UAAU,KAAK,WAAW,GACxC,UAAU,GACV,KAAK,CAAA;;AAET,WAAS,MAAM,CAAE,GAAG,EAAE;AACpB,QAAI,CAAC,GAAG,SAAS,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAA;AACpC,WAAO,CAAC,KAAK,SAAS,GAAG,CAAC,GAAG,CAAC,CAAC,CAAA;GAChC;;AAED,WAAS,cAAc,CAAE,GAAG,EAAE;AAC5B,QAAI,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,YAAY,EAAE,GAAG,CAAA;;AAEnC,QAAI,GAAG,CAAC,MAAM,GAAG,CAAC,GAAG,CAAC,EAAE;AACtB,YAAM,IAAI,KAAK,CAAC,gDAAgD,CAAC,CAAA;KAClE;;;;;;;AAOD,QAAI,GAAG,GAAG,GAAG,CAAC,MAAM,CAAA;AACpB,gBAAY,GAAG,GAAG,CAAC,MAAM,CAAC,GAAG,GAAG,CAAC,CAAC,KAAK,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,MAAM,CAAC,GAAG,GAAG,CAAC,CAAC,KAAK,GAAG,GAAG,CAAC,GAAG,CAAC,CAAA;;;AAGpF,OAAG,GAAG,IAAI,GAAG,CAAC,GAAG,CAAC,MAAM,GAAG,CAAC,GAAG,CAAC,GAAG,YAAY,CAAC,CAAA;;;AAGhD,KAAC,GAAG,YAAY,GAAG,CAAC,GAAG,GAAG,CAAC,MAAM,GAAG,CAAC,GAAG,GAAG,CAAC,MAAM,CAAA;;AAElD,QAAI,CAAC,GAAG,CAAC,CAAA;;AAET,aAAS,IAAI,CAAE,CAAC,EAAE;AAChB,SAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAA;KACb;;AAED,SAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE;AACxC,SAAG,GAAG,AAAC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,GAAK,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,EAAE,AAAC,GAAI,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,AAAC,GAAG,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAA;AACtI,UAAI,CAAC,CAAC,GAAG,GAAG,QAAQ,CAAA,IAAK,EAAE,CAAC,CAAA;AAC5B,UAAI,CAAC,CAAC,GAAG,GAAG,MAAM,CAAA,IAAK,CAAC,CAAC,CAAA;AACzB,UAAI,CAAC,GAAG,GAAG,IAAI,CAAC,CAAA;KACjB;;AAED,QAAI,YAAY,KAAK,CAAC,EAAE;AACtB,SAAG,GAAG,AAAC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAK,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,AAAC,CAAA;AACrE,UAAI,CAAC,GAAG,GAAG,IAAI,CAAC,CAAA;KACjB,MAAM,IAAI,YAAY,KAAK,CAAC,EAAE;AAC7B,SAAG,GAAG,AAAC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,GAAK,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,AAAC,GAAI,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,AAAC,CAAA;AACzG,UAAI,CAAC,AAAC,GAAG,IAAI,CAAC,GAAI,IAAI,CAAC,CAAA;AACvB,UAAI,CAAC,GAAG,GAAG,IAAI,CAAC,CAAA;KACjB;;AAED,WAAO,GAAG,CAAA;GACX;;AAED,WAAS,MAAM,CAAE,GAAG,EAAE;AACpB,WAAO,MAAM,CAAC,GAAG,CAAC,CAAA;GACnB;;AAED,WAAS,eAAe,CAAE,GAAG,EAAE;AAC7B,WAAO,MAAM,CAAC,GAAG,IAAI,EAAE,GAAG,IAAI,CAAC,GAAG,MAAM,CAAC,GAAG,IAAI,EAAE,GAAG,IAAI,CAAC,GAAG,MAAM,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC,CAAA;GAC1G;;AAED,WAAS,WAAW,CAAE,KAAK,EAAE,KAAK,EAAE,GAAG,EAAE;AACvC,QAAI,IAAI,CAAA;AACR,QAAI,MAAM,GAAG,EAAE,CAAA;AACf,SAAK,IAAI,CAAC,GAAG,KAAK,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,IAAI,CAAC,EAAE;AACnC,UAAI,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,EAAE,CAAA,IAAK,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAA,AAAC,GAAI,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,AAAC,CAAA;AAC9D,YAAM,CAAC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAA;KACnC;AACD,WAAO,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAA;GACvB;;AAED,WAAS,aAAa,CAAE,KAAK,EAAE;AAC7B,QAAI,CAAC,CAAA;AACL,QAAI,UAAU,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC,CAAA;AACjC,QAAI,MAAM,GAAG,EAAE,CAAA;AACf,QAAI,KAAK,GAAG,EAAE,CAAA;AACd,QAAI,IAAI,EAAE,MAAM,CAAA;AAChB,QAAI,cAAc,GAAG,KAAK,CAAA;;;;AAI1B,SAAK,CAAC,GAAG,CAAC,EAAE,MAAM,GAAG,KAAK,CAAC,MAAM,GAAG,UAAU,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,IAAI,cAAc,EAAE;AAC/E,WAAK,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC,EAAE,AAAC,CAAC,GAAG,cAAc,GAAI,MAAM,GAAG,MAAM,GAAI,CAAC,GAAG,cAAc,AAAC,CAAC,CAAC,CAAA;KACjG;;;AAGD,YAAQ,UAAU;AAChB,WAAK,CAAC;AACJ,YAAI,GAAG,KAAK,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAA;AAC9B,cAAM,IAAI,MAAM,CAAC,IAAI,IAAI,CAAC,CAAC,CAAA;AAC3B,cAAM,IAAI,MAAM,CAAC,AAAC,IAAI,IAAI,CAAC,GAAI,IAAI,CAAC,CAAA;AACpC,cAAM,IAAI,IAAI,CAAA;AACd,cAAK;AAAA,AACP,WAAK,CAAC;AACJ,YAAI,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,IAAI,CAAC,CAAA,GAAK,KAAK,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,AAAC,CAAA;AACjE,cAAM,IAAI,MAAM,CAAC,IAAI,IAAI,EAAE,CAAC,CAAA;AAC5B,cAAM,IAAI,MAAM,CAAC,AAAC,IAAI,IAAI,CAAC,GAAI,IAAI,CAAC,CAAA;AACpC,cAAM,IAAI,MAAM,CAAC,AAAC,IAAI,IAAI,CAAC,GAAI,IAAI,CAAC,CAAA;AACpC,cAAM,IAAI,GAAG,CAAA;AACb,cAAK;AAAA,AACP;AACE,cAAK;AAAA,KACR;;AAED,SAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;;AAElB,WAAO,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,CAAA;GACtB;;AAED,SAAO,CAAC,WAAW,GAAG,cAAc,CAAA;AACpC,SAAO,CAAC,aAAa,GAAG,aAAa,CAAA;CACtC,CAAA,CAAC,OAAO,OAAO,KAAK,WAAW,GAAI,UAAK,QAAQ,GAAG,EAAE,GAAI,OAAO,CAAC,CAAC","file":"b64-compiled.js","sourcesContent":[";(function (exports) {\n  'use strict'\n\n  var i\n  var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\n  var lookup = []\n  for (i = 0; i < code.length; i++) {\n    lookup[i] = code[i]\n  }\n  var revLookup = []\n\n  for (i = 0; i < code.length; ++i) {\n    revLookup[code.charCodeAt(i)] = i\n  }\n  revLookup['-'.charCodeAt(0)] = 62\n  revLookup['_'.charCodeAt(0)] = 63\n\n  var Arr = (typeof Uint8Array !== 'undefined')\n    ? Uint8Array\n    : Array\n\n  function decode (elt) {\n    var v = revLookup[elt.charCodeAt(0)]\n    return v !== undefined ? v : -1\n  }\n\n  function b64ToByteArray (b64) {\n    var i, j, l, tmp, placeHolders, arr\n\n    if (b64.length % 4 > 0) {\n      throw new Error('Invalid string. Length must be a multiple of 4')\n    }\n\n    // the number of equal signs (place holders)\n    // if there are two placeholders, than the two characters before it\n    // represent one byte\n    // if there is only one, then the three characters before it represent 2 bytes\n    // this is just a cheap hack to not do indexOf twice\n    var len = b64.length\n    placeHolders = b64.charAt(len - 2) === '=' ? 2 : b64.charAt(len - 1) === '=' ? 1 : 0\n\n    // base64 is 4/3 + up to two characters of the original data\n    arr = new Arr(b64.length * 3 / 4 - placeHolders)\n\n    // if there are placeholders, only get up to the last complete 4 chars\n    l = placeHolders > 0 ? b64.length - 4 : b64.length\n\n    var L = 0\n\n    function push (v) {\n      arr[L++] = v\n    }\n\n    for (i = 0, j = 0; i < l; i += 4, j += 3) {\n      tmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))\n      push((tmp & 0xFF0000) >> 16)\n      push((tmp & 0xFF00) >> 8)\n      push(tmp & 0xFF)\n    }\n\n    if (placeHolders === 2) {\n      tmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)\n      push(tmp & 0xFF)\n    } else if (placeHolders === 1) {\n      tmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)\n      push((tmp >> 8) & 0xFF)\n      push(tmp & 0xFF)\n    }\n\n    return arr\n  }\n\n  function encode (num) {\n    return lookup[num]\n  }\n\n  function tripletToBase64 (num) {\n    return encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)\n  }\n\n  function encodeChunk (uint8, start, end) {\n    var temp\n    var output = []\n    for (var i = start; i < end; i += 3) {\n      temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])\n      output.push(tripletToBase64(temp))\n    }\n    return output.join('')\n  }\n\n  function uint8ToBase64 (uint8) {\n    var i\n    var extraBytes = uint8.length % 3 // if we have 1 byte left, pad 2 bytes\n    var output = ''\n    var parts = []\n    var temp, length\n    var maxChunkLength = 16383 // must be multiple of 3\n\n    // go through the array every three bytes, we'll deal with trailing stuff later\n\n    for (i = 0, length = uint8.length - extraBytes; i < length; i += maxChunkLength) {\n      parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > length ? length : (i + maxChunkLength)))\n    }\n\n    // pad the end with zeros, but make sure to not forget the extra bytes\n    switch (extraBytes) {\n      case 1:\n        temp = uint8[uint8.length - 1]\n        output += encode(temp >> 2)\n        output += encode((temp << 4) & 0x3F)\n        output += '=='\n        break\n      case 2:\n        temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])\n        output += encode(temp >> 10)\n        output += encode((temp >> 4) & 0x3F)\n        output += encode((temp << 2) & 0x3F)\n        output += '='\n        break\n      default:\n        break\n    }\n\n    parts.push(output)\n\n    return parts.join('')\n  }\n\n  exports.toByteArray = b64ToByteArray\n  exports.fromByteArray = uint8ToBase64\n}(typeof exports === 'undefined' ? (this.base64js = {}) : exports))\n"]}