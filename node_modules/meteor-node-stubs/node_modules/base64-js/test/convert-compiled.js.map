{"version":3,"sources":["convert.js"],"names":[],"mappings":";;AAAA,IAAI,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAA;AAC1B,IAAI,GAAG,GAAG,OAAO,CAAC,YAAY,CAAC,CAAA;AAC/B,IAAI,MAAM,GAAG,CACX,GAAG,EACH,IAAI,EACJ,KAAK,EACL,IAAI,EACJ,KAAK,EACL,MAAM,EACN,KAAK,EACL,MAAM,EACN,OAAO,CACR,CAAA;;AAED,IAAI,CAAC,4BAA4B,EAAE,UAAU,CAAC,EAAE;AAC9C,GAAC,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAA;;AAErB,OAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACtC,QAAI,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAA;AACrB,QAAI,MAAM,EAAE,GAAG,EAAE,GAAG,CAAA;;AAEpB,UAAM,GAAG,GAAG,CAAC,aAAa,CAAC,GAAG,CAAC,KAAK,EAAE,UAAU,IAAI,EAAE;AAAE,aAAO,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAA;KAAE,CAAC,CAAC,CAAA;;AAErF,OAAG,GAAG,GAAG,CAAC,WAAW,CAAC,MAAM,CAAC,CAAA;AAC7B,OAAG,GAAG,GAAG,CAAC,GAAG,EAAE,UAAU,IAAI,EAAE;AAAE,aAAO,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,CAAA;KAAE,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAA;;AAE7E,KAAC,CAAC,KAAK,CAAC,KAAK,EAAE,GAAG,EAAE,UAAU,GAAG,KAAK,CAAC,CAAA;GACxC;CACF,CAAC,CAAA;;AAEF,SAAS,GAAG,CAAE,GAAG,EAAE,QAAQ,EAAE;AAC3B,MAAI,GAAG,GAAG,EAAE,CAAA;AACZ,MAAI,MAAM,EAAE,WAAW,CAAA;;AAEvB,OAAK,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;AAC9C,QAAK,OAAO,GAAG,KAAK,QAAQ,IAAI,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,EAAG;AAChD,YAAM,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAA;AACtB,iBAAW,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,GAAG,CAAC,CAAA;AACtC,SAAG,CAAC,CAAC,CAAC,GAAG,WAAW,CAAA;KACrB,MAAM,IAAI,OAAO,GAAG,KAAK,QAAQ,IAAI,CAAC,IAAI,GAAG,EAAE;AAC9C,YAAM,GAAG,GAAG,CAAC,CAAC,CAAC,CAAA;AACf,iBAAW,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,GAAG,CAAC,CAAA;AACtC,SAAG,CAAC,CAAC,CAAC,GAAG,WAAW,CAAA;KACrB;GACF;AACD,SAAO,GAAG,CAAA;CACX","file":"convert-compiled.js","sourcesContent":["var test = require('tape')\nvar b64 = require('../lib/b64')\nvar checks = [\n  'a',\n  'aa',\n  'aaa',\n  'hi',\n  'hi!',\n  'hi!!',\n  'sup',\n  'sup?',\n  'sup?!'\n]\n\ntest('convert to base64 and back', function (t) {\n  t.plan(checks.length)\n\n  for (var i = 0; i < checks.length; i++) {\n    var check = checks[i]\n    var b64Str, arr, str\n\n    b64Str = b64.fromByteArray(map(check, function (char) { return char.charCodeAt(0) }))\n\n    arr = b64.toByteArray(b64Str)\n    str = map(arr, function (byte) { return String.fromCharCode(byte) }).join('')\n\n    t.equal(check, str, 'Checked ' + check)\n  }\n})\n\nfunction map (arr, callback) {\n  var res = []\n  var kValue, mappedValue\n\n  for (var k = 0, len = arr.length; k < len; k++) {\n    if ((typeof arr === 'string' && !!arr.charAt(k))) {\n      kValue = arr.charAt(k)\n      mappedValue = callback(kValue, k, arr)\n      res[k] = mappedValue\n    } else if (typeof arr !== 'string' && k in arr) {\n      kValue = arr[k]\n      mappedValue = callback(kValue, k, arr)\n      res[k] = mappedValue\n    }\n  }\n  return res\n}\n"]}