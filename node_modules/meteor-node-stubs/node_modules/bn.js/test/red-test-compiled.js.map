{"version":3,"sources":["red-test.js"],"names":[],"mappings":"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","file":"red-test-compiled.js","sourcesContent":["/* global describe, it */\n\nvar assert = require('assert');\nvar BN = require('../').BN;\n\ndescribe('BN.js/Reduction context', function () {\n  function testMethod (name, fn) {\n    describe(name + ' method', function () {\n      it('should support add, iadd, sub, isub operations', function () {\n        var p = new BN(257);\n        var m = fn(p);\n        var a = new BN(123).toRed(m);\n        var b = new BN(231).toRed(m);\n\n        assert.equal(a.redAdd(b).fromRed().toString(10), '97');\n        assert.equal(a.redSub(b).fromRed().toString(10), '149');\n        assert.equal(b.redSub(a).fromRed().toString(10), '108');\n\n        assert.equal(a.clone().redIAdd(b).fromRed().toString(10), '97');\n        assert.equal(a.clone().redISub(b).fromRed().toString(10), '149');\n        assert.equal(b.clone().redISub(a).fromRed().toString(10), '108');\n      });\n\n      it('should support pow and mul operations', function () {\n        var p192 = new BN(\n          'fffffffffffffffffffffffffffffffeffffffffffffffff',\n          16);\n        var m = fn(p192);\n        var a = new BN(123);\n        var b = new BN(231);\n        var c = a.toRed(m).redMul(b.toRed(m)).fromRed();\n        assert(c.cmp(a.mul(b).mod(p192)) === 0);\n\n        assert.equal(a.toRed(m).redPow(new BN(3)).fromRed()\n          .cmp(a.sqr().mul(a)), 0);\n        assert.equal(a.toRed(m).redPow(new BN(4)).fromRed()\n          .cmp(a.sqr().sqr()), 0);\n        assert.equal(a.toRed(m).redPow(new BN(8)).fromRed()\n          .cmp(a.sqr().sqr().sqr()), 0);\n        assert.equal(a.toRed(m).redPow(new BN(9)).fromRed()\n          .cmp(a.sqr().sqr().sqr().mul(a)), 0);\n        assert.equal(a.toRed(m).redPow(new BN(17)).fromRed()\n          .cmp(a.sqr().sqr().sqr().sqr().mul(a)), 0);\n        assert.equal(\n          a.toRed(m).redPow(new BN('deadbeefabbadead', 16)).fromRed()\n            .toString(16),\n          '3aa0e7e304e320b68ef61592bcb00341866d6fa66e11a4d6');\n      });\n\n      it('should sqrtm numbers', function () {\n        var p = new BN(263);\n        var m = fn(p);\n        var q = new BN(11).toRed(m);\n\n        var qr = q.redSqrt(true, p);\n        assert.equal(qr.redSqr().cmp(q), 0);\n\n        qr = q.redSqrt(false, p);\n        assert.equal(qr.redSqr().cmp(q), 0);\n\n        p = new BN(\n          'fffffffffffffffffffffffffffffffeffffffffffffffff',\n          16);\n        m = fn(p);\n\n        q = new BN(13).toRed(m);\n        qr = q.redSqrt(true, p);\n        assert.equal(qr.redSqr().cmp(q), 0);\n\n        qr = q.redSqrt(false, p);\n        assert.equal(qr.redSqr().cmp(q), 0);\n\n        // Tonelli-shanks\n        p = new BN(13);\n        m = fn(p);\n        q = new BN(10).toRed(m);\n        assert.equal(q.redSqrt().fromRed().toString(10), '7');\n      });\n\n      it('should invm numbers', function () {\n        var p = new BN(257);\n        var m = fn(p);\n        var a = new BN(3).toRed(m);\n        var b = a.redInvm();\n        assert.equal(a.redMul(b).fromRed().toString(16), '1');\n      });\n\n      it('should invm numbers (regression)', function () {\n        var p = new BN(\n          'ffffffff00000001000000000000000000000000ffffffffffffffffffffffff',\n          16);\n        var a = new BN(\n          'e1d969b8192fbac73ea5b7921896d6a2263d4d4077bb8e5055361d1f7f8163f3',\n          16);\n\n        var m = fn(p);\n        a = a.toRed(m);\n\n        assert.equal(a.redInvm().fromRed().negative, 0);\n      });\n\n      it('should imul numbers', function () {\n        var p = new BN(\n          'fffffffffffffffffffffffffffffffeffffffffffffffff',\n          16);\n        var m = fn(p);\n\n        var a = new BN('deadbeefabbadead', 16);\n        var b = new BN('abbadeadbeefdead', 16);\n        var c = a.mul(b).mod(p);\n\n        assert.equal(a.toRed(m).redIMul(b.toRed(m)).fromRed().toString(16),\n          c.toString(16));\n      });\n\n      it('should pow(base, 0) == 1', function () {\n        var base = new BN(256).toRed(BN.red('k256'));\n        var exponent = new BN(0);\n        var result = base.redPow(exponent);\n        assert.equal(result.toString(), '1');\n      });\n\n      it('should reduce when converting to red', function () {\n        var p = new BN(257);\n        var m = fn(p);\n        var a = new BN(5).toRed(m);\n\n        assert.doesNotThrow(function () {\n          var b = a.redISub(new BN(512).toRed(m));\n          b.redISub(new BN(512).toRed(m));\n        });\n      });\n\n      it('redNeg and zero value', function () {\n        var a = new BN(0).toRed(BN.red('k256')).redNeg();\n        assert.equal(a.isZero(), true);\n      });\n    });\n  }\n\n  testMethod('Plain', BN.red);\n  testMethod('Montgomery', BN.mont);\n\n  describe('Pseudo-Mersenne Primes', function () {\n    it('should reduce numbers mod k256', function () {\n      var p = BN._prime('k256');\n\n      assert.equal(p.ireduce(new BN(0xdead)).toString(16), 'dead');\n      assert.equal(p.ireduce(new BN('deadbeef', 16)).toString(16), 'deadbeef');\n\n      var num = new BN('fedcba9876543210fedcba9876543210dead' +\n      'fedcba9876543210fedcba9876543210dead',\n        16);\n      var exp = num.mod(p.p).toString(16);\n      assert.equal(p.ireduce(num).toString(16), exp);\n\n      var regr = new BN('f7e46df64c1815962bf7bc9c56128798' +\n      '3f4fcef9cb1979573163b477eab93959' +\n      '335dfb29ef07a4d835d22aa3b6797760' +\n      '70a8b8f59ba73d56d01a79af9',\n        16);\n      exp = regr.mod(p.p).toString(16);\n\n      assert.equal(p.ireduce(regr).toString(16), exp);\n    });\n\n    it('should not fail to invm number mod k256', function () {\n      var regr2 = new BN(\n        '6c150c4aa9a8cf1934485d40674d4a7cd494675537bda36d49405c5d2c6f496f', 16);\n      regr2 = regr2.toRed(BN.red('k256'));\n      assert.equal(regr2.redInvm().redMul(regr2).fromRed().cmpn(1), 0);\n    });\n\n    it('should correctly square the number', function () {\n      var p = BN._prime('k256').p;\n      var red = BN.red('k256');\n\n      var n = new BN('9cd8cb48c3281596139f147c1364a3ed' +\n      'e88d3f310fdb0eb98c924e599ca1b3c9',\n        16);\n      var expected = n.sqr().mod(p);\n      var actual = n.toRed(red).redSqr().fromRed();\n\n      assert.equal(actual.toString(16), expected.toString(16));\n    });\n\n    it('redISqr should return right result', function () {\n      var n = new BN('30f28939', 16);\n      var actual = n.toRed(BN.red('k256')).redISqr().fromRed();\n      assert.equal(actual.toString(16), '95bd93d19520eb1');\n    });\n  });\n\n  it('should avoid 4.1.0 regresion', function () {\n    function bits2int (obits, q) {\n      var bits = new BN(obits);\n      var shift = (obits.length << 3) - q.bitLength();\n      if (shift > 0) {\n        bits.ishrn(shift);\n      }\n      return bits;\n    }\n    var t = new Buffer('aff1651e4cd6036d57aa8b2a05ccf1a9d5a40166340ecbbdc55' +\n      'be10b568aa0aa3d05ce9a2fcec9df8ed018e29683c6051cb83e' +\n      '46ce31ba4edb045356a8d0d80b', 'hex');\n    var g = new BN('5c7ff6b06f8f143fe8288433493e4769c4d988ace5be25a0e24809670' +\n    '716c613d7b0cee6932f8faa7c44d2cb24523da53fbe4f6ec3595892d1' +\n    'aa58c4328a06c46a15662e7eaa703a1decf8bbb2d05dbe2eb956c142a' +\n    '338661d10461c0d135472085057f3494309ffa73c611f78b32adbb574' +\n    '0c361c9f35be90997db2014e2ef5aa61782f52abeb8bd6432c4dd097b' +\n    'c5423b285dafb60dc364e8161f4a2a35aca3a10b1c4d203cc76a470a3' +\n    '3afdcbdd92959859abd8b56e1725252d78eac66e71ba9ae3f1dd24871' +\n    '99874393cd4d832186800654760e1e34c09e4d155179f9ec0dc4473f9' +\n    '96bdce6eed1cabed8b6f116f7ad9cf505df0f998e34ab27514b0ffe7',\n      16);\n    var p = new BN('9db6fb5951b66bb6fe1e140f1d2ce5502374161fd6538df1648218642' +\n    'f0b5c48c8f7a41aadfa187324b87674fa1822b00f1ecf8136943d7c55' +\n    '757264e5a1a44ffe012e9936e00c1d3e9310b01c7d179805d3058b2a9' +\n    'f4bb6f9716bfe6117c6b5b3cc4d9be341104ad4a80ad6c94e005f4b99' +\n    '3e14f091eb51743bf33050c38de235567e1b34c3d6a5c0ceaa1a0f368' +\n    '213c3d19843d0b4b09dcb9fc72d39c8de41f1bf14d4bb4563ca283716' +\n    '21cad3324b6a2d392145bebfac748805236f5ca2fe92b871cd8f9c36d' +\n    '3292b5509ca8caa77a2adfc7bfd77dda6f71125a7456fea153e433256' +\n    'a2261c6a06ed3693797e7995fad5aabbcfbe3eda2741e375404ae25b',\n      16);\n    var q = new BN('f2c3119374ce76c9356990b465374a17f23f9ed35089bd969f61c6dde' +\n      '9998c1f', 16);\n    var k = bits2int(t, q);\n    var expectedR = '89ec4bb1400eccff8e7d9aa515cd1de7803f2daff09693ee7fd1353e' +\n      '90a68307';\n    var r = g.toRed(BN.mont(p)).redPow(k).fromRed().mod(q);\n    assert.equal(r.toString(16), expectedR);\n  });\n\n  it('K256.split for 512 bits number should return equal numbers', function () {\n    var red = BN.red('k256');\n    var input = new BN(1).iushln(512).subn(1);\n    assert.equal(input.bitLength(), 512);\n    var output = new BN(0);\n    red.prime.split(input, output);\n    assert.equal(input.cmp(output), 0);\n  });\n});\n"]}