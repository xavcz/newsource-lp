{"version":3,"sources":["binary-test.js"],"names":[],"mappings":"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","file":"binary-test-compiled.js","sourcesContent":["/* global describe, it */\n\nvar assert = require('assert');\nvar BN = require('../').BN;\n\ndescribe('BN.js/Binary', function () {\n  describe('.shl()', function () {\n    it('should shl numbers', function () {\n      // TODO(indutny): add negative numbers when the time will come\n      assert.equal(new BN('69527932928').shln(13).toString(16),\n        '2060602000000');\n      assert.equal(new BN('69527932928').shln(45).toString(16),\n        '206060200000000000000');\n    });\n\n    it('should ushl numbers', function () {\n      assert.equal(new BN('69527932928').ushln(13).toString(16),\n        '2060602000000');\n      assert.equal(new BN('69527932928').ushln(45).toString(16),\n        '206060200000000000000');\n    });\n  });\n\n  describe('.shr()', function () {\n    it('should shr numbers', function () {\n      // TODO(indutny): add negative numbers when the time will come\n      assert.equal(new BN('69527932928').shrn(13).toString(16),\n        '818180');\n      assert.equal(new BN('69527932928').shrn(17).toString(16),\n        '81818');\n      assert.equal(new BN('69527932928').shrn(256).toString(16),\n        '0');\n    });\n\n    it('should ushr numbers', function () {\n      assert.equal(new BN('69527932928').ushrn(13).toString(16),\n        '818180');\n      assert.equal(new BN('69527932928').ushrn(17).toString(16),\n        '81818');\n      assert.equal(new BN('69527932928').ushrn(256).toString(16),\n        '0');\n    });\n  });\n\n  describe('.bincn()', function () {\n    it('should increment bit', function () {\n      assert.equal(new BN(0).bincn(1).toString(16), '2');\n      assert.equal(new BN(2).bincn(1).toString(16), '4');\n      assert.equal(new BN(2).bincn(1).bincn(1).toString(16),\n        new BN(2).bincn(2).toString(16));\n      assert.equal(new BN(0xffffff).bincn(1).toString(16), '1000001');\n      assert.equal(new BN(2).bincn(63).toString(16),\n        '8000000000000002');\n    });\n  });\n\n  describe('.imaskn()', function () {\n    it('should mask bits in-place', function () {\n      assert.equal(new BN(0).imaskn(1).toString(16), '0');\n      assert.equal(new BN(3).imaskn(1).toString(16), '1');\n      assert.equal(new BN('123456789', 16).imaskn(4).toString(16), '9');\n      assert.equal(new BN('123456789', 16).imaskn(16).toString(16), '6789');\n      assert.equal(new BN('123456789', 16).imaskn(28).toString(16), '3456789');\n    });\n  });\n\n  describe('.testn()', function () {\n    it('should support test specific bit', function () {\n      [\n        'ff',\n        'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'\n      ].forEach(function (hex) {\n        var bn = new BN(hex, 16);\n        var bl = bn.bitLength();\n\n        for (var i = 0; i < bl; ++i) {\n          assert.equal(bn.testn(i), true);\n        }\n\n        // test off the end\n        assert.equal(bn.testn(bl), false);\n      });\n\n      var xbits = '01111001010111001001000100011101' +\n        '11010011101100011000111001011101' +\n        '10010100111000000001011000111101' +\n        '01011111001111100100011110000010' +\n        '01011010100111010001010011000100' +\n        '01101001011110100001001111100110' +\n        '001110010111';\n\n      var x = new BN(\n        '23478905234580795234378912401239784125643978256123048348957342'\n      );\n      for (var i = 0; i < x.bitLength(); ++i) {\n        assert.equal(x.testn(i), (xbits.charAt(i) === '1'), 'Failed @ bit ' + i);\n      }\n    });\n\n    it('should have short-cuts', function () {\n      var x = new BN('abcd', 16);\n      assert(!x.testn(128));\n    });\n  });\n\n  describe('.and()', function () {\n    it('should and numbers', function () {\n      assert.equal(new BN('1010101010101010101010101010101010101010', 2)\n        .and(new BN('101010101010101010101010101010101010101', 2))\n        .toString(2), '0');\n    });\n\n    it('should and numbers of different limb-length', function () {\n      assert.equal(\n        new BN('abcd0000ffff', 16)\n          .and(new BN('abcd', 16)).toString(16),\n        'abcd');\n    });\n  });\n\n  describe('.iand()', function () {\n    it('should iand numbers', function () {\n      assert.equal(new BN('1010101010101010101010101010101010101010', 2)\n        .iand(new BN('101010101010101010101010101010101010101', 2))\n        .toString(2), '0');\n      assert.equal(new BN('1000000000000000000000000000000000000001', 2)\n        .iand(new BN('1', 2))\n        .toString(2), '1');\n      assert.equal(new BN('1', 2)\n        .iand(new BN('1000000000000000000000000000000000000001', 2))\n        .toString(2), '1');\n    });\n  });\n\n  describe('.or()', function () {\n    it('should or numbers', function () {\n      assert.equal(new BN('1010101010101010101010101010101010101010', 2)\n        .or(new BN('101010101010101010101010101010101010101', 2))\n        .toString(2), '1111111111111111111111111111111111111111');\n    });\n\n    it('should or numbers of different limb-length', function () {\n      assert.equal(\n        new BN('abcd00000000', 16)\n          .or(new BN('abcd', 16)).toString(16),\n        'abcd0000abcd');\n    });\n  });\n\n  describe('.ior()', function () {\n    it('should ior numbers', function () {\n      assert.equal(new BN('1010101010101010101010101010101010101010', 2)\n        .ior(new BN('101010101010101010101010101010101010101', 2))\n        .toString(2), '1111111111111111111111111111111111111111');\n      assert.equal(new BN('1000000000000000000000000000000000000000', 2)\n        .ior(new BN('1', 2))\n        .toString(2), '1000000000000000000000000000000000000001');\n      assert.equal(new BN('1', 2)\n        .ior(new BN('1000000000000000000000000000000000000000', 2))\n        .toString(2), '1000000000000000000000000000000000000001');\n    });\n  });\n\n  describe('.xor()', function () {\n    it('should xor numbers', function () {\n      assert.equal(new BN('11001100110011001100110011001100', 2)\n        .xor(new BN('1100110011001100110011001100110', 2))\n        .toString(2), '10101010101010101010101010101010');\n    });\n  });\n\n  describe('.ixor()', function () {\n    it('should ixor numbers', function () {\n      assert.equal(new BN('11001100110011001100110011001100', 2)\n        .ixor(new BN('1100110011001100110011001100110', 2))\n        .toString(2), '10101010101010101010101010101010');\n      assert.equal(new BN('11001100110011001100110011001100', 2)\n        .ixor(new BN('1', 2))\n        .toString(2), '11001100110011001100110011001101');\n      assert.equal(new BN('1', 2)\n        .ixor(new BN('11001100110011001100110011001100', 2))\n        .toString(2), '11001100110011001100110011001101');\n    });\n\n    it('should and numbers of different limb-length', function () {\n      assert.equal(\n        new BN('abcd0000ffff', 16)\n          .xor(new BN('abcd', 16)).toString(16),\n        'abcd00005432');\n    });\n  });\n\n  describe('.setn()', function () {\n    it('should allow single bits to be set', function () {\n      assert.equal(new BN(0).setn(2, true).toString(2), '100');\n      assert.equal(new BN(0).setn(27, true).toString(2),\n        '1000000000000000000000000000');\n      assert.equal(new BN(0).setn(63, true).toString(16),\n        new BN(1).iushln(63).toString(16));\n      assert.equal(new BN('1000000000000000000000000001', 2).setn(27, false)\n        .toString(2), '1');\n      assert.equal(new BN('101', 2).setn(2, false).toString(2), '1');\n    });\n  });\n\n  describe('.notn()', function () {\n    it('should allow bitwise negation', function () {\n      assert.equal(new BN('111000111', 2).notn(9).toString(2),\n        '111000');\n      assert.equal(new BN('000111000', 2).notn(9).toString(2),\n        '111000111');\n      assert.equal(new BN('111000111', 2).notn(9).toString(2),\n        '111000');\n      assert.equal(new BN('000111000', 2).notn(9).toString(2),\n        '111000111');\n      assert.equal(new BN('111000111', 2).notn(32).toString(2),\n        '11111111111111111111111000111000');\n      assert.equal(new BN('000111000', 2).notn(32).toString(2),\n        '11111111111111111111111111000111');\n      assert.equal(new BN('111000111', 2).notn(68).toString(2),\n        '11111111111111111111111111111111' +\n        '111111111111111111111111111000111000');\n      assert.equal(new BN('000111000', 2).notn(68).toString(2),\n        '11111111111111111111111111111111' +\n        '111111111111111111111111111111000111');\n    });\n  });\n});\n"]}