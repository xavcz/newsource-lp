{"version":3,"sources":["constructor-test.js"],"names":[],"mappings":"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","file":"constructor-test-compiled.js","sourcesContent":["/* global describe, it */\n\nvar assert = require('assert');\nvar BN = require('../').BN;\n\ndescribe('BN.js/Constructor', function () {\n  describe('with Smi input', function () {\n    it('should accept one limb number', function () {\n      assert.equal(new BN(12345).toString(16), '3039');\n    });\n\n    it('should accept two-limb number', function () {\n      assert.equal(new BN(0x4123456).toString(16), '4123456');\n    });\n\n    it('should accept 52 bits of precision', function () {\n      var num = Math.pow(2, 52);\n      assert.equal(new BN(num, 10).toString(10), num.toString(10));\n    });\n\n    it('should accept max safe integer', function () {\n      var num = Math.pow(2, 53) - 1;\n      assert.equal(new BN(num, 10).toString(10), num.toString(10));\n    });\n\n    it('should not accept an unsafe integer', function () {\n      var num = Math.pow(2, 53);\n\n      assert.throws(function () {\n        BN(num, 10);\n      });\n    });\n\n    it('should accept two-limb LE number', function () {\n      assert.equal(new BN(0x4123456, null, 'le').toString(16), '56341204');\n    });\n  });\n\n  describe('with String input', function () {\n    it('should accept base-16', function () {\n      assert.equal(new BN('1A6B765D8CDF', 16).toString(16), '1a6b765d8cdf');\n      assert.equal(new BN('1A6B765D8CDF', 16).toString(), '29048849665247');\n    });\n\n    it('should accept base-hex', function () {\n      assert.equal(new BN('FF', 'hex').toString(), '255');\n    });\n\n    it('should accept base-16 with spaces', function () {\n      var num = 'a89c e5af8724 c0a23e0e 0ff77500';\n      assert.equal(new BN(num, 16).toString(16), num.replace(/ /g, ''));\n    });\n\n    it('should accept long base-16', function () {\n      var num = '123456789abcdef123456789abcdef123456789abcdef';\n      assert.equal(new BN(num, 16).toString(16), num);\n    });\n\n    it('should accept positive base-10', function () {\n      assert.equal(new BN('10654321').toString(), '10654321');\n      assert.equal(new BN('29048849665247').toString(16), '1a6b765d8cdf');\n    });\n\n    it('should accept negative base-10', function () {\n      assert.equal(new BN('-29048849665247').toString(16), '-1a6b765d8cdf');\n    });\n\n    it('should accept long base-10', function () {\n      var num = '10000000000000000';\n      assert.equal(new BN(num).toString(10), num);\n    });\n\n    it('should accept base-2', function () {\n      var base2 = '11111111111111111111111111111111111111111111111111111';\n      assert.equal(new BN(base2, 2).toString(2), base2);\n    });\n\n    it('should accept base-36', function () {\n      var base36 = 'zzZzzzZzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz';\n      assert.equal(new BN(base36, 36).toString(36), base36.toLowerCase());\n    });\n\n    it('should not overflow limbs during base-10', function () {\n      var num = '65820182292848241686198767302293' +\n        '20890292528855852623664389292032';\n      assert(new BN(num).words[0] < 0x4000000);\n    });\n\n    it('should accept base-16 LE integer', function () {\n      assert.equal(new BN('1A6B765D8CDF', 16, 'le').toString(16),\n        'df8c5d766b1a');\n    });\n  });\n\n  describe('with Array input', function () {\n    it('should not fail on empty array', function () {\n      assert.equal(new BN([]).toString(16), '0');\n    });\n\n    it('should import/export big endian', function () {\n      assert.equal(new BN([ 1, 2, 3 ]).toString(16), '10203');\n      assert.equal(new BN([ 1, 2, 3, 4 ]).toString(16), '1020304');\n      assert.equal(new BN([ 1, 2, 3, 4, 5 ]).toString(16), '102030405');\n      assert.equal(new BN([ 1, 2, 3, 4, 5, 6, 7, 8 ]).toString(16),\n        '102030405060708');\n      assert.equal(new BN([ 1, 2, 3, 4 ]).toArray().join(','), '1,2,3,4');\n      assert.equal(new BN([ 1, 2, 3, 4, 5, 6, 7, 8 ]).toArray().join(','),\n        '1,2,3,4,5,6,7,8');\n    });\n\n    it('should import little endian', function () {\n      assert.equal(new BN([ 1, 2, 3 ], 10, 'le').toString(16), '30201');\n      assert.equal(new BN([ 1, 2, 3, 4 ], 10, 'le').toString(16), '4030201');\n      assert.equal(new BN([ 1, 2, 3, 4, 5 ], 10, 'le').toString(16),\n        '504030201');\n      assert.equal(new BN([ 1, 2, 3, 4, 5, 6, 7, 8 ], 'le').toString(16),\n        '807060504030201');\n      assert.equal(new BN([ 1, 2, 3, 4 ]).toArray('le').join(','), '4,3,2,1');\n      assert.equal(new BN([ 1, 2, 3, 4, 5, 6, 7, 8 ]).toArray('le').join(','),\n        '8,7,6,5,4,3,2,1');\n    });\n\n    it('should import big endian with implicit base', function () {\n      assert.equal(new BN([ 1, 2, 3, 4, 5 ], 'le').toString(16), '504030201');\n    });\n  });\n\n  // the Array code is able to handle Buffer\n  describe('with Buffer input', function () {\n    it('should not fail on empty Buffer', function () {\n      assert.equal(new BN(new Buffer(0)).toString(16), '0');\n    });\n\n    it('should import/export big endian', function () {\n      assert.equal(new BN(new Buffer('010203', 'hex')).toString(16), '10203');\n    });\n\n    it('should import little endian', function () {\n      assert.equal(new BN(new Buffer('010203', 'hex'), 'le').toString(16), '30201');\n    });\n  });\n\n  describe('with BN input', function () {\n    it('should clone BN', function () {\n      var num = new BN(12345);\n      assert.equal(new BN(num).toString(10), '12345');\n    });\n  });\n});\n"]}