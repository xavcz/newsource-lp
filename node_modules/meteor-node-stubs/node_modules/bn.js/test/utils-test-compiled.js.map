{"version":3,"sources":["utils-test.js"],"names":[],"mappings":"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","file":"utils-test-compiled.js","sourcesContent":["/* global describe, it */\n\nvar assert = require('assert');\nvar BN = require('../').BN;\n\ndescribe('BN.js/Utils', function () {\n  describe('.toString()', function () {\n    describe('binary padding', function () {\n      it('should have a length of 256', function () {\n        var a = new BN(0);\n\n        assert.equal(a.toString(2, 256).length, 256);\n      });\n    });\n    describe('hex padding', function () {\n      it('should have length of 8 from leading 15', function () {\n        var a = new BN('ffb9602', 16);\n\n        assert.equal(a.toString('hex', 2).length, 8);\n      });\n\n      it('should have length of 8 from leading zero', function () {\n        var a = new BN('fb9604', 16);\n\n        assert.equal(a.toString('hex', 8).length, 8);\n      });\n\n      it('should have length of 8 from leading zeros', function () {\n        var a = new BN(0);\n\n        assert.equal(a.toString('hex', 8).length, 8);\n      });\n\n      it('should have length of 64 from leading 15', function () {\n        var a = new BN(\n          'ffb96ff654e61130ba8422f0debca77a0ea74ae5ea8bca9b54ab64aabf01003',\n          16);\n\n        assert.equal(a.toString('hex', 2).length, 64);\n      });\n\n      it('should have length of 64 from leading zero', function () {\n        var a = new BN(\n          'fb96ff654e61130ba8422f0debca77a0ea74ae5ea8bca9b54ab64aabf01003',\n          16);\n\n        assert.equal(a.toString('hex', 64).length, 64);\n      });\n    });\n  });\n\n  describe('.isNeg()', function () {\n    it('should return true for negative numbers', function () {\n      assert.equal(new BN(-1).isNeg(), true);\n      assert.equal(new BN(1).isNeg(), false);\n      assert.equal(new BN(0).isNeg(), false);\n      assert.equal(new BN('-0', 10).isNeg(), false);\n    });\n  });\n\n  describe('.isOdd()', function () {\n    it('should return true for odd numbers', function () {\n      assert.equal(new BN(0).isOdd(), false);\n      assert.equal(new BN(1).isOdd(), true);\n      assert.equal(new BN(2).isOdd(), false);\n      assert.equal(new BN('-0', 10).isOdd(), false);\n      assert.equal(new BN('-1', 10).isOdd(), true);\n      assert.equal(new BN('-2', 10).isOdd(), false);\n    });\n  });\n\n  describe('.isEven()', function () {\n    it('should return true for even numbers', function () {\n      assert.equal(new BN(0).isEven(), true);\n      assert.equal(new BN(1).isEven(), false);\n      assert.equal(new BN(2).isEven(), true);\n      assert.equal(new BN('-0', 10).isEven(), true);\n      assert.equal(new BN('-1', 10).isEven(), false);\n      assert.equal(new BN('-2', 10).isEven(), true);\n    });\n  });\n\n  describe('.isZero()', function () {\n    it('should return true for zero', function () {\n      assert.equal(new BN(0).isZero(), true);\n      assert.equal(new BN(1).isZero(), false);\n      assert.equal(new BN(0xffffffff).isZero(), false);\n    });\n  });\n\n  describe('.bitLength()', function () {\n    it('should return proper bitLength', function () {\n      assert.equal(new BN(0).bitLength(), 0);\n      assert.equal(new BN(0x1).bitLength(), 1);\n      assert.equal(new BN(0x2).bitLength(), 2);\n      assert.equal(new BN(0x3).bitLength(), 2);\n      assert.equal(new BN(0x4).bitLength(), 3);\n      assert.equal(new BN(0x8).bitLength(), 4);\n      assert.equal(new BN(0x10).bitLength(), 5);\n      assert.equal(new BN(0x100).bitLength(), 9);\n      assert.equal(new BN(0x123456).bitLength(), 21);\n      assert.equal(new BN('123456789', 16).bitLength(), 33);\n      assert.equal(new BN('8023456789', 16).bitLength(), 40);\n    });\n  });\n\n  describe('.byteLength()', function () {\n    it('should return proper byteLength', function () {\n      assert.equal(new BN(0).byteLength(), 0);\n      assert.equal(new BN(0x1).byteLength(), 1);\n      assert.equal(new BN(0x2).byteLength(), 1);\n      assert.equal(new BN(0x3).byteLength(), 1);\n      assert.equal(new BN(0x4).byteLength(), 1);\n      assert.equal(new BN(0x8).byteLength(), 1);\n      assert.equal(new BN(0x10).byteLength(), 1);\n      assert.equal(new BN(0x100).byteLength(), 2);\n      assert.equal(new BN(0x123456).byteLength(), 3);\n      assert.equal(new BN('123456789', 16).byteLength(), 5);\n      assert.equal(new BN('8023456789', 16).byteLength(), 5);\n    });\n  });\n\n  describe('.toArray()', function () {\n    it('should return [ 0 ] for `0`', function () {\n      var n = new BN(0);\n      assert.deepEqual(n.toArray('be'), [ 0 ]);\n      assert.deepEqual(n.toArray('le'), [ 0 ]);\n    });\n\n    it('should zero pad to desired lengths', function () {\n      var n = new BN(0x123456);\n      assert.deepEqual(n.toArray('be', 5), [ 0x00, 0x00, 0x12, 0x34, 0x56 ]);\n      assert.deepEqual(n.toArray('le', 5), [ 0x56, 0x34, 0x12, 0x00, 0x00 ]);\n    });\n\n    it('should throw when naturally larger than desired length', function () {\n      var n = new BN(0x123456);\n      assert.throws(function () {\n        n.toArray('be', 2);\n      });\n    });\n  });\n\n  describe('.toBuffer', function () {\n    it('should return proper Buffer', function () {\n      var n = new BN(0x123456);\n      assert.deepEqual(n.toBuffer('be', 5).toString('hex'), '0000123456');\n      assert.deepEqual(n.toBuffer('le', 5).toString('hex'), '5634120000');\n    });\n  });\n\n  describe('.toNumber()', function () {\n    it('should return proper Number if below the limit', function () {\n      assert.deepEqual(new BN(0x123456).toNumber(), 0x123456);\n      assert.deepEqual(new BN(0x3ffffff).toNumber(), 0x3ffffff);\n      assert.deepEqual(new BN(0x4000000).toNumber(), 0x4000000);\n      assert.deepEqual(new BN(0x10000000000000).toNumber(), 0x10000000000000);\n      assert.deepEqual(new BN(0x10040004004000).toNumber(), 0x10040004004000);\n      assert.deepEqual(new BN(-0x123456).toNumber(), -0x123456);\n      assert.deepEqual(new BN(-0x3ffffff).toNumber(), -0x3ffffff);\n      assert.deepEqual(new BN(-0x4000000).toNumber(), -0x4000000);\n      assert.deepEqual(new BN(-0x10000000000000).toNumber(), -0x10000000000000);\n      assert.deepEqual(new BN(-0x10040004004000).toNumber(), -0x10040004004000);\n    });\n\n    it('should throw when number exceeds 53 bits', function () {\n      var n = new BN(1).iushln(54);\n      assert.throws(function () {\n        n.toNumber();\n      });\n    });\n  });\n\n  describe('.zeroBits()', function () {\n    it('should return proper zeroBits', function () {\n      assert.equal(new BN(0).zeroBits(), 0);\n      assert.equal(new BN(0x1).zeroBits(), 0);\n      assert.equal(new BN(0x2).zeroBits(), 1);\n      assert.equal(new BN(0x3).zeroBits(), 0);\n      assert.equal(new BN(0x4).zeroBits(), 2);\n      assert.equal(new BN(0x8).zeroBits(), 3);\n      assert.equal(new BN(0x10).zeroBits(), 4);\n      assert.equal(new BN(0x100).zeroBits(), 8);\n      assert.equal(new BN(0x1000000).zeroBits(), 24);\n      assert.equal(new BN(0x123456).zeroBits(), 1);\n    });\n  });\n\n  describe('.toJSON', function () {\n    it('should return hex string', function () {\n      assert.equal(new BN(0x123).toJSON(), '123');\n    });\n  });\n\n  describe('.cmpn', function () {\n    it('should return -1, 0, 1 correctly', function () {\n      assert.equal(new BN(42).cmpn(42), 0);\n      assert.equal(new BN(42).cmpn(43), -1);\n      assert.equal(new BN(42).cmpn(41), 1);\n      assert.equal(new BN(0x3fffffe).cmpn(0x3fffffe), 0);\n      assert.equal(new BN(0x3fffffe).cmpn(0x3ffffff), -1);\n      assert.equal(new BN(0x3fffffe).cmpn(0x3fffffd), 1);\n      assert.throws(function () {\n        new BN(0x3fffffe).cmpn(0x4000000);\n      });\n      assert.equal(new BN(42).cmpn(-42), 1);\n      assert.equal(new BN(-42).cmpn(42), -1);\n      assert.equal(new BN(-42).cmpn(-42), 0);\n    });\n  });\n\n  describe('.cmp', function () {\n    it('should return -1, 0, 1 correctly', function () {\n      assert.equal(new BN(42).cmp(new BN(42)), 0);\n      assert.equal(new BN(42).cmp(new BN(43)), -1);\n      assert.equal(new BN(42).cmp(new BN(41)), 1);\n      assert.equal(new BN(0x3fffffe).cmp(new BN(0x3fffffe)), 0);\n      assert.equal(new BN(0x3fffffe).cmp(new BN(0x3ffffff)), -1);\n      assert.equal(new BN(0x3fffffe).cmp(new BN(0x3fffffd)), 1);\n      assert.equal(new BN(0x3fffffe).cmp(new BN(0x4000000)), -1);\n      assert.equal(new BN(42).cmp(new BN(-42)), 1);\n      assert.equal(new BN(-42).cmp(new BN(42)), -1);\n      assert.equal(new BN(-42).cmp(new BN(-42)), 0);\n    });\n  });\n\n  describe('comparison shorthands', function () {\n    it('.gtn greater than', function () {\n      assert.equal(new BN(3).gtn(2), true);\n      assert.equal(new BN(3).gtn(3), false);\n      assert.equal(new BN(3).gtn(4), false);\n    });\n    it('.gt greater than', function () {\n      assert.equal(new BN(3).gt(new BN(2)), true);\n      assert.equal(new BN(3).gt(new BN(3)), false);\n      assert.equal(new BN(3).gt(new BN(4)), false);\n    });\n    it('.gten greater than or equal', function () {\n      assert.equal(new BN(3).gten(3), true);\n      assert.equal(new BN(3).gten(2), true);\n      assert.equal(new BN(3).gten(4), false);\n    });\n    it('.gte greater than or equal', function () {\n      assert.equal(new BN(3).gte(new BN(3)), true);\n      assert.equal(new BN(3).gte(new BN(2)), true);\n      assert.equal(new BN(3).gte(new BN(4)), false);\n    });\n    it('.ltn less than', function () {\n      assert.equal(new BN(2).ltn(3), true);\n      assert.equal(new BN(2).ltn(2), false);\n      assert.equal(new BN(2).ltn(1), false);\n    });\n    it('.lt less than', function () {\n      assert.equal(new BN(2).lt(new BN(3)), true);\n      assert.equal(new BN(2).lt(new BN(2)), false);\n      assert.equal(new BN(2).lt(new BN(1)), false);\n    });\n    it('.lten less than or equal', function () {\n      assert.equal(new BN(3).lten(3), true);\n      assert.equal(new BN(3).lten(2), false);\n      assert.equal(new BN(3).lten(4), true);\n    });\n    it('.lte less than or equal', function () {\n      assert.equal(new BN(3).lte(new BN(3)), true);\n      assert.equal(new BN(3).lte(new BN(2)), false);\n      assert.equal(new BN(3).lte(new BN(4)), true);\n    });\n    it('.eqn equal', function () {\n      assert.equal(new BN(3).eqn(3), true);\n      assert.equal(new BN(3).eqn(2), false);\n      assert.equal(new BN(3).eqn(4), false);\n    });\n    it('.eq equal', function () {\n      assert.equal(new BN(3).eq(new BN(3)), true);\n      assert.equal(new BN(3).eq(new BN(2)), false);\n      assert.equal(new BN(3).eq(new BN(4)), false);\n    });\n  });\n\n  describe('.fromTwos', function () {\n    it('should convert from two\\'s complement to negative number', function () {\n      assert.equal(new BN('00000000', 16).fromTwos(32).toNumber(), 0);\n      assert.equal(new BN('00000001', 16).fromTwos(32).toNumber(), 1);\n      assert.equal(new BN('7fffffff', 16).fromTwos(32).toNumber(), 2147483647);\n      assert.equal(new BN('80000000', 16).fromTwos(32).toNumber(), -2147483648);\n      assert.equal(new BN('f0000000', 16).fromTwos(32).toNumber(), -268435456);\n      assert.equal(new BN('f1234567', 16).fromTwos(32).toNumber(), -249346713);\n      assert.equal(new BN('ffffffff', 16).fromTwos(32).toNumber(), -1);\n      assert.equal(new BN('fffffffe', 16).fromTwos(32).toNumber(), -2);\n      assert.equal(new BN('fffffffffffffffffffffffffffffffe', 16)\n        .fromTwos(128).toNumber(), -2);\n      assert.equal(new BN('ffffffffffffffffffffffffffffffff' +\n        'fffffffffffffffffffffffffffffffe', 16).fromTwos(256).toNumber(), -2);\n      assert.equal(new BN('ffffffffffffffffffffffffffffffff' +\n        'ffffffffffffffffffffffffffffffff', 16).fromTwos(256).toNumber(), -1);\n      assert.equal(new BN('7fffffffffffffffffffffffffffffff' +\n        'ffffffffffffffffffffffffffffffff', 16).fromTwos(256).toString(10),\n        new BN('5789604461865809771178549250434395392663499' +\n          '2332820282019728792003956564819967', 10).toString(10));\n      assert.equal(new BN('80000000000000000000000000000000' +\n        '00000000000000000000000000000000', 16).fromTwos(256).toString(10),\n        new BN('-578960446186580977117854925043439539266349' +\n          '92332820282019728792003956564819968', 10).toString(10));\n    });\n  });\n\n  describe('.toTwos', function () {\n    it('should convert from negative number to two\\'s complement', function () {\n      assert.equal(new BN(0).toTwos(32).toString(16), '0');\n      assert.equal(new BN(1).toTwos(32).toString(16), '1');\n      assert.equal(new BN(2147483647).toTwos(32).toString(16), '7fffffff');\n      assert.equal(new BN('-2147483648', 10).toTwos(32).toString(16), '80000000');\n      assert.equal(new BN('-268435456', 10).toTwos(32).toString(16), 'f0000000');\n      assert.equal(new BN('-249346713', 10).toTwos(32).toString(16), 'f1234567');\n      assert.equal(new BN('-1', 10).toTwos(32).toString(16), 'ffffffff');\n      assert.equal(new BN('-2', 10).toTwos(32).toString(16), 'fffffffe');\n      assert.equal(new BN('-2', 10).toTwos(128).toString(16),\n        'fffffffffffffffffffffffffffffffe');\n      assert.equal(new BN('-2', 10).toTwos(256).toString(16),\n        'fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe');\n      assert.equal(new BN('-1', 10).toTwos(256).toString(16),\n        'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');\n      assert.equal(new BN('5789604461865809771178549250434395392663' +\n        '4992332820282019728792003956564819967', 10).toTwos(256).toString(16),\n        '7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');\n      assert.equal(new BN('-578960446186580977117854925043439539266' +\n        '34992332820282019728792003956564819968', 10).toTwos(256).toString(16),\n        '8000000000000000000000000000000000000000000000000000000000000000');\n    });\n  });\n});\n"]}