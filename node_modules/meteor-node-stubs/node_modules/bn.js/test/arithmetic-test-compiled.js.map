{"version":3,"sources":["arithmetic-test.js"],"names":[],"mappings":"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","file":"arithmetic-test-compiled.js","sourcesContent":["/* global describe, it */\n\nvar assert = require('assert');\nvar BN = require('../').BN;\nvar fixtures = require('./fixtures');\n\ndescribe('BN.js/Arithmetic', function () {\n  describe('.add()', function () {\n    it('should add numbers', function () {\n      assert.equal(new BN(14).add(new BN(26)).toString(16), '28');\n      var k = new BN(0x1234);\n      var r = k;\n\n      for (var i = 0; i < 257; i++) {\n        r = r.add(k);\n      }\n\n      assert.equal(r.toString(16), '125868');\n    });\n\n    it('should handle carry properly (in-place)', function () {\n      var k = new BN('abcdefabcdefabcdef', 16);\n      var r = new BN('deadbeef', 16);\n\n      for (var i = 0; i < 257; i++) {\n        r.iadd(k);\n      }\n\n      assert.equal(r.toString(16), 'ac79bd9b79be7a277bde');\n    });\n\n    it('should properly do positive + negative', function () {\n      var a = new BN('abcd', 16);\n      var b = new BN('-abce', 16);\n\n      assert.equal(a.iadd(b).toString(16), '-1');\n\n      a = new BN('abcd', 16);\n      b = new BN('-abce', 16);\n\n      assert.equal(a.add(b).toString(16), '-1');\n      assert.equal(b.add(a).toString(16), '-1');\n    });\n  });\n\n  describe('.iaddn()', function () {\n    it('should allow a sign change', function () {\n      var a = new BN(-100);\n      assert.equal(a.negative, 1);\n\n      a.iaddn(200);\n\n      assert.equal(a.negative, 0);\n      assert.equal(a.toString(), '100');\n    });\n\n    it('should add negative number', function () {\n      var a = new BN(-100);\n      assert.equal(a.negative, 1);\n\n      a.iaddn(-200);\n\n      assert.equal(a.toString(), '-300');\n    });\n\n    it('should allow neg + pos with big number', function () {\n      var a = new BN('-1000000000', 10);\n      assert.equal(a.negative, 1);\n\n      a.iaddn(200);\n\n      assert.equal(a.toString(), '-999999800');\n    });\n\n    it('should carry limb', function () {\n      var a = new BN('3ffffff', 16);\n\n      assert.equal(a.iaddn(1).toString(16), '4000000');\n    });\n\n    it('should throw error with num eq 0x4000000', function () {\n      assert.throws(function () {\n        new BN(0).iaddn(0x4000000);\n      });\n    });\n  });\n\n  describe('.sub()', function () {\n    it('should subtract small numbers', function () {\n      assert.equal(new BN(26).sub(new BN(14)).toString(16), 'c');\n      assert.equal(new BN(14).sub(new BN(26)).toString(16), '-c');\n      assert.equal(new BN(26).sub(new BN(26)).toString(16), '0');\n      assert.equal(new BN(-26).sub(new BN(26)).toString(16), '-34');\n    });\n\n    var a = new BN(\n      '31ff3c61db2db84b9823d320907a573f6ad37c437abe458b1802cda041d6384' +\n      'a7d8daef41395491e2',\n      16);\n    var b = new BN(\n      '6f0e4d9f1d6071c183677f601af9305721c91d31b0bbbae8fb790000',\n      16);\n    var r = new BN(\n      '31ff3c61db2db84b9823d3208989726578fd75276287cd9516533a9acfb9a67' +\n      '76281f34583ddb91e2',\n      16);\n\n    it('should subtract big numbers', function () {\n      assert.equal(a.sub(b).cmp(r), 0);\n    });\n\n    it('should subtract numbers in place', function () {\n      assert.equal(b.clone().isub(a).neg().cmp(r), 0);\n    });\n\n    it('should subtract with carry', function () {\n      // Carry and copy\n      var a = new BN('12345', 16);\n      var b = new BN('1000000000000', 16);\n      assert.equal(a.isub(b).toString(16), '-fffffffedcbb');\n\n      a = new BN('12345', 16);\n      b = new BN('1000000000000', 16);\n      assert.equal(b.isub(a).toString(16), 'fffffffedcbb');\n    });\n  });\n\n  describe('.isubn()', function () {\n    it('should subtract negative number', function () {\n      var r = new BN(\n        '7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b', 16);\n      assert.equal(r.isubn(-1).toString(16),\n        '7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681c');\n    });\n\n    it('should work for positive numbers', function () {\n      var a = new BN(-100);\n      assert.equal(a.negative, 1);\n\n      a.isubn(200);\n      assert.equal(a.negative, 1);\n      assert.equal(a.toString(), '-300');\n    });\n\n    it('should not allow a sign change', function () {\n      var a = new BN(-100);\n      assert.equal(a.negative, 1);\n\n      a.isubn(-200);\n      assert.equal(a.negative, 0);\n      assert.equal(a.toString(), '100');\n    });\n\n    it('should change sign on small numbers at 0', function () {\n      var a = new BN(0).subn(2);\n      assert.equal(a.toString(), '-2');\n    });\n\n    it('should change sign on small numbers at 1', function () {\n      var a = new BN(1).subn(2);\n      assert.equal(a.toString(), '-1');\n    });\n\n    it('should throw error with num eq 0x4000000', function () {\n      assert.throws(function () {\n        new BN(0).isubn(0x4000000);\n      });\n    });\n  });\n\n  function testMethod (name, mul) {\n    describe(name, function () {\n      it('should multiply numbers of different signs', function () {\n        var offsets = [\n          1, // smallMulTo\n          250, // comb10MulTo\n          1000, // bigMulTo\n          15000 // jumboMulTo\n        ];\n\n        for (var i = 0; i < offsets.length; ++i) {\n          var x = new BN(1).ishln(offsets[i]);\n\n          assert.equal(mul(x, x).isNeg(), false);\n          assert.equal(mul(x, x.neg()).isNeg(), true);\n          assert.equal(mul(x.neg(), x).isNeg(), true);\n          assert.equal(mul(x.neg(), x.neg()).isNeg(), false);\n        }\n      });\n\n      it('should multiply with carry', function () {\n        var n = new BN(0x1001);\n        var r = n;\n\n        for (var i = 0; i < 4; i++) {\n          r = mul(r, n);\n        }\n\n        assert.equal(r.toString(16), '100500a00a005001');\n      });\n\n      it('should correctly multiply big numbers', function () {\n        var n = new BN(\n          '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',\n          16\n        );\n        assert.equal(\n          mul(n, n).toString(16),\n          '39e58a8055b6fb264b75ec8c646509784204ac15a8c24e05babc9729ab9' +\n          'b055c3a9458e4ce3289560a38e08ba8175a9446ce14e608245ab3a9' +\n          '978a8bd8acaa40');\n        assert.equal(\n          mul(mul(n, n), n).toString(16),\n          '1b888e01a06e974017a28a5b4da436169761c9730b7aeedf75fc60f687b' +\n          '46e0cf2cb11667f795d5569482640fe5f628939467a01a612b02350' +\n          '0d0161e9730279a7561043af6197798e41b7432458463e64fa81158' +\n          '907322dc330562697d0d600');\n      });\n\n      it('should multiply neg number on 0', function () {\n        assert.equal(\n          mul(new BN('-100000000000'), new BN('3').div(new BN('4')))\n            .toString(16),\n          '0'\n        );\n      });\n\n      it('should regress mul big numbers', function () {\n        var q = fixtures.dhGroups.p17.q;\n        var qs = fixtures.dhGroups.p17.qs;\n\n        q = new BN(q, 16);\n        assert.equal(mul(q, q).toString(16), qs);\n      });\n    });\n  }\n\n  testMethod('.mul()', function (x, y) {\n    return BN.prototype.mul.apply(x, [ y ]);\n  });\n\n  testMethod('.mulf()', function (x, y) {\n    return BN.prototype.mulf.apply(x, [ y ]);\n  });\n\n  describe('.imul()', function () {\n    it('should multiply numbers in-place', function () {\n      var a = new BN('abcdef01234567890abcd', 16);\n      var b = new BN('deadbeefa551edebabba8', 16);\n      var c = a.mul(b);\n\n      assert.equal(a.imul(b).toString(16), c.toString(16));\n\n      a = new BN('abcdef01234567890abcd214a25123f512361e6d236', 16);\n      b = new BN('deadbeefa551edebabba8121234fd21bac0341324dd', 16);\n      c = a.mul(b);\n\n      assert.equal(a.imul(b).toString(16), c.toString(16));\n    });\n\n    it('should multiply by 0', function () {\n      var a = new BN('abcdef01234567890abcd', 16);\n      var b = new BN('0', 16);\n      var c = a.mul(b);\n\n      assert.equal(a.imul(b).toString(16), c.toString(16));\n    });\n\n    it('should regress mul big numbers in-place', function () {\n      var q = fixtures.dhGroups.p17.q;\n      var qs = fixtures.dhGroups.p17.qs;\n\n      q = new BN(q, 16);\n\n      assert.equal(q.isqr().toString(16), qs);\n    });\n  });\n\n  describe('.muln()', function () {\n    it('should multiply number by small number', function () {\n      var a = new BN('abcdef01234567890abcd', 16);\n      var b = new BN('dead', 16);\n      var c = a.mul(b);\n\n      assert.equal(a.muln(0xdead).toString(16), c.toString(16));\n    });\n\n    it('should throw error with num eq 0x4000000', function () {\n      assert.throws(function () {\n        new BN(0).imuln(0x4000000);\n      });\n    });\n  });\n\n  describe('.pow()', function () {\n    it('should raise number to the power', function () {\n      var a = new BN('ab', 16);\n      var b = new BN('13', 10);\n      var c = a.pow(b);\n\n      assert.equal(c.toString(16), '15963da06977df51909c9ba5b');\n    });\n  });\n\n  describe('.div()', function () {\n    it('should divide small numbers (<=26 bits)', function () {\n      assert.equal(new BN('256').div(new BN(10)).toString(10),\n        '25');\n      assert.equal(new BN('-256').div(new BN(10)).toString(10),\n        '-25');\n      assert.equal(new BN('256').div(new BN(-10)).toString(10),\n        '-25');\n      assert.equal(new BN('-256').div(new BN(-10)).toString(10),\n        '25');\n\n      assert.equal(new BN('10').div(new BN(256)).toString(10),\n        '0');\n      assert.equal(new BN('-10').div(new BN(256)).toString(10),\n        '0');\n      assert.equal(new BN('10').div(new BN(-256)).toString(10),\n        '0');\n      assert.equal(new BN('-10').div(new BN(-256)).toString(10),\n        '0');\n    });\n\n    it('should divide large numbers (>53 bits)', function () {\n      assert.equal(new BN('1222222225255589').div(new BN('611111124969028'))\n        .toString(10), '1');\n      assert.equal(new BN('-1222222225255589').div(new BN('611111124969028'))\n        .toString(10), '-1');\n      assert.equal(new BN('1222222225255589').div(new BN('-611111124969028'))\n        .toString(10), '-1');\n      assert.equal(new BN('-1222222225255589').div(new BN('-611111124969028'))\n        .toString(10), '1');\n\n      assert.equal(new BN('611111124969028').div(new BN('1222222225255589'))\n        .toString(10), '0');\n      assert.equal(new BN('-611111124969028').div(new BN('1222222225255589'))\n        .toString(10), '0');\n      assert.equal(new BN('611111124969028').div(new BN('-1222222225255589'))\n        .toString(10), '0');\n      assert.equal(new BN('-611111124969028').div(new BN('-1222222225255589'))\n        .toString(10), '0');\n    });\n\n    it('should divide numbers', function () {\n      assert.equal(new BN('69527932928').div(new BN('16974594')).toString(16),\n        'fff');\n      assert.equal(new BN('-69527932928').div(new BN('16974594')).toString(16),\n        '-fff');\n\n      var b = new BN(\n        '39e58a8055b6fb264b75ec8c646509784204ac15a8c24e05babc9729ab9' +\n        'b055c3a9458e4ce3289560a38e08ba8175a9446ce14e608245ab3a9' +\n        '978a8bd8acaa40',\n        16);\n      var n = new BN(\n        '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',\n        16\n      );\n      assert.equal(b.div(n).toString(16), n.toString(16));\n\n      assert.equal(new BN('1').div(new BN('-5')).toString(10), '0');\n    });\n\n    it('should not fail on regression after moving to _wordDiv', function () {\n      // Regression after moving to word div\n      var p = new BN(\n        'fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f',\n        16);\n      var a = new BN(\n        '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',\n        16);\n      var as = a.sqr();\n      assert.equal(\n        as.div(p).toString(16),\n        '39e58a8055b6fb264b75ec8c646509784204ac15a8c24e05babc9729e58090b9');\n\n      p = new BN(\n        'ffffffff00000001000000000000000000000000ffffffffffffffffffffffff',\n        16);\n      a = new BN(\n        'fffffffe00000003fffffffd0000000200000001fffffffe00000002ffffffff' +\n        'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff',\n        16);\n      assert.equal(\n        a.div(p).toString(16),\n        'ffffffff00000002000000000000000000000001000000000000000000000001');\n    });\n  });\n\n  describe('.idivn()', function () {\n    it('should divide numbers in-place', function () {\n      assert.equal(new BN('10', 16).idivn(3).toString(16), '5');\n      assert.equal(new BN('12', 16).idivn(3).toString(16), '6');\n      assert.equal(new BN('10000000000000000').idivn(3).toString(10),\n        '3333333333333333');\n      assert.equal(\n        new BN('100000000000000000000000000000').idivn(3).toString(10),\n        '33333333333333333333333333333');\n\n      var t = new BN(3);\n      assert.equal(\n        new BN('12345678901234567890123456', 16).idivn(3).toString(16),\n        new BN('12345678901234567890123456', 16).div(t).toString(16));\n    });\n  });\n\n  describe('.divRound()', function () {\n    it('should divide numbers with rounding', function () {\n      assert.equal(new BN(9).divRound(new BN(20)).toString(10),\n        '0');\n      assert.equal(new BN(10).divRound(new BN(20)).toString(10),\n        '1');\n      assert.equal(new BN(150).divRound(new BN(20)).toString(10),\n        '8');\n      assert.equal(new BN(149).divRound(new BN(20)).toString(10),\n        '7');\n      assert.equal(new BN(149).divRound(new BN(17)).toString(10),\n        '9');\n      assert.equal(new BN(144).divRound(new BN(17)).toString(10),\n        '8');\n      assert.equal(new BN(-144).divRound(new BN(17)).toString(10),\n        '-8');\n    });\n\n    it('should return 1 on exact division', function () {\n      assert.equal(new BN(144).divRound(new BN(144)).toString(10), '1');\n    });\n  });\n\n  describe('.mod()', function () {\n    it('should modulo small numbers (<=26 bits)', function () {\n      assert.equal(new BN('256').mod(new BN(10)).toString(10),\n        '6');\n      assert.equal(new BN('-256').mod(new BN(10)).toString(10),\n        '-6');\n      assert.equal(new BN('256').mod(new BN(-10)).toString(10),\n        '6');\n      assert.equal(new BN('-256').mod(new BN(-10)).toString(10),\n        '-6');\n\n      assert.equal(new BN('10').mod(new BN(256)).toString(10),\n        '10');\n      assert.equal(new BN('-10').mod(new BN(256)).toString(10),\n        '-10');\n      assert.equal(new BN('10').mod(new BN(-256)).toString(10),\n        '10');\n      assert.equal(new BN('-10').mod(new BN(-256)).toString(10),\n        '-10');\n    });\n\n    it('should modulo large numbers (>53 bits)', function () {\n      assert.equal(new BN('1222222225255589').mod(new BN('611111124969028'))\n        .toString(10), '611111100286561');\n      assert.equal(new BN('-1222222225255589').mod(new BN('611111124969028'))\n        .toString(10), '-611111100286561');\n      assert.equal(new BN('1222222225255589').mod(new BN('-611111124969028'))\n        .toString(10), '611111100286561');\n      assert.equal(new BN('-1222222225255589').mod(new BN('-611111124969028'))\n        .toString(10), '-611111100286561');\n\n      assert.equal(new BN('611111124969028').mod(new BN('1222222225255589'))\n        .toString(10), '611111124969028');\n      assert.equal(new BN('-611111124969028').mod(new BN('1222222225255589'))\n        .toString(10), '-611111124969028');\n      assert.equal(new BN('611111124969028').mod(new BN('-1222222225255589'))\n        .toString(10), '611111124969028');\n      assert.equal(new BN('-611111124969028').mod(new BN('-1222222225255589'))\n        .toString(10), '-611111124969028');\n    });\n\n    it('should mod numbers', function () {\n      assert.equal(new BN('10').mod(new BN(256)).toString(16),\n        'a');\n      assert.equal(new BN('69527932928').mod(new BN('16974594')).toString(16),\n        '102f302');\n\n      // 178 = 10 * 17 + 8\n      assert.equal(new BN(178).div(new BN(10)).toNumber(), 17);\n      assert.equal(new BN(178).mod(new BN(10)).toNumber(), 8);\n      assert.equal(new BN(178).umod(new BN(10)).toNumber(), 8);\n\n      // -178 = 10 * (-17) + (-8)\n      assert.equal(new BN(-178).div(new BN(10)).toNumber(), -17);\n      assert.equal(new BN(-178).mod(new BN(10)).toNumber(), -8);\n      assert.equal(new BN(-178).umod(new BN(10)).toNumber(), 2);\n\n      // 178 = -10 * (-17) + 8\n      assert.equal(new BN(178).div(new BN(-10)).toNumber(), -17);\n      assert.equal(new BN(178).mod(new BN(-10)).toNumber(), 8);\n      assert.equal(new BN(178).umod(new BN(-10)).toNumber(), 8);\n\n      // -178 = -10 * (17) + (-8)\n      assert.equal(new BN(-178).div(new BN(-10)).toNumber(), 17);\n      assert.equal(new BN(-178).mod(new BN(-10)).toNumber(), -8);\n      assert.equal(new BN(-178).umod(new BN(-10)).toNumber(), 2);\n\n      // -4 = 1 * (-3) + -1\n      assert.equal(new BN(-4).div(new BN(-3)).toNumber(), 1);\n      assert.equal(new BN(-4).mod(new BN(-3)).toNumber(), -1);\n\n      // -4 = -1 * (3) + -1\n      assert.equal(new BN(-4).mod(new BN(3)).toNumber(), -1);\n      // -4 = 1 * (-3) + (-1 + 3)\n      assert.equal(new BN(-4).umod(new BN(-3)).toNumber(), 2);\n\n      var p = new BN(\n        'ffffffff00000001000000000000000000000000ffffffffffffffffffffffff',\n        16);\n      var a = new BN(\n        'fffffffe00000003fffffffd0000000200000001fffffffe00000002ffffffff' +\n        'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff',\n        16);\n      assert.equal(\n        a.mod(p).toString(16),\n        '0');\n    });\n\n    it('should properly carry the sign inside division', function () {\n      var a = new BN('945304eb96065b2a98b57a48a06ae28d285a71b5', 'hex');\n      var b = new BN(\n        'fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe',\n        'hex');\n\n      assert.equal(a.mul(b).mod(a).cmpn(0), 0);\n    });\n  });\n\n  describe('.modn()', function () {\n    it('should act like .mod() on small numbers', function () {\n      assert.equal(new BN('10', 16).modn(256).toString(16), '10');\n      assert.equal(new BN('100', 16).modn(256).toString(16), '0');\n      assert.equal(new BN('1001', 16).modn(256).toString(16), '1');\n      assert.equal(new BN('100000000001', 16).modn(256).toString(16), '1');\n      assert.equal(new BN('100000000001', 16).modn(257).toString(16),\n        new BN('100000000001', 16).mod(new BN(257)).toString(16));\n      assert.equal(new BN('123456789012', 16).modn(3).toString(16),\n        new BN('123456789012', 16).mod(new BN(3)).toString(16));\n    });\n  });\n\n  describe('.abs()', function () {\n    it('should return absolute value', function () {\n      assert.equal(new BN(0x1001).abs().toString(), '4097');\n      assert.equal(new BN(-0x1001).abs().toString(), '4097');\n      assert.equal(new BN('ffffffff', 16).abs().toString(), '4294967295');\n    });\n  });\n\n  describe('.invm()', function () {\n    it('should invert relatively-prime numbers', function () {\n      var p = new BN(257);\n      var a = new BN(3);\n      var b = a.invm(p);\n      assert.equal(a.mul(b).mod(p).toString(16), '1');\n\n      var p192 = new BN(\n        'fffffffffffffffffffffffffffffffeffffffffffffffff',\n        16);\n      a = new BN('deadbeef', 16);\n      b = a.invm(p192);\n      assert.equal(a.mul(b).mod(p192).toString(16), '1');\n\n      // Even base\n      var phi = new BN('872d9b030ba368706b68932cf07a0e0c', 16);\n      var e = new BN(65537);\n      var d = e.invm(phi);\n      assert.equal(e.mul(d).mod(phi).toString(16), '1');\n\n      // Even base (take #2)\n      a = new BN('5');\n      b = new BN('6');\n      var r = a.invm(b);\n      assert.equal(r.mul(a).mod(b).toString(16), '1');\n    });\n  });\n\n  describe('.gcd()', function () {\n    it('should return GCD', function () {\n      assert.equal(new BN(3).gcd(new BN(2)).toString(10), '1');\n      assert.equal(new BN(18).gcd(new BN(12)).toString(10), '6');\n      assert.equal(new BN(-18).gcd(new BN(12)).toString(10), '6');\n      assert.equal(new BN(-18).gcd(new BN(-12)).toString(10), '6');\n      assert.equal(new BN(-18).gcd(new BN(0)).toString(10), '18');\n      assert.equal(new BN(0).gcd(new BN(-18)).toString(10), '18');\n      assert.equal(new BN(2).gcd(new BN(0)).toString(10), '2');\n      assert.equal(new BN(0).gcd(new BN(3)).toString(10), '3');\n      assert.equal(new BN(0).gcd(new BN(0)).toString(10), '0');\n    });\n  });\n\n  describe('.egcd()', function () {\n    it('should return EGCD', function () {\n      assert.equal(new BN(3).egcd(new BN(2)).gcd.toString(10), '1');\n      assert.equal(new BN(18).egcd(new BN(12)).gcd.toString(10), '6');\n      assert.equal(new BN(-18).egcd(new BN(12)).gcd.toString(10), '6');\n      assert.equal(new BN(0).egcd(new BN(12)).gcd.toString(10), '12');\n    });\n    it('should not allow 0 input', function () {\n      assert.throws(function () {\n        BN(1).egcd(0);\n      });\n    });\n    it('should not allow negative input', function () {\n      assert.throws(function () {\n        BN(1).egcd(-1);\n      });\n    });\n  });\n\n  describe('BN.max(a, b)', function () {\n    it('should return maximum', function () {\n      assert.equal(BN.max(new BN(3), new BN(2)).toString(16), '3');\n      assert.equal(BN.max(new BN(2), new BN(3)).toString(16), '3');\n      assert.equal(BN.max(new BN(2), new BN(2)).toString(16), '2');\n      assert.equal(BN.max(new BN(2), new BN(-2)).toString(16), '2');\n    });\n  });\n\n  describe('BN.min(a, b)', function () {\n    it('should return minimum', function () {\n      assert.equal(BN.min(new BN(3), new BN(2)).toString(16), '2');\n      assert.equal(BN.min(new BN(2), new BN(3)).toString(16), '2');\n      assert.equal(BN.min(new BN(2), new BN(2)).toString(16), '2');\n      assert.equal(BN.min(new BN(2), new BN(-2)).toString(16), '-2');\n    });\n  });\n\n  describe('BN.ineg', function () {\n    it('shouldn\\'t change sign for zero', function () {\n      assert.equal(new BN(0).ineg().toString(10), '0');\n    });\n  });\n});\n"]}