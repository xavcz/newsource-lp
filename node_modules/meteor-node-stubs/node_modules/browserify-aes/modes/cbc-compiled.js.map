{"version":3,"sources":["cbc.js"],"names":[],"mappings":";;AAAA,IAAI,GAAG,GAAG,OAAO,CAAC,YAAY,CAAC,CAAA;;AAE/B,OAAO,CAAC,OAAO,GAAG,UAAU,IAAI,EAAE,KAAK,EAAE;AACvC,MAAI,IAAI,GAAG,GAAG,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,CAAA;;AAEjC,MAAI,CAAC,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,IAAI,CAAC,CAAA;AAC5C,SAAO,IAAI,CAAC,KAAK,CAAA;CAClB,CAAA;;AAED,OAAO,CAAC,OAAO,GAAG,UAAU,IAAI,EAAE,KAAK,EAAE;AACvC,MAAI,GAAG,GAAG,IAAI,CAAC,KAAK,CAAA;;AAEpB,MAAI,CAAC,KAAK,GAAG,KAAK,CAAA;AAClB,MAAI,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,KAAK,CAAC,CAAA;;AAE1C,SAAO,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAA;CACrB,CAAA","file":"cbc-compiled.js","sourcesContent":["var xor = require('buffer-xor')\n\nexports.encrypt = function (self, block) {\n  var data = xor(block, self._prev)\n\n  self._prev = self._cipher.encryptBlock(data)\n  return self._prev\n}\n\nexports.decrypt = function (self, block) {\n  var pad = self._prev\n\n  self._prev = block\n  var out = self._cipher.decryptBlock(block)\n\n  return xor(out, pad)\n}\n"]}