{"version":3,"sources":["ctr.js"],"names":[],"mappings":";;AAAA,IAAI,GAAG,GAAG,OAAO,CAAC,YAAY,CAAC,CAAA;;AAE/B,SAAS,MAAM,CAAE,EAAE,EAAE;AACnB,MAAI,GAAG,GAAG,EAAE,CAAC,MAAM,CAAA;AACnB,MAAI,IAAI,CAAA;AACR,SAAO,GAAG,EAAE,EAAE;AACZ,QAAI,GAAG,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC,CAAA;AACxB,QAAI,IAAI,KAAK,GAAG,EAAE;AAChB,QAAE,CAAC,UAAU,CAAC,CAAC,EAAE,GAAG,CAAC,CAAA;KACtB,MAAM;AACL,UAAI,EAAE,CAAA;AACN,QAAE,CAAC,UAAU,CAAC,IAAI,EAAE,GAAG,CAAC,CAAA;AACxB,YAAK;KACN;GACF;CACF;;AAED,SAAS,QAAQ,CAAE,IAAI,EAAE;AACvB,MAAI,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;AAC/C,QAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;AAClB,SAAO,GAAG,CAAA;CACX;;AAED,OAAO,CAAC,OAAO,GAAG,UAAU,IAAI,EAAE,KAAK,EAAE;AACvC,SAAO,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,KAAK,CAAC,MAAM,EAAE;AACxC,QAAI,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,MAAM,EAAE,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;GAC3D;AACD,MAAI,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,MAAM,CAAC,CAAA;AAC5C,MAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,CAAA;AAC7C,SAAO,GAAG,CAAC,KAAK,EAAE,GAAG,CAAC,CAAA;CACvB,CAAA","file":"ctr-compiled.js","sourcesContent":["var xor = require('buffer-xor')\n\nfunction incr32 (iv) {\n  var len = iv.length\n  var item\n  while (len--) {\n    item = iv.readUInt8(len)\n    if (item === 255) {\n      iv.writeUInt8(0, len)\n    } else {\n      item++\n      iv.writeUInt8(item, len)\n      break\n    }\n  }\n}\n\nfunction getBlock (self) {\n  var out = self._cipher.encryptBlock(self._prev)\n  incr32(self._prev)\n  return out\n}\n\nexports.encrypt = function (self, chunk) {\n  while (self._cache.length < chunk.length) {\n    self._cache = Buffer.concat([self._cache, getBlock(self)])\n  }\n  var pad = self._cache.slice(0, chunk.length)\n  self._cache = self._cache.slice(chunk.length)\n  return xor(chunk, pad)\n}\n"]}