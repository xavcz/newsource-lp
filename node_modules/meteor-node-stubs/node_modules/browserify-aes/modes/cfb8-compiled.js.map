{"version":3,"sources":["cfb8.js"],"names":[],"mappings":";;AAAA,SAAS,WAAW,CAAE,IAAI,EAAE,SAAS,EAAE,OAAO,EAAE;AAC9C,MAAI,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;AAC/C,MAAI,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,SAAS,CAAA;AAC5B,MAAI,CAAC,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,IAAI,MAAM,CAAC,CAAC,OAAO,GAAG,SAAS,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAA;AAC1F,SAAO,GAAG,CAAA;CACX;AACD,OAAO,CAAC,OAAO,GAAG,UAAU,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE;AAChD,MAAI,GAAG,GAAG,KAAK,CAAC,MAAM,CAAA;AACtB,MAAI,GAAG,GAAG,IAAI,MAAM,CAAC,GAAG,CAAC,CAAA;AACzB,MAAI,CAAC,GAAG,CAAC,CAAC,CAAA;AACV,SAAO,EAAE,CAAC,GAAG,GAAG,EAAE;AAChB,OAAG,CAAC,CAAC,CAAC,GAAG,WAAW,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAA;GAC9C;AACD,SAAO,GAAG,CAAA;CACX,CAAA","file":"cfb8-compiled.js","sourcesContent":["function encryptByte (self, byteParam, decrypt) {\n  var pad = self._cipher.encryptBlock(self._prev)\n  var out = pad[0] ^ byteParam\n  self._prev = Buffer.concat([self._prev.slice(1), new Buffer([decrypt ? byteParam : out])])\n  return out\n}\nexports.encrypt = function (self, chunk, decrypt) {\n  var len = chunk.length\n  var out = new Buffer(len)\n  var i = -1\n  while (++i < len) {\n    out[i] = encryptByte(self, chunk[i], decrypt)\n  }\n  return out\n}\n"]}