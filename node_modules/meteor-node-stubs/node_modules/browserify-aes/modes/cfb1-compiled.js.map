{"version":3,"sources":["cfb1.js"],"names":[],"mappings":";;AAAA,SAAS,WAAW,CAAE,IAAI,EAAE,SAAS,EAAE,OAAO,EAAE;AAC9C,MAAI,GAAG,CAAA;AACP,MAAI,CAAC,GAAG,CAAC,CAAC,CAAA;AACV,MAAI,GAAG,GAAG,CAAC,CAAA;AACX,MAAI,GAAG,GAAG,CAAC,CAAA;AACX,MAAI,GAAG,EAAE,KAAK,CAAA;AACd,SAAO,EAAE,CAAC,GAAG,GAAG,EAAE;AAChB,OAAG,GAAG,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;AAC3C,OAAG,GAAG,AAAC,SAAS,GAAI,CAAC,IAAK,CAAC,GAAG,CAAC,AAAC,AAAC,GAAI,IAAI,GAAG,CAAC,CAAA;AAC7C,SAAK,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAA;AACpB,OAAG,IAAK,CAAC,KAAK,GAAG,IAAI,CAAA,IAAM,CAAC,GAAG,CAAC,AAAC,AAAC,CAAA;AAClC,QAAI,CAAC,KAAK,GAAG,OAAO,CAAC,IAAI,CAAC,KAAK,EAAE,OAAO,GAAG,GAAG,GAAG,KAAK,CAAC,CAAA;GACxD;AACD,SAAO,GAAG,CAAA;CACX;AACD,OAAO,CAAC,OAAO,GAAG,UAAU,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE;AAChD,MAAI,GAAG,GAAG,KAAK,CAAC,MAAM,CAAA;AACtB,MAAI,GAAG,GAAG,IAAI,MAAM,CAAC,GAAG,CAAC,CAAA;AACzB,MAAI,CAAC,GAAG,CAAC,CAAC,CAAA;AACV,SAAO,EAAE,CAAC,GAAG,GAAG,EAAE;AAChB,OAAG,CAAC,CAAC,CAAC,GAAG,WAAW,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAA;GAC9C;AACD,SAAO,GAAG,CAAA;CACX,CAAA;AACD,SAAS,OAAO,CAAE,MAAM,EAAE,KAAK,EAAE;AAC/B,MAAI,GAAG,GAAG,MAAM,CAAC,MAAM,CAAA;AACvB,MAAI,CAAC,GAAG,CAAC,CAAC,CAAA;AACV,MAAI,GAAG,GAAG,IAAI,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAA;AACnC,QAAM,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,MAAM,EAAE,IAAI,MAAM,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAA;AACrD,SAAO,EAAE,CAAC,GAAG,GAAG,EAAE;AAChB,OAAG,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,IAAK,CAAC,AAAC,CAAA;GAC/C;AACD,SAAO,GAAG,CAAA;CACX","file":"cfb1-compiled.js","sourcesContent":["function encryptByte (self, byteParam, decrypt) {\n  var pad\n  var i = -1\n  var len = 8\n  var out = 0\n  var bit, value\n  while (++i < len) {\n    pad = self._cipher.encryptBlock(self._prev)\n    bit = (byteParam & (1 << (7 - i))) ? 0x80 : 0\n    value = pad[0] ^ bit\n    out += ((value & 0x80) >> (i % 8))\n    self._prev = shiftIn(self._prev, decrypt ? bit : value)\n  }\n  return out\n}\nexports.encrypt = function (self, chunk, decrypt) {\n  var len = chunk.length\n  var out = new Buffer(len)\n  var i = -1\n  while (++i < len) {\n    out[i] = encryptByte(self, chunk[i], decrypt)\n  }\n  return out\n}\nfunction shiftIn (buffer, value) {\n  var len = buffer.length\n  var i = -1\n  var out = new Buffer(buffer.length)\n  buffer = Buffer.concat([buffer, new Buffer([value])])\n  while (++i < len) {\n    out[i] = buffer[i] << 1 | buffer[i + 1] >> (7)\n  }\n  return out\n}\n"]}