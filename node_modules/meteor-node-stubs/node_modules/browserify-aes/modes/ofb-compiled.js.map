{"version":3,"sources":["ofb.js"],"names":[],"mappings":";;AAAA,IAAI,GAAG,GAAG,OAAO,CAAC,YAAY,CAAC,CAAA;;AAE/B,SAAS,QAAQ,CAAE,IAAI,EAAE;AACvB,MAAI,CAAC,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;AAClD,SAAO,IAAI,CAAC,KAAK,CAAA;CAClB;;AAED,OAAO,CAAC,OAAO,GAAG,UAAU,IAAI,EAAE,KAAK,EAAE;AACvC,SAAO,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,KAAK,CAAC,MAAM,EAAE;AACxC,QAAI,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,MAAM,EAAE,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;GAC3D;;AAED,MAAI,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,MAAM,CAAC,CAAA;AAC5C,MAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,CAAA;AAC7C,SAAO,GAAG,CAAC,KAAK,EAAE,GAAG,CAAC,CAAA;CACvB,CAAA","file":"ofb-compiled.js","sourcesContent":["var xor = require('buffer-xor')\n\nfunction getBlock (self) {\n  self._prev = self._cipher.encryptBlock(self._prev)\n  return self._prev\n}\n\nexports.encrypt = function (self, chunk) {\n  while (self._cache.length < chunk.length) {\n    self._cache = Buffer.concat([self._cache, getBlock(self)])\n  }\n\n  var pad = self._cache.slice(0, chunk.length)\n  self._cache = self._cache.slice(chunk.length)\n  return xor(chunk, pad)\n}\n"]}