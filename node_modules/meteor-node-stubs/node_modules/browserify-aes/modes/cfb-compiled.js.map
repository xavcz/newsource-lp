{"version":3,"sources":["cfb.js"],"names":[],"mappings":";;AAAA,IAAI,GAAG,GAAG,OAAO,CAAC,YAAY,CAAC,CAAA;;AAE/B,OAAO,CAAC,OAAO,GAAG,UAAU,IAAI,EAAE,IAAI,EAAE,OAAO,EAAE;AAC/C,MAAI,GAAG,GAAG,IAAI,MAAM,CAAC,EAAE,CAAC,CAAA;AACxB,MAAI,GAAG,CAAA;;AAEP,SAAO,IAAI,CAAC,MAAM,EAAE;AAClB,QAAI,IAAI,CAAC,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;AAC5B,UAAI,CAAC,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;AACnD,UAAI,CAAC,KAAK,GAAG,IAAI,MAAM,CAAC,EAAE,CAAC,CAAA;KAC5B;;AAED,QAAI,IAAI,CAAC,MAAM,CAAC,MAAM,IAAI,IAAI,CAAC,MAAM,EAAE;AACrC,SAAG,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAA;AACxB,SAAG,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,YAAY,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,CAAA;AAC3E,UAAI,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;KACvB,MAAM;AACL,SAAG,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,YAAY,CAAC,IAAI,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC,CAAC,CAAA;AAC7D,YAAK;KACN;GACF;;AAED,SAAO,GAAG,CAAA;CACX,CAAA;AACD,SAAS,YAAY,CAAE,IAAI,EAAE,IAAI,EAAE,OAAO,EAAE;AAC1C,MAAI,GAAG,GAAG,IAAI,CAAC,MAAM,CAAA;AACrB,MAAI,GAAG,GAAG,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,CAAA;AAChC,MAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;AACpC,MAAI,CAAC,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,KAAK,EAAE,OAAO,GAAG,IAAI,GAAG,GAAG,CAAC,CAAC,CAAA;AAC9D,SAAO,GAAG,CAAA;CACX","file":"cfb-compiled.js","sourcesContent":["var xor = require('buffer-xor')\n\nexports.encrypt = function (self, data, decrypt) {\n  var out = new Buffer('')\n  var len\n\n  while (data.length) {\n    if (self._cache.length === 0) {\n      self._cache = self._cipher.encryptBlock(self._prev)\n      self._prev = new Buffer('')\n    }\n\n    if (self._cache.length <= data.length) {\n      len = self._cache.length\n      out = Buffer.concat([out, encryptStart(self, data.slice(0, len), decrypt)])\n      data = data.slice(len)\n    } else {\n      out = Buffer.concat([out, encryptStart(self, data, decrypt)])\n      break\n    }\n  }\n\n  return out\n}\nfunction encryptStart (self, data, decrypt) {\n  var len = data.length\n  var out = xor(data, self._cache)\n  self._cache = self._cache.slice(len)\n  self._prev = Buffer.concat([self._prev, decrypt ? data : out])\n  return out\n}\n"]}