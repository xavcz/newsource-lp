{"version":3,"sources":["populateFixtures.js"],"names":[],"mappings":";;AAAA,IAAI,KAAK,GAAG,OAAO,CAAC,SAAS,CAAC,CAAA;AAC9B,IAAI,QAAQ,GAAG,OAAO,CAAC,sBAAsB,CAAC,CAAA;AAC9C,IAAI,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAA;AAC9B,IAAI,KAAK,GAAG,CAAC,cAAc,EAAE,cAAc,EAAE,cAAc,CAAC,CAAA;AAC5D,IAAI,IAAI,GAAG,OAAO,CAAC,kBAAkB,CAAC,CAAA;AACtC,IAAI,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,CAAA;;AAEtB,QAAQ,CAAC,OAAO,CAAC,UAAU,OAAO,EAAE;AAClC,OAAK,CAAC,OAAO,CAAC,UAAU,MAAM,EAAE;AAC9B,QAAI,KAAK,GAAG,MAAM,CAAC,YAAY,CAAC,MAAM,EAAE,IAAI,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAA;AACrE,QAAI,GAAG,GAAG,IAAI,MAAM,CAAC,EAAE,CAAC,CAAA;AACxB,OAAG,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,KAAK,CAAC,MAAM,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAA;AAClE,OAAG,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,KAAK,CAAC,KAAK,EAAE,CAAC,CAAC,CAAA;AACzC,WAAO,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,GAAG,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAA;AACrD,QAAI,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,KAAK,KAAK,EAAE;AAChC,aAAM;KACP;AACD,QAAI,MAAM,GAAG,MAAM,CAAC,cAAc,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,EAAE,OAAO,CAAC,QAAQ,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,IAAI,MAAM,CAAC,OAAO,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC,CAAA;AAChI,QAAI,IAAI,GAAG,IAAI,MAAM,CAAC,EAAE,CAAC,CAAA;AACzB,QAAI,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,MAAM,CAAC,MAAM,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAA;AACrE,QAAI,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAA;AAC5C,WAAO,CAAC,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAA;GACzD,CAAC,CAAA;CACH,CAAC,CAAA;AACF,EAAE,CAAC,aAAa,CAAC,yBAAyB,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC,CAAA","file":"populateFixtures-compiled.js","sourcesContent":["var modes = require('./modes')\nvar fixtures = require('./test/fixtures.json')\nvar crypto = require('crypto')\nvar types = ['aes-128-cfb1', 'aes-192-cfb1', 'aes-256-cfb1']\nvar ebtk = require('./EVP_BytesToKey')\nvar fs = require('fs')\n\nfixtures.forEach(function (fixture) {\n  types.forEach(function (cipher) {\n    var suite = crypto.createCipher(cipher, new Buffer(fixture.password))\n    var buf = new Buffer('')\n    buf = Buffer.concat([buf, suite.update(new Buffer(fixture.text))])\n    buf = Buffer.concat([buf, suite.final()])\n    fixture.results.ciphers[cipher] = buf.toString('hex')\n    if (modes[cipher].mode === 'ECB') {\n      return\n    }\n    var suite2 = crypto.createCipheriv(cipher, ebtk(crypto, fixture.password, modes[cipher].key).key, new Buffer(fixture.iv, 'hex'))\n    var buf2 = new Buffer('')\n    buf2 = Buffer.concat([buf2, suite2.update(new Buffer(fixture.text))])\n    buf2 = Buffer.concat([buf2, suite2.final()])\n    fixture.results.cipherivs[cipher] = buf2.toString('hex')\n  })\n})\nfs.writeFileSync('./test/fixturesNew.json', JSON.stringify(fixtures, false, 4))\n"]}