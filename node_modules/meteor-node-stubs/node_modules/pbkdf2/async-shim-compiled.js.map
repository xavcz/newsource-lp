{"version":3,"sources":["async-shim.js"],"names":[],"mappings":";;AAAA,IAAI,MAAM,GAAG,OAAO,CAAC,WAAW,CAAC,CAAA;;AAEjC,OAAO,CAAC,EAAE,CAAC,SAAS,EAAE,UAAU,CAAC,EAAE;AACjC,MAAI;AACF,QAAI,MAAM,GAAG,MAAM,CAAC,UAAU,CAAC,IAAI,MAAM,CAAC,CAAC,CAAC,QAAQ,EAAE,KAAK,CAAC,EAAE,IAAI,MAAM,CAAC,CAAC,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,CAAC,CAAC,UAAU,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,MAAM,CAAC,CAAA;;AAE1H,WAAO,CAAC,IAAI,CAAC;AACX,UAAI,EAAE,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC;AAC5B,UAAI,EAAE,SAAS;KAChB,CAAC,CAAA;GACH,CAAC,OAAO,CAAC,EAAE;AACV,WAAO,CAAC,IAAI,CAAC;AACX,UAAI,EAAE,CAAC,IAAI,CAAC,CAAC,OAAO;AACpB,UAAI,EAAE,MAAM;KACb,CAAC,CAAA;GACH,SAAS;AACR,WAAO,CAAC,IAAI,EAAE,CAAA;GACf;CACF,CAAC,CAAA","file":"async-shim-compiled.js","sourcesContent":["var compat = require('./browser')\n\nprocess.on('message', function (m) {\n  try {\n    var result = compat.pbkdf2Sync(new Buffer(m.password, 'hex'), new Buffer(m.salt, 'hex'), m.iterations, m.keylen, m.digest)\n\n    process.send({\n      data: result.toString('hex'),\n      type: 'success'\n    })\n  } catch (e) {\n    process.send({\n      data: e && e.message,\n      type: 'fail'\n    })\n  } finally {\n    process.exit()\n  }\n})\n"]}