{"version":3,"sources":["base64.js"],"names":[],"mappings":";;AAAA,IAAI,OAAO,CAAC,GAAG,CAAC,WAAW,EAAE,MAAM,CAAC,mBAAmB,GAAG,KAAK,CAAA;AAC/D,IAAI,CAAC,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC,MAAM,CAAA;AAC7B,IAAI,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAA;;AAE1B,IAAI,CAAC,2BAA2B,EAAE,UAAU,CAAC,EAAE;AAC7C,MAAI,IAAI,GAAG,iBAAiB,CAAA;AAC5B,MAAI,GAAG,GAAG,IAAI,CAAC,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAA;AAC/B,GAAC,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,EAAE,EAAE,MAAM,CAAC,CAAA;AAC/B,GAAC,CAAC,GAAG,EAAE,CAAA;CACR,CAAC,CAAA;;AAEF,IAAI,CAAC,iCAAiC,EAAE,UAAU,CAAC,EAAE;AACnD,GAAC,CAAC,KAAK,CAAE,IAAI,CAAC,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC,QAAQ,EAAE,EAAG,MAAM,CAAC,CAAA;AACvD,GAAC,CAAC,GAAG,EAAE,CAAA;CACR,CAAC,CAAA;;AAEF,IAAI,CAAC,mDAAmD,EAAE,UAAU,CAAC,EAAE;AACrE,GAAC,CAAC,KAAK,CACL,IAAI,CAAC,CAAC,8DAA8D,EAAE,QAAQ,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,EAChG,kDAAkD,CACnD,CAAA;AACD,GAAC,CAAC,GAAG,EAAE,CAAA;CACR,CAAC,CAAA;;AAEF,IAAI,CAAC,kDAAkD,EAAE,UAAU,CAAC,EAAE;AACpE,GAAC,CAAC,KAAK,CACL,IAAI,CAAC,CAAC,4HAA4H,EAAE,QAAQ,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,EAC9J,kGAAkG,CACnG,CAAA;AACD,GAAC,CAAC,GAAG,EAAE,CAAA;CACR,CAAC,CAAA;;AAEF,IAAI,CAAC,wDAAwD,EAAE,UAAU,CAAC,EAAE;AAC1E,GAAC,CAAC,KAAK,CACL,IAAI,CAAC,CAAC,kIAAkI,EAAE,QAAQ,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,EACpK,kGAAkG,CACnG,CAAA;AACD,GAAC,CAAC,GAAG,EAAE,CAAA;CACR,CAAC,CAAA;;AAEF,IAAI,CAAC,mEAAmE,EAAE,UAAU,CAAC,EAAE;AACrF,GAAC,CAAC,KAAK,CACL,IAAI,CAAC,CAAC,gCAAgC,EAAE,QAAQ,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,EAClE,EAAE,CACH,CAAA;AACD,GAAC,CAAC,GAAG,EAAE,CAAA;CACR,CAAC,CAAA","file":"base64-compiled.js","sourcesContent":["if (process.env.OBJECT_IMPL) global.TYPED_ARRAY_SUPPORT = false\nvar B = require('../').Buffer\nvar test = require('tape')\n\ntest('base64: ignore whitespace', function (t) {\n  var text = '\\n   YW9ldQ==  '\n  var buf = new B(text, 'base64')\n  t.equal(buf.toString(), 'aoeu')\n  t.end()\n})\n\ntest('base64: strings without padding', function (t) {\n  t.equal((new B('YW9ldQ', 'base64').toString()), 'aoeu')\n  t.end()\n})\n\ntest('base64: newline in utf8 -- should not be an issue', function (t) {\n  t.equal(\n    new B('LS0tCnRpdGxlOiBUaHJlZSBkYXNoZXMgbWFya3MgdGhlIHNwb3QKdGFnczoK', 'base64').toString('utf8'),\n    '---\\ntitle: Three dashes marks the spot\\ntags:\\n'\n  )\n  t.end()\n})\n\ntest('base64: newline in base64 -- should get stripped', function (t) {\n  t.equal(\n    new B('LS0tCnRpdGxlOiBUaHJlZSBkYXNoZXMgbWFya3MgdGhlIHNwb3QKdGFnczoK\\nICAtIHlhbWwKICAtIGZyb250LW1hdHRlcgogIC0gZGFzaGVzCmV4cGFuZWQt', 'base64').toString('utf8'),\n    '---\\ntitle: Three dashes marks the spot\\ntags:\\n  - yaml\\n  - front-matter\\n  - dashes\\nexpaned-'\n  )\n  t.end()\n})\n\ntest('base64: tab characters in base64 - should get stripped', function (t) {\n  t.equal(\n    new B('LS0tCnRpdGxlOiBUaHJlZSBkYXNoZXMgbWFya3MgdGhlIHNwb3QKdGFnczoK\\t\\t\\t\\tICAtIHlhbWwKICAtIGZyb250LW1hdHRlcgogIC0gZGFzaGVzCmV4cGFuZWQt', 'base64').toString('utf8'),\n    '---\\ntitle: Three dashes marks the spot\\ntags:\\n  - yaml\\n  - front-matter\\n  - dashes\\nexpaned-'\n  )\n  t.end()\n})\n\ntest('base64: invalid non-alphanumeric characters -- should be stripped', function (t) {\n  t.equal(\n    new B('!\"#$%&\\'()*,.:;<=>?@[\\\\]^`{|}~', 'base64').toString('utf8'),\n    ''\n  )\n  t.end()\n})\n"]}