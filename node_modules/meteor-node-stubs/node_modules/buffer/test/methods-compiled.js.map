{"version":3,"sources":["methods.js"],"names":[],"mappings":";;AAAA,IAAI,OAAO,CAAC,GAAG,CAAC,WAAW,EAAE,MAAM,CAAC,mBAAmB,GAAG,KAAK,CAAA;AAC/D,IAAI,CAAC,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC,MAAM,CAAA;AAC7B,IAAI,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAA;;AAE1B,IAAI,CAAC,eAAe,EAAE,UAAU,CAAC,EAAE;AACjC,MAAI,IAAI,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAA;AACvB,GAAC,CAAC,SAAS,CACT,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,EACpB,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE,EAAE,CACzC,CAAA;AACD,GAAC,CAAC,GAAG,EAAE,CAAA;CACR,CAAC,CAAA;;AAEF,IAAI,CAAC,aAAa,EAAE,UAAU,CAAC,EAAE;;AAE/B,MAAI,IAAI,GAAG,IAAI,CAAC,CAAC,EAAE,CAAC,CAAA;AACpB,MAAI,IAAI,GAAG,IAAI,CAAC,CAAC,EAAE,CAAC,CAAA;;AAEpB,OAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE;AAC3B,QAAI,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAA;AAChB,QAAI,CAAC,CAAC,CAAC,GAAG,EAAE,CAAA;GACb;;AAED,MAAI,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAA;;AAE1B,GAAC,CAAC,KAAK,CACL,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC,EAAE,EAAE,CAAC,EAC7B,2BAA2B,CAC5B,CAAA;AACD,GAAC,CAAC,GAAG,EAAE,CAAA;CACR,CAAC,CAAA;;AAEF,IAAI,CAAC,iCAAiC,EAAE,UAAU,CAAC,EAAE;AACnD,MAAI,CAAC,GAAG,IAAI,CAAC,CAAC,EAAE,CAAC,CAAA;AACjB,GAAC,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,aAAa,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAA;AACjC,GAAC,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,aAAa,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAA;AACjC,GAAC,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAA;AAC9B,GAAC,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAA;AAC7B,GAAC,CAAC,KAAK,CAAC,EAAE,EAAE,CAAC,CAAC,aAAa,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAA;AAClC,GAAC,CAAC,GAAG,EAAE,CAAA;CACR,CAAC,CAAA;;AAEF,IAAI,CAAC,sCAAsC,EAAE,UAAU,CAAC,EAAE;AACxD,MAAI,IAAI,GAAG,EAAE,CAAA;AACb,MAAI,GAAG,GAAG,CAAE,IAAI,CAAC,CAAC,MAAM,CAAC,CAAE,CAAA;AAC3B,MAAI,IAAI,GAAG,EAAE,CAAA;AACb,OAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE;AAC3B,QAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,CAAC,CAAA;GACzB;;AAED,MAAI,QAAQ,GAAG,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAA;AAC7B,MAAI,OAAO,GAAG,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,CAAA;AAC3B,MAAI,QAAQ,GAAG,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAA;AAC7B,MAAI,WAAW,GAAG,CAAC,CAAC,MAAM,CAAC,IAAI,EAAE,EAAE,CAAC,CAAA;;AAEpC,GAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC,CAAA;AAC3B,GAAC,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,EAAE,EAAE,MAAM,CAAC,CAAA;AACnC,GAAC,CAAC,SAAS,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAA;AAC5B,GAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,QAAQ,EAAE,EAAG,IAAI,KAAK,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAE,CAAA;AAC9D,GAAC,CAAC,KAAK,CAAC,WAAW,CAAC,QAAQ,EAAE,EAAG,IAAI,KAAK,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAE,CAAA;AACjE,GAAC,CAAC,GAAG,EAAE,CAAA;CACR,CAAC,CAAA;;AAEF,IAAI,CAAC,MAAM,EAAE,UAAU,CAAC,EAAE;AACxB,MAAI,CAAC,GAAG,IAAI,CAAC,CAAC,EAAE,CAAC,CAAA;AACjB,GAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;AACT,GAAC,CAAC,KAAK,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,sBAAsB,CAAC,CAAA;AAClD,GAAC,CAAC,GAAG,EAAE,CAAA;CACR,CAAC,CAAA;;AAEF,IAAI,CAAC,eAAe,EAAE,UAAU,CAAC,EAAE;AACjC,MAAI,CAAC,GAAG,IAAI,CAAC,CAAC,EAAE,CAAC,CAAA;AACjB,GAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;AACb,GAAC,CAAC,KAAK,CAAC,CAAC,CAAC,QAAQ,EAAE,EAAE,YAAY,CAAC,CAAA;AACnC,GAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;AACX,GAAC,CAAC,KAAK,CAAC,CAAC,CAAC,QAAQ,EAAE,EAAE,OAAO,CAAC,CAAA;AAC9B,GAAC,CAAC,GAAG,EAAE,CAAA;CACR,CAAC,CAAA;;AAEF,IAAI,CAAC,sCAAsC,EAAE,UAAU,CAAC,EAAE;AACxD,MAAI,MAAM,GAAG,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;AACxB,MAAI,WAAW,GAAG,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;AAC7B,QAAM,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAA;AACjC,GAAC,CAAC,KAAK,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAA;AACrC,GAAC,CAAC,GAAG,EAAE,CAAA;CACR,CAAC,CAAA;;AAEF,IAAI,CAAC,sBAAsB,EAAE,UAAU,CAAC,EAAE;AACxC,MAAI,MAAM,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC,CAAA;AACvB,MAAI,IAAI,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC,CAAA;AACrB,MAAI,QAAQ,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC,CAAA;AACzB,OAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;AAC5B,UAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAAA;AACb,QAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAA;GACZ;;AAED,QAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;AAC1B,QAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,EAAE,CAAC,CAAC,CAAA;AAC3B,GAAC,CAAC,SAAS,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAA;AAC3B,GAAC,CAAC,GAAG,EAAE,CAAA;CACR,CAAC,CAAA;;AAEF,IAAI,CAAC,kBAAkB,EAAE,UAAU,CAAC,EAAE;AACpC,MAAI,CAAC,GAAG,IAAI,CAAC,CAAC,YAAY,CAAC,CAAA;AAC3B,GAAC,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAA;AACnB,GAAC,CAAC,KAAK,CAAC,CAAC,CAAC,QAAQ,EAAE,EAAE,YAAY,CAAC,CAAA;AACnC,GAAC,CAAC,GAAG,EAAE,CAAA;CACR,CAAC,CAAA;;AAEF,IAAI,CAAC,mBAAmB,EAAE,UAAU,CAAC,EAAE;AACrC,MAAI,CAAC,GAAG,IAAI,CAAC,CAAC,YAAY,CAAC,CAAA;AAC3B,GAAC,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAA;AAClB,GAAC,CAAC,KAAK,CAAC,CAAC,CAAC,QAAQ,EAAE,EAAE,YAAY,CAAC,CAAA;AACnC,GAAC,CAAC,GAAG,EAAE,CAAA;CACR,CAAC,CAAA;;AAEF,IAAI,CAAC,2BAA2B,EAAE,UAAU,CAAC,EAAE;AAC7C,GAAC,CAAC,KAAK,CAAC,AAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAE,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,EAAE,EAAE,OAAO,CAAC,CAAA;AACzD,GAAC,CAAC,GAAG,EAAE,CAAA;CACR,CAAC,CAAA;;AAEF,IAAI,CAAC,2BAA2B,EAAE,UAAU,CAAC,EAAE;AAC7C,GAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;AACT,GAAC,CAAC,KAAK,CAAC,AAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAE,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,QAAQ,EAAE,EAAE,OAAO,CAAC,CAAA;AAC1D,GAAC,CAAC,KAAK,CAAC,AAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAE,KAAK,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,QAAQ,EAAE,EAAE,EAAE,CAAC,CAAA;AACrD,GAAC,CAAC,GAAG,EAAE,CAAA;CACR,CAAC,CAAA","file":"methods-compiled.js","sourcesContent":["if (process.env.OBJECT_IMPL) global.TYPED_ARRAY_SUPPORT = false\nvar B = require('../').Buffer\nvar test = require('tape')\n\ntest('buffer.toJSON', function (t) {\n  var data = [1, 2, 3, 4]\n  t.deepEqual(\n    new B(data).toJSON(),\n    { type: 'Buffer', data: [ 1, 2, 3, 4 ] }\n  )\n  t.end()\n})\n\ntest('buffer.copy', function (t) {\n  // copied from nodejs.org example\n  var buf1 = new B(26)\n  var buf2 = new B(26)\n\n  for (var i = 0; i < 26; i++) {\n    buf1[i] = i + 97 // 97 is ASCII a\n    buf2[i] = 33 // ASCII !\n  }\n\n  buf1.copy(buf2, 8, 16, 20)\n\n  t.equal(\n    buf2.toString('ascii', 0, 25),\n    '!!!!!!!!qrst!!!!!!!!!!!!!'\n  )\n  t.end()\n})\n\ntest('test offset returns are correct', function (t) {\n  var b = new B(16)\n  t.equal(4, b.writeUInt32LE(0, 0))\n  t.equal(6, b.writeUInt16LE(0, 4))\n  t.equal(7, b.writeUInt8(0, 6))\n  t.equal(8, b.writeInt8(0, 7))\n  t.equal(16, b.writeDoubleLE(0, 8))\n  t.end()\n})\n\ntest('concat() a varying number of buffers', function (t) {\n  var zero = []\n  var one = [ new B('asdf') ]\n  var long = []\n  for (var i = 0; i < 10; i++) {\n    long.push(new B('asdf'))\n  }\n\n  var flatZero = B.concat(zero)\n  var flatOne = B.concat(one)\n  var flatLong = B.concat(long)\n  var flatLongLen = B.concat(long, 40)\n\n  t.equal(flatZero.length, 0)\n  t.equal(flatOne.toString(), 'asdf')\n  t.deepEqual(flatOne, one[0])\n  t.equal(flatLong.toString(), (new Array(10 + 1).join('asdf')))\n  t.equal(flatLongLen.toString(), (new Array(10 + 1).join('asdf')))\n  t.end()\n})\n\ntest('fill', function (t) {\n  var b = new B(10)\n  b.fill(2)\n  t.equal(b.toString('hex'), '02020202020202020202')\n  t.end()\n})\n\ntest('fill (string)', function (t) {\n  var b = new B(10)\n  b.fill('abc')\n  t.equal(b.toString(), 'abcabcabca')\n  b.fill('է')\n  t.equal(b.toString(), 'էէէէէ')\n  t.end()\n})\n\ntest('copy() empty buffer with sourceEnd=0', function (t) {\n  var source = new B([42])\n  var destination = new B([43])\n  source.copy(destination, 0, 0, 0)\n  t.equal(destination.readUInt8(0), 43)\n  t.end()\n})\n\ntest('copy() after slice()', function (t) {\n  var source = new B(200)\n  var dest = new B(200)\n  var expected = new B(200)\n  for (var i = 0; i < 200; i++) {\n    source[i] = i\n    dest[i] = 0\n  }\n\n  source.slice(2).copy(dest)\n  source.copy(expected, 0, 2)\n  t.deepEqual(dest, expected)\n  t.end()\n})\n\ntest('copy() ascending', function (t) {\n  var b = new B('abcdefghij')\n  b.copy(b, 0, 3, 10)\n  t.equal(b.toString(), 'defghijhij')\n  t.end()\n})\n\ntest('copy() descending', function (t) {\n  var b = new B('abcdefghij')\n  b.copy(b, 3, 0, 7)\n  t.equal(b.toString(), 'abcabcdefg')\n  t.end()\n})\n\ntest('buffer.slice sets indexes', function (t) {\n  t.equal((new B('hallo')).slice(0, 5).toString(), 'hallo')\n  t.end()\n})\n\ntest('buffer.slice out of range', function (t) {\n  t.plan(2)\n  t.equal((new B('hallo')).slice(0, 10).toString(), 'hallo')\n  t.equal((new B('hallo')).slice(10, 2).toString(), '')\n  t.end()\n})\n"]}