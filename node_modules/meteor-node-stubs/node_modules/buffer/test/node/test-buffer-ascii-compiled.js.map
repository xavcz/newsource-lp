{"version":3,"sources":["test-buffer-ascii.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;AACb,IAAI,OAAO,CAAC,GAAG,CAAC,WAAW,EAAE,MAAM,CAAC,mBAAmB,GAAG,KAAK,CAAC;AAChE,IAAI,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC;AACtC,IAAI,MAAM,GAAG,EAAE,CAAC;AAChB,IAAI,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;;;;AAI/B,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,UAAU,CAAC,CAAC;;;AAG7D,IAAI,KAAK,GAAG,oDAAoD,GACpD,uBAAuB,CAAC;;AAEpC,IAAI,QAAQ,GAAG,gDAAgD,GAChD,mDAAmD,GACnD,eAAe,CAAC;;AAE/B,IAAI,GAAG,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;;AAExB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;AACxC,QAAM,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;;;AAGhE,MAAI,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,GAAG,KAAK,EAAE,EAAE,CAAC,CAAC;AACrC,MAAI,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,GAAG,GAAG,EAAE,EAAE,CAAC,CAAC;CACpC","file":"test-buffer-ascii-compiled.js","sourcesContent":["'use strict';\nif (process.env.OBJECT_IMPL) global.TYPED_ARRAY_SUPPORT = false;\nvar Buffer = require('../../').Buffer;\nvar common = {};\nvar assert = require('assert');\n\n// ASCII conversion in node.js simply masks off the high bits,\n// it doesn't do transliteration.\nassert.equal(Buffer('hérité').toString('ascii'), 'hC)ritC)');\n\n// 71 characters, 78 bytes. The ’ character is a triple-byte sequence.\nvar input = 'C’est, graphiquement, la réunion d’un accent aigu ' +\n            'et d’un accent grave.';\n\nvar expected = 'Cb\\u0000\\u0019est, graphiquement, la rC)union ' +\n               'db\\u0000\\u0019un accent aigu et db\\u0000\\u0019un ' +\n               'accent grave.';\n\nvar buf = Buffer(input);\n\nfor (var i = 0; i < expected.length; ++i) {\n  assert.equal(buf.slice(i).toString('ascii'), expected.slice(i));\n\n  // Skip remainder of multi-byte sequence.\n  if (input.charCodeAt(i) > 65535) ++i;\n  if (input.charCodeAt(i) > 127) ++i;\n}\n\n"]}