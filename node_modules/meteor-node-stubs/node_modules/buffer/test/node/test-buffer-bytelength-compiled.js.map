{"version":3,"sources":["test-buffer-bytelength.js"],"names":[],"mappings":"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","file":"test-buffer-bytelength-compiled.js","sourcesContent":["'use strict';\nif (process.env.OBJECT_IMPL) global.TYPED_ARRAY_SUPPORT = false;\nvar Buffer = require('../../').Buffer;\n\nvar common = {};\nvar assert = require('assert');\nvar Buffer = require('../../').Buffer;\n\n// coerce values to string\nassert.equal(Buffer.byteLength(32, 'raw'), 2);\nassert.equal(Buffer.byteLength(NaN, 'utf8'), 3);\nassert.equal(Buffer.byteLength({}, 'raws'), 15);\nassert.equal(Buffer.byteLength(), 9);\n\n// special case: zero length string\nassert.equal(Buffer.byteLength('', 'ascii'), 0);\nassert.equal(Buffer.byteLength('', 'HeX'), 0);\n\n// utf8\nassert.equal(Buffer.byteLength('∑éllö wørl∂!', 'utf-8'), 19);\nassert.equal(Buffer.byteLength('κλμνξο', 'utf8'), 12);\nassert.equal(Buffer.byteLength('挵挶挷挸挹', 'utf-8'), 15);\nassert.equal(Buffer.byteLength('𠝹𠱓𠱸', 'UTF8'), 12);\n// without an encoding, utf8 should be assumed\nassert.equal(Buffer.byteLength('hey there'), 9);\nassert.equal(Buffer.byteLength('𠱸挶νξ#xx :)'), 17);\nassert.equal(Buffer.byteLength('hello world', ''), 11);\n// it should also be assumed with unrecognized encoding\nassert.equal(Buffer.byteLength('hello world', 'abc'), 11);\nassert.equal(Buffer.byteLength('ßœ∑≈', 'unkn0wn enc0ding'), 10);\n\n// base64\nassert.equal(Buffer.byteLength('aGVsbG8gd29ybGQ=', 'base64'), 11);\nassert.equal(Buffer.byteLength('bm9kZS5qcyByb2NrcyE=', 'base64'), 14);\nassert.equal(Buffer.byteLength('aGkk', 'base64'), 3);\nassert.equal(Buffer.byteLength('bHNrZGZsa3NqZmtsc2xrZmFqc2RsZmtqcw==',\n    'base64'), 25);\n// special padding\nassert.equal(Buffer.byteLength('aaa=', 'base64'), 2);\nassert.equal(Buffer.byteLength('aaaa==', 'base64'), 3);\n\nassert.equal(Buffer.byteLength('Il était tué'), 14);\nassert.equal(Buffer.byteLength('Il était tué', 'utf8'), 14);\nassert.equal(Buffer.byteLength('Il était tué', 'ascii'), 12);\nassert.equal(Buffer.byteLength('Il était tué', 'binary'), 12);\n['ucs2', 'ucs-2', 'utf16le', 'utf-16le'].forEach(function(encoding) {\n  assert.equal(24, Buffer.byteLength('Il était tué', encoding));\n});\n\n"]}