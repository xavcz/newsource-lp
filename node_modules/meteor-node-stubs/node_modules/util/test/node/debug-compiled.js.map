{"version":3,"sources":["debug.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAqBA,IAAI,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AAC/B,IAAI,IAAI,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;;AAE7B,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,OAAO,EAC7B,KAAK,EAAE,CAAC,KAER,MAAM,EAAE,CAAC;;AAEX,SAAS,MAAM,GAAG;AAChB,MAAI,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC;AAC1B,MAAI,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;AACtB,MAAI,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;AACtB,MAAI,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;AAClB,MAAI,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;AACvB,MAAI,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;CACjB;;AAED,SAAS,IAAI,CAAC,OAAO,EAAE,WAAW,EAAE;AAClC,MAAI,SAAS,GAAG,EAAE,CAAC;AACnB,MAAI,WAAW,EAAE;AACf,aAAS,GAAG,6CAA6C,GAC7C,wDAAwD,CAAC;GACtE;AACD,MAAI,SAAS,GAAG,MAAM,CAAC;AACvB,MAAI,OAAO,GAAG,KAAK,CAAC;;AAEpB,MAAI,KAAK,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC,KAAK,CAAC;AAC3C,MAAI,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,UAAU,EAAE,OAAO,CAAC,EAAE;AACzD,OAAG,EAAE,EAAE,UAAU,EAAE,OAAO,EAAE;GAC7B,CAAC,CAAC;;AAEH,WAAS,GAAG,SAAS,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;;AAErD,MAAI,GAAG,GAAG,EAAE,CAAC;AACb,OAAK,CAAC,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;AACjC,OAAK,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,UAAS,CAAC,EAAE;AAClC,OAAG,IAAI,CAAC,CAAC;GACV,CAAC,CAAC;;AAEH,MAAI,GAAG,GAAG,EAAE,CAAC;AACb,OAAK,CAAC,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;AACjC,OAAK,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,UAAS,CAAC,EAAE;AAClC,OAAG,IAAI,CAAC,CAAC;GACV,CAAC,CAAC;;AAEH,OAAK,CAAC,EAAE,CAAC,OAAO,EAAE,UAAS,CAAC,EAAE;AAC5B,UAAM,CAAC,CAAC,CAAC,CAAC,CAAC;AACX,UAAM,CAAC,KAAK,CAAC,GAAG,EAAE,SAAS,CAAC,CAAC;AAC7B,UAAM,CAAC,KAAK,CAAC,GAAG,EAAE,SAAS,CAAC,CAAC;AAC7B,WAAO,GAAG,IAAI,CAAC;AACf,WAAO,CAAC,GAAG,CAAC,UAAU,EAAE,OAAO,EAAE,WAAW,CAAC,CAAC;GAC/C,CAAC,CAAC;;AAEH,SAAO,CAAC,EAAE,CAAC,MAAM,EAAE,YAAW;AAC5B,UAAM,CAAC,OAAO,CAAC,CAAC;GACjB,CAAC,CAAC;CACJ;;AAGD,SAAS,KAAK,GAAG;AACf,MAAI,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;AACjC,OAAK,CAAC,MAAM,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,WAAW,CAAC,CAAC;AACxC,OAAK,CAAC,4BAA4B,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,CAAC;AAClE,SAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;CACnB","file":"debug-compiled.js","sourcesContent":["// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar assert = require('assert');\nvar util = require('../../');\n\nif (process.argv[2] === 'child')\n  child();\nelse\n  parent();\n\nfunction parent() {\n  test('foo,tud,bar', true);\n  test('foo,tud', true);\n  test('tud,bar', true);\n  test('tud', true);\n  test('foo,bar', false);\n  test('', false);\n}\n\nfunction test(environ, shouldWrite) {\n  var expectErr = '';\n  if (shouldWrite) {\n    expectErr = 'TUD %PID%: this { is: \\'a\\' } /debugging/\\n' +\n                'TUD %PID%: number=1234 string=asdf obj={\"foo\":\"bar\"}\\n';\n  }\n  var expectOut = 'ok\\n';\n  var didTest = false;\n\n  var spawn = require('child_process').spawn;\n  var child = spawn(process.execPath, [__filename, 'child'], {\n    env: { NODE_DEBUG: environ }\n  });\n\n  expectErr = expectErr.split('%PID%').join(child.pid);\n\n  var err = '';\n  child.stderr.setEncoding('utf8');\n  child.stderr.on('data', function(c) {\n    err += c;\n  });\n\n  var out = '';\n  child.stdout.setEncoding('utf8');\n  child.stdout.on('data', function(c) {\n    out += c;\n  });\n\n  child.on('close', function(c) {\n    assert(!c);\n    assert.equal(err, expectErr);\n    assert.equal(out, expectOut);\n    didTest = true;\n    console.log('ok %j %j', environ, shouldWrite);\n  });\n\n  process.on('exit', function() {\n    assert(didTest);\n  });\n}\n\n\nfunction child() {\n  var debug = util.debuglog('tud');\n  debug('this', { is: 'a' }, /debugging/);\n  debug('number=%d string=%s obj=%j', 1234, 'asdf', { foo: 'bar' });\n  console.log('ok');\n}\n"]}