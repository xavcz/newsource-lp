{"version":3,"sources":["verify.js"],"names":[],"mappings":"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","file":"verify-compiled.js","sourcesContent":["// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js\nvar curves = require('./curves')\nvar elliptic = require('elliptic')\nvar parseKeys = require('parse-asn1')\n\nvar BN = require('bn.js')\nvar EC = elliptic.ec\n\nfunction verify (sig, hash, key, signType) {\n  var pub = parseKeys(key)\n  if (pub.type === 'ec') {\n    if (signType !== 'ecdsa') {\n      throw new Error('wrong public key type')\n    }\n    return ecVerify(sig, hash, pub)\n  } else if (pub.type === 'dsa') {\n    if (signType !== 'dsa') {\n      throw new Error('wrong public key type')\n    }\n    return dsaVerify(sig, hash, pub)\n  } else {\n    if (signType !== 'rsa') {\n      throw new Error('wrong public key type')\n    }\n  }\n  var len = pub.modulus.byteLength()\n  var pad = [ 1 ]\n  var padNum = 0\n  while (hash.length + pad.length + 2 < len) {\n    pad.push(0xff)\n    padNum++\n  }\n  pad.push(0x00)\n  var i = -1\n  while (++i < hash.length) {\n    pad.push(hash[i])\n  }\n  pad = new Buffer(pad)\n  var red = BN.mont(pub.modulus)\n  sig = new BN(sig).toRed(red)\n\n  sig = sig.redPow(new BN(pub.publicExponent))\n\n  sig = new Buffer(sig.fromRed().toArray())\n  var out = 0\n  if (padNum < 8) {\n    out = 1\n  }\n  len = Math.min(sig.length, pad.length)\n  if (sig.length !== pad.length) {\n    out = 1\n  }\n\n  i = -1\n  while (++i < len) {\n    out |= (sig[i] ^ pad[i])\n  }\n  return out === 0\n}\n\nfunction ecVerify (sig, hash, pub) {\n  var curveId = curves[pub.data.algorithm.curve.join('.')]\n  if (!curveId) throw new Error('unknown curve ' + pub.data.algorithm.curve.join('.'))\n\n  var curve = new EC(curveId)\n  var pubkey = pub.data.subjectPrivateKey.data\n\n  return curve.verify(hash, sig, pubkey)\n}\n\nfunction dsaVerify (sig, hash, pub) {\n  var p = pub.data.p\n  var q = pub.data.q\n  var g = pub.data.g\n  var y = pub.data.pub_key\n  var unpacked = parseKeys.signature.decode(sig, 'der')\n  var s = unpacked.s\n  var r = unpacked.r\n  checkValue(s, q)\n  checkValue(r, q)\n  var montp = BN.mont(p)\n  var w = s.invm(q)\n  var v = g.toRed(montp)\n    .redPow(new BN(hash).mul(w).mod(q))\n    .fromRed()\n    .mul(\n      y.toRed(montp)\n        .redPow(r.mul(w).mod(q))\n        .fromRed()\n  ).mod(p).mod(q)\n  return !v.cmp(r)\n}\n\nfunction checkValue (b, q) {\n  if (b.cmpn(0) <= 0) {\n    throw new Error('invalid sig')\n  }\n  if (b.cmp(q) >= q) {\n    throw new Error('invalid sig')\n  }\n}\n\nmodule.exports = verify\n"]}