{"version":3,"sources":["test.js"],"names":[],"mappings":"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","file":"test-compiled.js","sourcesContent":["var assert = require('assert');\nvar ourProcess = require('./browser');\ndescribe('test against process', function () {\n    test(process);\n});\nif (!process.browser) {\n  describe('test against our shim', function () {\n    test(ourProcess);\n  });\n}\nfunction test (ourProcess) {\n    describe('test arguments', function (t) {\n        it ('works', function (done) {\n          var order = 0;\n\n\n          ourProcess.nextTick(function (num) {\n              assert.equal(num, order++, 'first one works');\n              ourProcess.nextTick(function (num) {\n                assert.equal(num, order++, 'recursive one is 4th');\n              }, 3);\n          }, 0);\n          ourProcess.nextTick(function (num) {\n              assert.equal(num, order++, 'second one starts');\n              ourProcess.nextTick(function (num) {\n                assert.equal(num, order++, 'this is third');\n                ourProcess.nextTick(function (num) {\n                    assert.equal(num, order++, 'this is last');\n                    done();\n                }, 5);\n            }, 4);\n          }, 1);\n          ourProcess.nextTick(function (num) {\n\n              assert.equal(num, order++, '3rd schedualed happens after the error');\n          }, 2);\n        });\n    });\n\n    describe('test errors', function (t) {\n        it ('works', function (done) {\n        var order = 0;\n        process.removeAllListeners('uncaughtException');\n        process.once('uncaughtException', function(err) {\n            assert.equal(2, order++, 'error is third');\n            ourProcess.nextTick(function () {\n                assert.equal(5, order++, 'schedualed in error is last');\n                done();\n            });\n        });\n        ourProcess.nextTick(function () {\n            assert.equal(0, order++, 'first one works');\n            ourProcess.nextTick(function () {\n            assert.equal(4, order++, 'recursive one is 4th');\n            });\n        });\n        ourProcess.nextTick(function () {\n            assert.equal(1, order++, 'second one starts');\n            throw(new Error('an error is thrown'));\n        });\n        ourProcess.nextTick(function () {\n            assert.equal(3, order++, '3rd schedualed happens after the error');\n        });\n        });\n    });\n}\n"]}