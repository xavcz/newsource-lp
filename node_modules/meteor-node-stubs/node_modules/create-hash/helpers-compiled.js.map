{"version":3,"sources":["helpers.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;AACb,IAAI,OAAO,GAAG,CAAC,CAAC;AAChB,IAAI,UAAU,GAAG,IAAI,MAAM,CAAC,OAAO,CAAC,CAAC,AAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AACzD,IAAI,KAAK,GAAG,CAAC,CAAC;;AAEd,SAAS,OAAO,CAAC,GAAG,EAAE,SAAS,EAAE;AAC/B,MAAI,AAAC,GAAG,CAAC,MAAM,GAAG,OAAO,KAAM,CAAC,EAAE;AAChC,QAAI,GAAG,GAAG,GAAG,CAAC,MAAM,IAAI,OAAO,GAAI,GAAG,CAAC,MAAM,GAAG,OAAO,CAAC,AAAC,CAAC;AAC1D,OAAG,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,UAAU,CAAC,EAAE,GAAG,CAAC,CAAC;GAC7C;;AAED,MAAI,GAAG,GAAG,EAAE,CAAC;AACb,MAAI,EAAE,GAAG,SAAS,GAAG,GAAG,CAAC,WAAW,GAAG,GAAG,CAAC,WAAW,CAAC;AACvD,OAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,IAAI,OAAO,EAAE;AAC5C,OAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;GAC3B;AACD,SAAO,GAAG,CAAC;CACZ;;AAED,SAAS,QAAQ,CAAC,GAAG,EAAE,IAAI,EAAE,SAAS,EAAE;AACtC,MAAI,GAAG,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,CAAC;AAC3B,MAAI,EAAE,GAAG,SAAS,GAAG,GAAG,CAAC,YAAY,GAAG,GAAG,CAAC,YAAY,CAAC;AACzD,OAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACnC,MAAE,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,CAAC;GACnC;AACD,SAAO,GAAG,CAAC;CACZ;;AAED,SAAS,IAAI,CAAC,GAAG,EAAE,EAAE,EAAE,QAAQ,EAAE,SAAS,EAAE;AAC1C,MAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,IAAI,MAAM,CAAC,GAAG,CAAC,CAAC;AACjD,MAAI,GAAG,GAAG,EAAE,CAAC,OAAO,CAAC,GAAG,EAAE,SAAS,CAAC,EAAE,GAAG,CAAC,MAAM,GAAG,KAAK,CAAC,CAAC;AAC1D,SAAO,QAAQ,CAAC,GAAG,EAAE,QAAQ,EAAE,SAAS,CAAC,CAAC;CAC3C;AACD,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC","file":"helpers-compiled.js","sourcesContent":["'use strict';\nvar intSize = 4;\nvar zeroBuffer = new Buffer(intSize); zeroBuffer.fill(0);\nvar chrsz = 8;\n\nfunction toArray(buf, bigEndian) {\n  if ((buf.length % intSize) !== 0) {\n    var len = buf.length + (intSize - (buf.length % intSize));\n    buf = Buffer.concat([buf, zeroBuffer], len);\n  }\n\n  var arr = [];\n  var fn = bigEndian ? buf.readInt32BE : buf.readInt32LE;\n  for (var i = 0; i < buf.length; i += intSize) {\n    arr.push(fn.call(buf, i));\n  }\n  return arr;\n}\n\nfunction toBuffer(arr, size, bigEndian) {\n  var buf = new Buffer(size);\n  var fn = bigEndian ? buf.writeInt32BE : buf.writeInt32LE;\n  for (var i = 0; i < arr.length; i++) {\n    fn.call(buf, arr[i], i * 4, true);\n  }\n  return buf;\n}\n\nfunction hash(buf, fn, hashSize, bigEndian) {\n  if (!Buffer.isBuffer(buf)) buf = new Buffer(buf);\n  var arr = fn(toArray(buf, bigEndian), buf.length * chrsz);\n  return toBuffer(arr, hashSize, bigEndian);\n}\nexports.hash = hash;"]}