{"version":3,"sources":["test.js"],"names":[],"mappings":";;AAAA,IAAI,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,CAAA;AACtB,IAAI,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAA;;AAE1B,IAAI,UAAU,GAAG,CAAC,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,WAAW,CAAC,CAAA;AAC/F,IAAI,SAAS,GAAG,cAAe,KAAK,EAAE,QAAQ,CAAC,CAAC;AAChD,IAAI,OAAO,GAAG,OAAO,CAAC,mBAAmB,CAAC,CAAA;AAC1C,OAAO,CAAC,OAAO,CAAC,UAAU,MAAM,EAAE;AAChC,QAAM,CAAC,SAAS,GAAG,MAAM,CAAC,MAAM,CAAA;CACjC,CAAC,CAAA;AACF,IAAI,UAAU,GAAG,OAAO,CAAC,WAAW,CAAC,CAAA;;AAErC,UAAU,CAAC,OAAO,CAAC,UAAU,SAAS,EAAE;AACtC,MAAI,CAAC,OAAO,GAAG,SAAS,GAAG,uBAAuB,EAAE,UAAU,CAAC,EAAE;AAC/D,WAAO,CAAC,OAAO,CAAC,UAAU,GAAG,EAAE,CAAC,EAAE;AAChC,UAAI,KAAK,GAAG,IAAI,MAAM,CAAC,GAAG,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAA;AAC3C,UAAI,IAAI,GAAG,GAAG,CAAC,SAAS,CAAC,CAAA;AACzB,UAAI,EAAE,GAAG,UAAU,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAA;AAC1D,OAAC,CAAC,KAAK,CAAC,EAAE,EAAE,IAAI,EAAE,SAAS,GAAG,cAAc,GAAC,CAAC,GAAC,QAAQ,GAAG,IAAI,CAAC,CAAA;KAChE,CAAC,CAAA;;AAEF,aAAS,CAAC,OAAO,CAAC,UAAU,QAAQ,EAAE;AAClC,aAAO,CAAC,OAAO,CAAC,UAAU,GAAG,EAAE,CAAC,EAAE;AAChC,YAAI,KAAK,GAAG,IAAI,MAAM,CAAC,GAAG,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAA;AAC9D,YAAI,IAAI,GAAG,GAAG,CAAC,SAAS,CAAC,CAAA;AACzB,YAAI,EAAE,GAAG,UAAU,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAA;AACpE,SAAC,CAAC,KAAK,CAAC,EAAE,EAAE,IAAI,EAAE,SAAS,GAAG,cAAc,GAAC,CAAC,GAAC,KAAK,GAAC,QAAQ,GAAC,OAAO,GAAG,IAAI,CAAC,CAAA;OAC9E,CAAC,CAAA;KACL,CAAC,CAAC;AACH,WAAO,CAAC,OAAO,CAAC,UAAU,GAAG,EAAE,CAAC,EAAE;AAChC,UAAI,KAAK,GAAG,IAAI,MAAM,CAAC,GAAG,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAA;AAC3C,UAAI,IAAI,GAAG,GAAG,CAAC,SAAS,CAAC,CAAA;AACzB,UAAI,IAAI,GAAG,UAAU,CAAC,SAAS,CAAC,CAAC;AACjC,UAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAA;AACf,UAAI,EAAE,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAA;AACpC,OAAC,CAAC,KAAK,CAAC,EAAE,EAAE,IAAI,EAAE,SAAS,GAAG,cAAc,GAAC,CAAC,GAAC,QAAQ,GAAG,IAAI,CAAC,CAAA;KAChE,CAAC,CAAA;AACF,KAAC,CAAC,GAAG,EAAE,CAAA;GACR,CAAC,CAAA;CACH,CAAC,CAAC","file":"test-compiled.js","sourcesContent":["var fs = require('fs')\nvar test = require('tape')\n\nvar algorithms = ['sha1', 'sha224', 'sha256', 'sha384', 'sha512', 'md5', 'rmd160', 'ripemd160']\nvar encodings = [/*'binary',*/ 'hex', 'base64'];\nvar vectors = require('hash-test-vectors')\nvectors.forEach(function (vector) {\n  vector.ripemd160 = vector.rmd160\n})\nvar createHash = require('./browser')\n\nalgorithms.forEach(function (algorithm) {\n  test('test ' + algorithm + ' against test vectors', function (t) {\n    vectors.forEach(function (obj, i) {\n      var input = new Buffer(obj.input, 'base64')\n      var node = obj[algorithm]\n      var js = createHash(algorithm).update(input).digest('hex')\n      t.equal(js, node, algorithm + '(testVector['+i+']) == ' + node)\n    })\n\n    encodings.forEach(function (encoding) {\n        vectors.forEach(function (obj, i) {\n          var input = new Buffer(obj.input, 'base64').toString(encoding)\n          var node = obj[algorithm]\n          var js = createHash(algorithm).update(input, encoding).digest('hex')\n          t.equal(js, node, algorithm + '(testVector['+i+'], '+encoding+') == ' + node)\n        })\n    });\n    vectors.forEach(function (obj, i) {\n      var input = new Buffer(obj.input, 'base64')\n      var node = obj[algorithm]\n      var hash = createHash(algorithm);\n      hash.end(input)\n      var js = hash.read().toString('hex')\n      t.equal(js, node, algorithm + '(testVector['+i+']) == ' + node)\n    })\n    t.end()\n  })\n});\n"]}