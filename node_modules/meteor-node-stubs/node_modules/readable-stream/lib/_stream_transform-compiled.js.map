{"version":3,"sources":["_stream_transform.js"],"names":[],"mappings":"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","file":"_stream_transform-compiled.js","sourcesContent":["// a transform stream is a readable/writable stream where you do\n// something with the data.  Sometimes it's called a \"filter\",\n// but that's not a great name for it, since that implies a thing where\n// some bits pass through, and others are simply ignored.  (That would\n// be a valid example of a transform, of course.)\n//\n// While the output is causally related to the input, it's not a\n// necessarily symmetric or synchronous transformation.  For example,\n// a zlib stream might take multiple plain-text writes(), and then\n// emit a single compressed chunk some time in the future.\n//\n// Here's how this works:\n//\n// The Transform stream has all the aspects of the readable and writable\n// stream classes.  When you write(chunk), that calls _write(chunk,cb)\n// internally, and returns false if there's a lot of pending writes\n// buffered up.  When you call read(), that calls _read(n) until\n// there's enough pending readable data buffered up.\n//\n// In a transform stream, the written data is placed in a buffer.  When\n// _read(n) is called, it transforms the queued up data, calling the\n// buffered _write cb's as it consumes chunks.  If consuming a single\n// written chunk would result in multiple output chunks, then the first\n// outputted bit calls the readcb, and subsequent chunks just go into\n// the read buffer, and will cause it to emit 'readable' if necessary.\n//\n// This way, back-pressure is actually determined by the reading side,\n// since _read has to be called to start processing a new chunk.  However,\n// a pathological inflate type of transform can cause excessive buffering\n// here.  For example, imagine a stream where every byte of input is\n// interpreted as an integer from 0-255, and then results in that many\n// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in\n// 1kb of data being output.  In this case, you could write a very small\n// amount of input, and end up with a very large amount of output.  In\n// such a pathological inflating mechanism, there'd be no way to tell\n// the system to stop doing the transform.  A single 4MB write could\n// cause the system to run out of memory.\n//\n// However, even in such a pathological case, only a single written chunk\n// would be consumed, and then the rest would wait (un-transformed) until\n// the results of the previous transformed chunk were consumed.\n\n'use strict';\n\nmodule.exports = Transform;\n\nvar Duplex = require('./_stream_duplex');\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nutil.inherits(Transform, Duplex);\n\n\nfunction TransformState(stream) {\n  this.afterTransform = function(er, data) {\n    return afterTransform(stream, er, data);\n  };\n\n  this.needTransform = false;\n  this.transforming = false;\n  this.writecb = null;\n  this.writechunk = null;\n}\n\nfunction afterTransform(stream, er, data) {\n  var ts = stream._transformState;\n  ts.transforming = false;\n\n  var cb = ts.writecb;\n\n  if (!cb)\n    return stream.emit('error', new Error('no writecb in Transform class'));\n\n  ts.writechunk = null;\n  ts.writecb = null;\n\n  if (data !== null && data !== undefined)\n    stream.push(data);\n\n  if (cb)\n    cb(er);\n\n  var rs = stream._readableState;\n  rs.reading = false;\n  if (rs.needReadable || rs.length < rs.highWaterMark) {\n    stream._read(rs.highWaterMark);\n  }\n}\n\n\nfunction Transform(options) {\n  if (!(this instanceof Transform))\n    return new Transform(options);\n\n  Duplex.call(this, options);\n\n  this._transformState = new TransformState(this);\n\n  // when the writable side finishes, then flush out anything remaining.\n  var stream = this;\n\n  // start out asking for a readable event once data is transformed.\n  this._readableState.needReadable = true;\n\n  // we have implemented the _read method, and done the other things\n  // that Readable wants before the first _read call, so unset the\n  // sync guard flag.\n  this._readableState.sync = false;\n\n  if (options) {\n    if (typeof options.transform === 'function')\n      this._transform = options.transform;\n\n    if (typeof options.flush === 'function')\n      this._flush = options.flush;\n  }\n\n  this.once('prefinish', function() {\n    if (typeof this._flush === 'function')\n      this._flush(function(er) {\n        done(stream, er);\n      });\n    else\n      done(stream);\n  });\n}\n\nTransform.prototype.push = function(chunk, encoding) {\n  this._transformState.needTransform = false;\n  return Duplex.prototype.push.call(this, chunk, encoding);\n};\n\n// This is the part where you do stuff!\n// override this function in implementation classes.\n// 'chunk' is an input chunk.\n//\n// Call `push(newChunk)` to pass along transformed output\n// to the readable side.  You may call 'push' zero or more times.\n//\n// Call `cb(err)` when you are done with this chunk.  If you pass\n// an error, then that'll put the hurt on the whole operation.  If you\n// never call cb(), then you'll never get another chunk.\nTransform.prototype._transform = function(chunk, encoding, cb) {\n  throw new Error('not implemented');\n};\n\nTransform.prototype._write = function(chunk, encoding, cb) {\n  var ts = this._transformState;\n  ts.writecb = cb;\n  ts.writechunk = chunk;\n  ts.writeencoding = encoding;\n  if (!ts.transforming) {\n    var rs = this._readableState;\n    if (ts.needTransform ||\n        rs.needReadable ||\n        rs.length < rs.highWaterMark)\n      this._read(rs.highWaterMark);\n  }\n};\n\n// Doesn't matter what the args are here.\n// _transform does all the work.\n// That we got here means that the readable side wants more data.\nTransform.prototype._read = function(n) {\n  var ts = this._transformState;\n\n  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {\n    ts.transforming = true;\n    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);\n  } else {\n    // mark that we need a transform, so that any data that comes in\n    // will get processed, now that we've asked for it.\n    ts.needTransform = true;\n  }\n};\n\n\nfunction done(stream, er) {\n  if (er)\n    return stream.emit('error', er);\n\n  // if there's nothing in the write buffer, then that means\n  // that nothing more will ever be provided\n  var ws = stream._writableState;\n  var ts = stream._transformState;\n\n  if (ws.length)\n    throw new Error('calling transform done when ws.length != 0');\n\n  if (ts.transforming)\n    throw new Error('calling transform done when still transforming');\n\n  return stream.push(null);\n}\n"]}