{"version":3,"sources":["index.js"],"names":[],"mappings":"AAAA,YAAY,CAAA;;AAEZ,OAAO,CAAC,WAAW,GAAG,OAAO,CAAC,GAAG,GAAG,OAAO,CAAC,iBAAiB,GAAG,OAAO,CAAC,IAAI,GAAG,OAAO,CAAC,aAAa,CAAC,CAAA;AACrG,OAAO,CAAC,UAAU,GAAG,OAAO,CAAC,IAAI,GAAG,OAAO,CAAC,aAAa,CAAC,CAAA;AAC1D,OAAO,CAAC,UAAU,GAAG,OAAO,CAAC,IAAI,GAAG,OAAO,CAAC,aAAa,CAAC,CAAA;;AAE1D,IAAI,MAAM,GAAG,CAAC,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,uBAAuB,CAAC,CAAC,CAAC,CAAA;AACpI,OAAO,CAAC,SAAS,GAAG,YAAY;AAC9B,SAAO,MAAM,CAAA;CACd,CAAA;;AAED,IAAI,CAAC,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAA;AACzB,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,MAAM,CAAA;AACzB,OAAO,CAAC,UAAU,GAAG,CAAC,CAAC,UAAU,CAAA;;AAEjC,IAAI,GAAG,GAAG,OAAO,CAAC,mBAAmB,CAAC,CACrC,CACC,QAAQ,EACR,cAAc,EACd,UAAU,EACV,gBAAgB,EAChB,UAAU,EACV,gBAAgB,EAChB,YAAY,EACZ,kBAAkB,EAClB,YAAY,EACZ,aAAa,CACd,CAAC,OAAO,CAAC,UAAU,GAAG,EAAE;AACvB,SAAO,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,CAAA;CACxB,CAAC,CAAA;;AAEF,IAAI,EAAE,GAAG,OAAO,CAAC,gBAAgB,CAAC,CACjC,CACC,oBAAoB,EACpB,0BAA0B,EAC1B,kBAAkB,EAClB,qBAAqB,EACrB,eAAe,CAChB,CAAC,OAAO,CAAC,UAAU,GAAG,EAAE;AACvB,SAAO,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,CAAA;CACvB,CAAC,CAAA;;AAEF,IAAI,IAAI,GAAG,OAAO,CAAC,iBAAiB,CAAC,CACpC,CACC,YAAY,EACZ,MAAM,EACN,cAAc,EACd,QAAQ,CACT,CAAC,OAAO,CAAC,UAAU,GAAG,EAAE;AACvB,SAAO,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAA;CACzB,CAAC,CAAA;;AAEF,OAAO,CAAC,UAAU,GAAG,OAAO,CAAC,aAAa,CAAC,CAAA;;AAE3C,IAAI,aAAa,GAAG,OAAO,CAAC,gBAAgB,CAAC,CAE5C,CACC,eAAe,EACf,gBAAgB,EAChB,eAAe,EACf,gBAAgB,CACjB,CAAC,OAAO,CAAC,UAAU,GAAG,EAAE;AACvB,SAAO,CAAC,GAAG,CAAC,GAAG,aAAa,CAAC,GAAG,CAAC,CAAA;CAClC,CAAC,CAGD;;;AAAA,CACC,mBAAmB,CACpB,CAAC,OAAO,CAAC,UAAU,IAAI,EAAE;AACxB,SAAO,CAAC,IAAI,CAAC,GAAG,YAAY;AAC1B,UAAM,IAAI,KAAK,CAAC,CACd,SAAS,GAAG,IAAI,GAAG,yBAAyB,EAC5C,yBAAyB,EACzB,wDAAwD,CACzD,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAA;GACd,CAAA;CACF,CAAC,CAAA","file":"index-compiled.js","sourcesContent":["'use strict'\n\nexports.randomBytes = exports.rng = exports.pseudoRandomBytes = exports.prng = require('randombytes')\nexports.createHash = exports.Hash = require('create-hash')\nexports.createHmac = exports.Hmac = require('create-hmac')\n\nvar hashes = ['sha1', 'sha224', 'sha256', 'sha384', 'sha512', 'md5', 'rmd160'].concat(Object.keys(require('browserify-sign/algos')))\nexports.getHashes = function () {\n  return hashes\n}\n\nvar p = require('pbkdf2')\nexports.pbkdf2 = p.pbkdf2\nexports.pbkdf2Sync = p.pbkdf2Sync\n\nvar aes = require('browserify-cipher')\n;[\n  'Cipher',\n  'createCipher',\n  'Cipheriv',\n  'createCipheriv',\n  'Decipher',\n  'createDecipher',\n  'Decipheriv',\n  'createDecipheriv',\n  'getCiphers',\n  'listCiphers'\n].forEach(function (key) {\n  exports[key] = aes[key]\n})\n\nvar dh = require('diffie-hellman')\n;[\n  'DiffieHellmanGroup',\n  'createDiffieHellmanGroup',\n  'getDiffieHellman',\n  'createDiffieHellman',\n  'DiffieHellman'\n].forEach(function (key) {\n  exports[key] = dh[key]\n})\n\nvar sign = require('browserify-sign')\n;[\n  'createSign',\n  'Sign',\n  'createVerify',\n  'Verify'\n].forEach(function (key) {\n  exports[key] = sign[key]\n})\n\nexports.createECDH = require('create-ecdh')\n\nvar publicEncrypt = require('public-encrypt')\n\n;[\n  'publicEncrypt',\n  'privateEncrypt',\n  'publicDecrypt',\n  'privateDecrypt'\n].forEach(function (key) {\n  exports[key] = publicEncrypt[key]\n})\n\n// the least I can do is make error messages for the rest of the node.js/crypto api.\n;[\n  'createCredentials'\n].forEach(function (name) {\n  exports[name] = function () {\n    throw new Error([\n      'sorry, ' + name + ' is not implemented yet',\n      'we accept pull requests',\n      'https://github.com/crypto-browserify/crypto-browserify'\n    ].join('\\n'))\n  }\n})\n"]}