{"version":3,"sources":["ecdh.js"],"names":[],"mappings":"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","file":"ecdh-compiled.js","sourcesContent":["var mods = [\n  'secp256k1',\n  'secp224r1',\n  'prime256v1',\n  'prime192v1'\n]\nvar test = require('tape')\nvar _crypto = require('../')\nvar createECDH1 = _crypto.createECDH\nvar createECDH2 = require('create-ecdh/browser')\n\nmods.forEach(function (mod) {\n  test('createECDH: ' + mod + ' uncompressed', function (t) {\n    t.plan(2)\n    var dh1 = createECDH1(mod)\n    dh1.generateKeys()\n    var dh2 = createECDH2(mod)\n    dh2.generateKeys()\n    var pubk1 = dh1.getPublicKey()\n    var pubk2 = dh2.getPublicKey()\n    t.notEquals(pubk1.toString('hex'), pubk2.toString('hex'), 'diff public keys')\n    var pub1 = dh1.computeSecret(pubk2).toString('hex')\n    var pub2 = dh2.computeSecret(pubk1).toString('hex')\n    t.equals(pub1, pub2, 'equal secrets')\n  })\n\n  test('createECDH: ' + mod + ' compressed', function (t) {\n    t.plan(2)\n    var dh1 = createECDH1(mod)\n    dh1.generateKeys()\n    var dh2 = createECDH2(mod)\n    dh2.generateKeys()\n    var pubk1 = dh1.getPublicKey(null, 'compressed')\n    var pubk2 = dh2.getPublicKey(null, 'compressed')\n    t.notEquals(pubk1.toString('hex'), pubk2.toString('hex'), 'diff public keys')\n    var pub1 = dh1.computeSecret(pubk2).toString('hex')\n    var pub2 = dh2.computeSecret(pubk1).toString('hex')\n    t.equals(pub1, pub2, 'equal secrets')\n  })\n\n  test('createECDH: ' + mod + ' set stuff', function (t) {\n    t.plan(5)\n    var dh1 = createECDH1(mod)\n    var dh2 = createECDH2(mod)\n    dh1.generateKeys()\n    dh2.generateKeys()\n    dh1.setPrivateKey(dh2.getPrivateKey())\n    dh1.setPublicKey(dh2.getPublicKey())\n    var priv1 = dh1.getPrivateKey('hex')\n    var priv2 = dh2.getPrivateKey('hex')\n    t.equals(priv1, priv2, 'same private key')\n    var pubk1 = dh1.getPublicKey()\n    var pubk2 = dh2.getPublicKey()\n    t.equals(pubk1.toString('hex'), pubk2.toString('hex'), 'same public keys, uncompressed')\n    t.equals(dh1.getPublicKey('hex', 'compressed'), dh2.getPublicKey('hex', 'compressed'), 'same public keys compressed')\n    t.equals(dh1.getPublicKey('hex', 'hybrid'), dh2.getPublicKey('hex', 'hybrid'), 'same public keys hybrid')\n    var pub1 = dh1.computeSecret(pubk2).toString('hex')\n    var pub2 = dh2.computeSecret(pubk1).toString('hex')\n    t.equals(pub1, pub2, 'equal secrets')\n  })\n})\n"]}