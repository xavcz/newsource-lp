{"version":3,"sources":["random-bytes.js"],"names":[],"mappings":";;AAAA,IAAI,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAA;AAC1B,IAAI,MAAM,GAAG,OAAO,CAAC,KAAK,CAAC,CAAA;;AAE3B,IAAI,oBAAoB,GAAG;AACzB,aAAW,EAAE,OAAO,CAAC,aAAa,CAAC;AACnC,mBAAiB,EAAE,MAAM,CAAC,iBAAiB;CAC5C,CAAA;;AAED,KAAK,IAAI,eAAe,IAAI,oBAAoB,EAAE;;AAEhD,MAAI,WAAW,GAAG,oBAAoB,CAAC,eAAe,CAAC,CAAA;;AAEvD,MAAI,CAAC,mBAAmB,EAAE,UAAU,CAAC,EAAE;AACrC,QAAI;AACF,UAAI,CAAC,GAAG,WAAW,CAAC,EAAE,CAAC,CAAA;AACvB,OAAC,CAAC,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAA;AACxB,OAAC,CAAC,GAAG,EAAE,CAAA;KACR,CAAC,OAAO,GAAG,EAAE;AACZ,OAAC,CAAC,EAAE,CAAC,eAAe,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,sCAAsC,CAAC,CAAA;AAC/E,OAAC,CAAC,GAAG,EAAE,CAAA;KACR;GACF,CAAC,CAAA;;AAEF,MAAI,CAAC,eAAe,EAAE,UAAU,CAAC,EAAE;AACjC,KAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;AACT,KAAC,CAAC,KAAK,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,CAAA;AACnC,KAAC,CAAC,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC,CAAC,CAAA;AACtC,eAAW,CAAC,EAAE,EAAE,UAAU,EAAE,EAAE,KAAK,EAAE;AACnC,OAAC,CAAC,KAAK,CAAC,EAAE,CAAC,CAAA;AACX,OAAC,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,EAAE,EAAE,CAAC,CAAA;AACzB,OAAC,CAAC,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAA;AAC5B,OAAC,CAAC,GAAG,EAAE,CAAA;KACR,CAAC,CAAA;GACH,CAAC,CAAA;;AAEF,MAAI,CAAC,eAAe,GAAG,cAAc,EAAE,UAAU,CAAC,EAAE;AAClD,QAAI,CAAC,GAAG,IAAI,CAAA;AACZ,QAAI,CAAC,GAAG,WAAW,CAAC,CAAC,CAAC,CAAA;;AAEtB,QAAI,IAAI,GAAG,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,EAAE,UAAU,CAAC,EAAE,CAAC,EAAE;AAAE,aAAO,CAAC,GAAG,CAAC,CAAA;KAAE,EAAE,CAAC,CAAC,GAAG,CAAC,CAAA;;;;;;;;;;AAUrE,QAAI,QAAQ,GAAG,GAAG,GAAG,CAAC,CAAA;AACtB,QAAI,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;;;AAG3B,WAAO,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,QAAQ,GAAG,KAAK,EAAE,IAAI,EAAE,QAAQ,GAAG,KAAK,CAAC,CAAC,CAAC,CAAA;AACvE,KAAC,CAAC,EAAE,CAAC,IAAI,GAAG,QAAQ,GAAG,KAAK,CAAC,CAAA;AAC7B,KAAC,CAAC,EAAE,CAAC,IAAI,GAAG,QAAQ,GAAG,KAAK,CAAC,CAAA;;AAE7B,KAAC,CAAC,GAAG,EAAE,CAAA;GACR,CAAC,CAAA;CACH","file":"random-bytes-compiled.js","sourcesContent":["var test = require('tape')\nvar crypto = require('../')\n\nvar randomBytesFunctions = {\n  randomBytes: require('randombytes'),\n  pseudoRandomBytes: crypto.pseudoRandomBytes\n}\n\nfor (var randomBytesName in randomBytesFunctions) {\n  // Both randomBytes and pseudoRandomBytes should provide the same interface\n  var randomBytes = randomBytesFunctions[randomBytesName]\n\n  test('get error message', function (t) {\n    try {\n      var b = randomBytes(10)\n      t.ok(Buffer.isBuffer(b))\n      t.end()\n    } catch (err) {\n      t.ok(/not supported/.test(err.message), '\"not supported\"  is in error message')\n      t.end()\n    }\n  })\n\n  test(randomBytesName, function (t) {\n    t.plan(5)\n    t.equal(randomBytes(10).length, 10)\n    t.ok(Buffer.isBuffer(randomBytes(10)))\n    randomBytes(10, function (ex, bytes) {\n      t.error(ex)\n      t.equal(bytes.length, 10)\n      t.ok(Buffer.isBuffer(bytes))\n      t.end()\n    })\n  })\n\n  test(randomBytesName + ' seem random', function (t) {\n    var L = 1000\n    var b = randomBytes(L)\n\n    var mean = [].reduce.call(b, function (a, b) { return a + b }, 0) / L\n\n    // test that the random numbers are plausably random.\n    // Math.random() will pass this, but this will catch\n    // terrible mistakes such as this blunder:\n    // https://github.com/dominictarr/crypto-browserify/commit/3267955e1df7edd1680e52aeede9a89506ed2464#commitcomment-7916835\n\n    // this doesn't check that the bytes are in a random *order*\n    // but it's better than nothing.\n\n    var expected = 256 / 2\n    var smean = Math.sqrt(mean)\n\n    // console.log doesn't work right on testling, *grumble grumble*\n    console.log(JSON.stringify([expected - smean, mean, expected + smean]))\n    t.ok(mean < expected + smean)\n    t.ok(mean > expected - smean)\n\n    t.end()\n  })\n}\n"]}