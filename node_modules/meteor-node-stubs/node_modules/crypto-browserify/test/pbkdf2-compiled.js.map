{"version":3,"sources":["pbkdf2.js"],"names":[],"mappings":";;AAAA,IAAI,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAA;AAC1B,IAAI,MAAM,GAAG,OAAO,CAAC,gBAAgB,CAAC,CAAA;;AAEtC,IAAI,OAAO,GAAG,OAAO,CAAC,0BAA0B,CAAC,CAAA;;AAEjD,IAAI,CAAC,QAAQ,EAAE,UAAU,CAAC,EAAE;AAC1B,SAAO,CAAC,OAAO,CAAC,UAAU,KAAK,EAAE;;AAE/B,QAAI,KAAK,CAAC,UAAU,GAAG,KAAK,EAAE,OAAM;;AAEpC,QAAI,GAAG,GAAG,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,QAAQ,EAAE,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,UAAU,EAAE,KAAK,CAAC,MAAM,CAAC,CAAA;;AAEvF,QAAI,GAAG,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,KAAK,CAAC,IAAI,EAAE;AACtC,aAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAA;KACnB;;AAED,KAAC,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,KAAK,CAAC,IAAI,CAAC,CAAA;GACzC,CAAC,CAAA;;AAEF,GAAC,CAAC,GAAG,EAAE,CAAA;CACR,CAAC,CAAA","file":"pbkdf2-compiled.js","sourcesContent":["var tape = require('tape')\nvar crypto = require('pbkdf2/browser')\n\nvar vectors = require('hash-test-vectors/pbkdf2')\n\ntape('pbkdf2', function (t) {\n  vectors.forEach(function (input) {\n    // skip inputs that will take way too long\n    if (input.iterations > 10000) return\n\n    var key = crypto.pbkdf2Sync(input.password, input.salt, input.iterations, input.length)\n\n    if (key.toString('hex') !== input.sha1) {\n      console.log(input)\n    }\n\n    t.equal(key.toString('hex'), input.sha1)\n  })\n\n  t.end()\n})\n"]}