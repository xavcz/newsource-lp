{"version":3,"sources":["publicEncrypt.js"],"names":[],"mappings":"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","file":"publicEncrypt-compiled.js","sourcesContent":["var parseKeys = require('parse-asn1');\nvar randomBytes = require('randombytes');\nvar createHash = require('create-hash');\nvar mgf = require('./mgf');\nvar xor = require('./xor');\nvar bn = require('bn.js');\nvar withPublic = require('./withPublic');\nvar crt = require('browserify-rsa');\n\nvar constants = {\n  RSA_PKCS1_OAEP_PADDING: 4,\n  RSA_PKCS1_PADDIN: 1,\n  RSA_NO_PADDING: 3\n};\n\nmodule.exports = function publicEncrypt(public_key, msg, reverse) {\n  var padding;\n  if (public_key.padding) {\n    padding = public_key.padding;\n  } else if (reverse) {\n    padding = 1;\n  } else {\n    padding = 4;\n  }\n  var key = parseKeys(public_key);\n  var paddedMsg;\n  if (padding === 4) {\n    paddedMsg = oaep(key, msg);\n  } else if (padding === 1) {\n    paddedMsg = pkcs1(key, msg, reverse);\n  } else if (padding === 3) {\n    paddedMsg = new bn(msg);\n    if (paddedMsg.cmp(key.modulus) >= 0) {\n      throw new Error('data too long for modulus');\n    }\n  } else {\n    throw new Error('unknown padding');\n  }\n  if (reverse) {\n    return crt(paddedMsg, key);\n  } else {\n    return withPublic(paddedMsg, key);\n  }\n};\n\nfunction oaep(key, msg){\n  var k = key.modulus.byteLength();\n  var mLen = msg.length;\n  var iHash = createHash('sha1').update(new Buffer('')).digest();\n  var hLen = iHash.length;\n  var hLen2 = 2 * hLen;\n  if (mLen > k - hLen2 - 2) {\n    throw new Error('message too long');\n  }\n  var ps = new Buffer(k - mLen - hLen2 - 2);\n  ps.fill(0);\n  var dblen = k - hLen - 1;\n  var seed = randomBytes(hLen);\n  var maskedDb = xor(Buffer.concat([iHash, ps, new Buffer([1]), msg], dblen), mgf(seed, dblen));\n  var maskedSeed = xor(seed, mgf(maskedDb, hLen));\n  return new bn(Buffer.concat([new Buffer([0]), maskedSeed, maskedDb], k));\n}\nfunction pkcs1(key, msg, reverse){\n  var mLen = msg.length;\n  var k = key.modulus.byteLength();\n  if (mLen > k - 11) {\n    throw new Error('message too long');\n  }\n  var ps;\n  if (reverse) {\n    ps = new Buffer(k - mLen - 3);\n    ps.fill(0xff);\n  } else {\n    ps = nonZero(k - mLen - 3);\n  }\n  return new bn(Buffer.concat([new Buffer([0, reverse?1:2]), ps, new Buffer([0]), msg], k));\n}\nfunction nonZero(len, crypto) {\n  var out = new Buffer(len);\n  var i = 0;\n  var cache = randomBytes(len*2);\n  var cur = 0;\n  var num;\n  while (i < len) {\n    if (cur === cache.length) {\n      cache = randomBytes(len*2);\n      cur = 0;\n    }\n    num = cache[cur++];\n    if (num) {\n      out[i++] = num;\n    }\n  }\n  return out;\n}"]}