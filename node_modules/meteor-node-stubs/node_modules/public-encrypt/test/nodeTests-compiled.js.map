{"version":3,"sources":["nodeTests.js"],"names":[],"mappings":";;AAAA,IAAI,MAAM,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC;AACnC,IAAI,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;AAC3B,IAAI,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;;;AAGvB,IAAI,CAAC,YAAY,EAAE,UAAU,CAAC,EAAE;AAC9B,MAAI,OAAO,GAAG,EAAE,CAAC,YAAY,CAAC,SAAS,GAAG,gBAAgB,EAAE,OAAO,CAAC,CAAC;AACrE,MAAI,MAAM,GAAG,EAAE,CAAC,YAAY,CAAC,SAAS,GAAG,eAAe,EAAE,OAAO,CAAC,CAAC;AACnE,MAAI,SAAS,GAAG,EAAE,CAAC,YAAY,CAAC,SAAS,GAAG,sBAAsB,EAC9D,OAAO,CAAC,CAAC;AACb,MAAI,SAAS,GAAG,EAAE,CAAC,YAAY,CAAC,SAAS,GAAG,uBAAuB,EAC/D,OAAO,CAAC,CAAC;AACb,MAAI,kBAAkB,GAAG,EAAE,CAAC,YAAY,CACxC,SAAS,GAAG,iCAAiC,EAAE,OAAO,CAAC,CAAC;AACxD,MAAI,KAAK,GAAG,iBAAiB,CAAC;AAC9B,MAAI,eAAe,GAAG,IAAI,MAAM,CAAC,KAAK,CAAC,CAAC;;AAExC,MAAI,eAAe,GAAG,MAAM,CAAC,aAAa,CAAC,SAAS,EAAE,eAAe,CAAC,CAAC;;AAEvE,MAAI,eAAe,GAAG,MAAM,CAAC,cAAc,CAAC,SAAS,EAAE,eAAe,CAAC,CAAC;AACxE,GAAC,CAAC,KAAK,CAAC,KAAK,EAAE,eAAe,CAAC,QAAQ,EAAE,CAAC,CAAC;;AAE3C,MAAI,2BAA2B,GAAG,MAAM,CAAC,cAAc,CAAC;AACtD,OAAG,EAAE,kBAAkB;AACvB,cAAU,EAAE,UAAU;GACvB,EAAE,eAAe,CAAC,CAAC;AACpB,GAAC,CAAC,KAAK,CAAC,KAAK,EAAE,2BAA2B,CAAC,QAAQ,EAAE,CAAC,CAAC;;;;;;;AAOvD,iBAAe,GAAG,MAAM,CAAC,aAAa,CAAC,MAAM,EAAE,eAAe,CAAC,CAAC;;AAEhE,iBAAe,GAAG,MAAM,CAAC,cAAc,CAAC,MAAM,EAAE,eAAe,CAAC,CAAC;AACjE,GAAC,CAAC,KAAK,CAAC,KAAK,EAAE,eAAe,CAAC,QAAQ,EAAE,CAAC,CAAC;;AAE3C,iBAAe,GAAG,MAAM,CAAC,cAAc,CAAC,MAAM,EAAE,eAAe,CAAC,CAAC;;AAEjE,iBAAe,GAAG,MAAM,CAAC,aAAa,CAAC,MAAM,EAAE,eAAe,CAAC,CAAC;AAChE,GAAC,CAAC,KAAK,CAAC,KAAK,EAAE,eAAe,CAAC,QAAQ,EAAE,CAAC,CAAC;;AAE3C,GAAC,CAAC,MAAM,CAAC,YAAW;AAClB,UAAM,CAAC,cAAc,CAAC;AACpB,SAAG,EAAE,kBAAkB;AACvB,gBAAU,EAAE,OAAO;KACpB,EAAE,eAAe,CAAC,CAAC;GACrB,CAAC,CAAC;AACH,GAAC,CAAC,GAAG,EAAE,CAAC;CACT,CAAC,CAAC","file":"nodeTests-compiled.js","sourcesContent":["var crypto = require('../browser');\nvar test = require('tape');\nvar fs = require('fs');\n\n// Test RSA encryption/decryption\ntest('node tests', function (t) {\n  var certPem = fs.readFileSync(__dirname + '/test_cert.pem', 'ascii');\n  var keyPem = fs.readFileSync(__dirname + '/test_key.pem', 'ascii');\n  var rsaPubPem = fs.readFileSync(__dirname + '/test_rsa_pubkey.pem',\n      'ascii');\n  var rsaKeyPem = fs.readFileSync(__dirname + '/test_rsa_privkey.pem',\n      'ascii');\n  var rsaKeyPemEncrypted = fs.readFileSync(\n  __dirname + '/test_rsa_privkey_encrypted.pem', 'ascii');\n  var input = 'I AM THE WALRUS';\n  var bufferToEncrypt = new Buffer(input);\n\n  var encryptedBuffer = crypto.publicEncrypt(rsaPubPem, bufferToEncrypt);\n\n  var decryptedBuffer = crypto.privateDecrypt(rsaKeyPem, encryptedBuffer);\n  t.equal(input, decryptedBuffer.toString());\n\n  var decryptedBufferWithPassword = crypto.privateDecrypt({\n    key: rsaKeyPemEncrypted,\n    passphrase: 'password'\n  }, encryptedBuffer);\n  t.equal(input, decryptedBufferWithPassword.toString());\n\n  // encryptedBuffer = crypto.publicEncrypt(certPem, bufferToEncrypt);\n\n  // decryptedBuffer = crypto.privateDecrypt(keyPem, encryptedBuffer);\n  // t.equal(input, decryptedBuffer.toString());\n\n  encryptedBuffer = crypto.publicEncrypt(keyPem, bufferToEncrypt);\n\n  decryptedBuffer = crypto.privateDecrypt(keyPem, encryptedBuffer);\n  t.equal(input, decryptedBuffer.toString());\n\n  encryptedBuffer = crypto.privateEncrypt(keyPem, bufferToEncrypt);\n\n  decryptedBuffer = crypto.publicDecrypt(keyPem, encryptedBuffer);\n  t.equal(input, decryptedBuffer.toString());\n\n  t.throws(function() {\n    crypto.privateDecrypt({\n      key: rsaKeyPemEncrypted,\n      passphrase: 'wrong'\n    }, encryptedBuffer);\n  });\n  t.end();\n});"]}