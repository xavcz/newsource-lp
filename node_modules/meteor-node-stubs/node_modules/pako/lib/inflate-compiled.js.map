{"version":3,"sources":["inflate.js"],"names":[],"mappings":"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","file":"inflate-compiled.js","sourcesContent":["'use strict';\n\n\nvar zlib_inflate = require('./zlib/inflate.js');\nvar utils = require('./utils/common');\nvar strings = require('./utils/strings');\nvar c = require('./zlib/constants');\nvar msg = require('./zlib/messages');\nvar zstream = require('./zlib/zstream');\nvar gzheader = require('./zlib/gzheader');\n\nvar toString = Object.prototype.toString;\n\n/**\n * class Inflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[inflate]]\n * and [[inflateRaw]].\n **/\n\n/* internal\n * inflate.chunks -> Array\n *\n * Chunks of output data, if [[Inflate#onData]] not overriden.\n **/\n\n/**\n * Inflate.result -> Uint8Array|Array|String\n *\n * Uncompressed result, generated by default [[Inflate#onData]]\n * and [[Inflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Inflate#push]] with `Z_FINISH` / `true` param) or if you\n * push a chunk with explicit flush (call [[Inflate#push]] with\n * `Z_SYNC_FLUSH` param).\n **/\n\n/**\n * Inflate.err -> Number\n *\n * Error code after inflate finished. 0 (Z_OK) on success.\n * Should be checked if broken data possible.\n **/\n\n/**\n * Inflate.msg -> String\n *\n * Error message, if [[Inflate.err]] != 0\n **/\n\n\n/**\n * new Inflate(options)\n * - options (Object): zlib inflate options.\n *\n * Creates new inflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `windowBits`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw inflate\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n * By default, when no options set, autodetect deflate/gzip data format via\n * wrapper header.\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])\n *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * var inflate = new pako.Inflate({ level: 3});\n *\n * inflate.push(chunk1, false);\n * inflate.push(chunk2, true);  // true -> last chunk\n *\n * if (inflate.err) { throw new Error(inflate.err); }\n *\n * console.log(inflate.result);\n * ```\n **/\nvar Inflate = function(options) {\n\n  this.options = utils.assign({\n    chunkSize: 16384,\n    windowBits: 0,\n    to: ''\n  }, options || {});\n\n  var opt = this.options;\n\n  // Force window size for `raw` data, if not set directly,\n  // because we have no header for autodetect.\n  if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) {\n    opt.windowBits = -opt.windowBits;\n    if (opt.windowBits === 0) { opt.windowBits = -15; }\n  }\n\n  // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate\n  if ((opt.windowBits >= 0) && (opt.windowBits < 16) &&\n      !(options && options.windowBits)) {\n    opt.windowBits += 32;\n  }\n\n  // Gzip header has no info about windows size, we can do autodetect only\n  // for deflate. So, if window size not set, force it to max when gzip possible\n  if ((opt.windowBits > 15) && (opt.windowBits < 48)) {\n    // bit 3 (16) -> gzipped data\n    // bit 4 (32) -> autodetect gzip/deflate\n    if ((opt.windowBits & 15) === 0) {\n      opt.windowBits |= 15;\n    }\n  }\n\n  this.err    = 0;      // error code, if happens (0 = Z_OK)\n  this.msg    = '';     // error message\n  this.ended  = false;  // used to avoid multiple onEnd() calls\n  this.chunks = [];     // chunks of compressed data\n\n  this.strm   = new zstream();\n  this.strm.avail_out = 0;\n\n  var status  = zlib_inflate.inflateInit2(\n    this.strm,\n    opt.windowBits\n  );\n\n  if (status !== c.Z_OK) {\n    throw new Error(msg[status]);\n  }\n\n  this.header = new gzheader();\n\n  zlib_inflate.inflateGetHeader(this.strm, this.header);\n};\n\n/**\n * Inflate#push(data[, mode]) -> Boolean\n * - data (Uint8Array|Array|ArrayBuffer|String): input data\n * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.\n *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` meansh Z_FINISH.\n *\n * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with\n * new output chunks. Returns `true` on success. The last data block must have\n * mode Z_FINISH (or `true`). That will flush internal pending buffers and call\n * [[Inflate#onEnd]]. For interim explicit flushes (without ending the stream) you\n * can use mode Z_SYNC_FLUSH, keeping the decompression context.\n *\n * On fail call [[Inflate#onEnd]] with error code and return false.\n *\n * We strongly recommend to use `Uint8Array` on input for best speed (output\n * format is detected automatically). Also, don't skip last param and always\n * use the same type in your code (boolean or number). That will improve JS speed.\n *\n * For regular `Array`-s make sure all elements are [0..255].\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\nInflate.prototype.push = function(data, mode) {\n  var strm = this.strm;\n  var chunkSize = this.options.chunkSize;\n  var status, _mode;\n  var next_out_utf8, tail, utf8str;\n\n  // Flag to properly process Z_BUF_ERROR on testing inflate call\n  // when we check that all output data was flushed.\n  var allowBufError = false;\n\n  if (this.ended) { return false; }\n  _mode = (mode === ~~mode) ? mode : ((mode === true) ? c.Z_FINISH : c.Z_NO_FLUSH);\n\n  // Convert data if needed\n  if (typeof data === 'string') {\n    // Only binary strings can be decompressed on practice\n    strm.input = strings.binstring2buf(data);\n  } else if (toString.call(data) === '[object ArrayBuffer]') {\n    strm.input = new Uint8Array(data);\n  } else {\n    strm.input = data;\n  }\n\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n\n  do {\n    if (strm.avail_out === 0) {\n      strm.output = new utils.Buf8(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n\n    status = zlib_inflate.inflate(strm, c.Z_NO_FLUSH);    /* no bad return value */\n\n    if (status === c.Z_BUF_ERROR && allowBufError === true) {\n      status = c.Z_OK;\n      allowBufError = false;\n    }\n\n    if (status !== c.Z_STREAM_END && status !== c.Z_OK) {\n      this.onEnd(status);\n      this.ended = true;\n      return false;\n    }\n\n    if (strm.next_out) {\n      if (strm.avail_out === 0 || status === c.Z_STREAM_END || (strm.avail_in === 0 && (_mode === c.Z_FINISH || _mode === c.Z_SYNC_FLUSH))) {\n\n        if (this.options.to === 'string') {\n\n          next_out_utf8 = strings.utf8border(strm.output, strm.next_out);\n\n          tail = strm.next_out - next_out_utf8;\n          utf8str = strings.buf2string(strm.output, next_out_utf8);\n\n          // move tail\n          strm.next_out = tail;\n          strm.avail_out = chunkSize - tail;\n          if (tail) { utils.arraySet(strm.output, strm.output, next_out_utf8, tail, 0); }\n\n          this.onData(utf8str);\n\n        } else {\n          this.onData(utils.shrinkBuf(strm.output, strm.next_out));\n        }\n      }\n    }\n\n    // When no more input data, we should check that internal inflate buffers\n    // are flushed. The only way to do it when avail_out = 0 - run one more\n    // inflate pass. But if output data not exists, inflate return Z_BUF_ERROR.\n    // Here we set flag to process this error properly.\n    //\n    // NOTE. Deflate does not return error in this case and does not needs such\n    // logic.\n    if (strm.avail_in === 0 && strm.avail_out === 0) {\n      allowBufError = true;\n    }\n\n  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== c.Z_STREAM_END);\n\n  if (status === c.Z_STREAM_END) {\n    _mode = c.Z_FINISH;\n  }\n\n  // Finalize on the last chunk.\n  if (_mode === c.Z_FINISH) {\n    status = zlib_inflate.inflateEnd(this.strm);\n    this.onEnd(status);\n    this.ended = true;\n    return status === c.Z_OK;\n  }\n\n  // callback interim results if Z_SYNC_FLUSH.\n  if (_mode === c.Z_SYNC_FLUSH) {\n    this.onEnd(c.Z_OK);\n    strm.avail_out = 0;\n    return true;\n  }\n\n  return true;\n};\n\n\n/**\n * Inflate#onData(chunk) -> Void\n * - chunk (Uint8Array|Array|String): ouput data. Type of array depends\n *   on js engine support. When string output requested, each chunk\n *   will be string.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\nInflate.prototype.onData = function(chunk) {\n  this.chunks.push(chunk);\n};\n\n\n/**\n * Inflate#onEnd(status) -> Void\n * - status (Number): inflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called either after you tell inflate that the input stream is\n * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)\n * or if an error happened. By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\nInflate.prototype.onEnd = function(status) {\n  // On success - join\n  if (status === c.Z_OK) {\n    if (this.options.to === 'string') {\n      // Glue & convert here, until we teach pako to send\n      // utf8 alligned strings to onData\n      this.result = this.chunks.join('');\n    } else {\n      this.result = utils.flattenChunks(this.chunks);\n    }\n  }\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n\n\n/**\n * inflate(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Decompress `data` with inflate/ungzip and `options`. Autodetect\n * format via wrapper header by default. That's why we don't provide\n * separate `ungzip` method.\n *\n * Supported options are:\n *\n * - windowBits\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , input = pako.deflate([1,2,3,4,5,6,7,8,9])\n *   , output;\n *\n * try {\n *   output = pako.inflate(input);\n * } catch (err)\n *   console.log(err);\n * }\n * ```\n **/\nfunction inflate(input, options) {\n  var inflator = new Inflate(options);\n\n  inflator.push(input, true);\n\n  // That will never happens, if you don't cheat with options :)\n  if (inflator.err) { throw inflator.msg; }\n\n  return inflator.result;\n}\n\n\n/**\n * inflateRaw(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * The same as [[inflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\nfunction inflateRaw(input, options) {\n  options = options || {};\n  options.raw = true;\n  return inflate(input, options);\n}\n\n\n/**\n * ungzip(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Just shortcut to [[inflate]], because it autodetects format\n * by header.content. Done for convenience.\n **/\n\n\nexports.Inflate = Inflate;\nexports.inflate = inflate;\nexports.inflateRaw = inflateRaw;\nexports.ungzip  = inflate;\n"]}