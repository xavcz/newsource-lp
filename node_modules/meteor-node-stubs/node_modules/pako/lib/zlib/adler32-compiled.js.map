{"version":3,"sources":["adler32.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;AAMb,SAAS,OAAO,CAAC,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;AACrC,MAAI,EAAE,GAAG,AAAC,KAAK,GAAG,MAAM,GAAG,CAAC;MACxB,EAAE,GAAG,AAAC,AAAC,KAAK,KAAK,EAAE,GAAI,MAAM,GAAG,CAAC;MACjC,CAAC,GAAG,CAAC,CAAC;;AAEV,SAAO,GAAG,KAAK,CAAC,EAAE;;;;AAIhB,KAAC,GAAG,GAAG,GAAG,IAAI,GAAG,IAAI,GAAG,GAAG,CAAC;AAC5B,OAAG,IAAI,CAAC,CAAC;;AAET,OAAG;AACD,QAAE,GAAG,AAAC,EAAE,GAAG,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC;AAC1B,QAAE,GAAG,AAAC,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;KACnB,QAAQ,EAAE,CAAC,EAAE;;AAEd,MAAE,IAAI,KAAK,CAAC;AACZ,MAAE,IAAI,KAAK,CAAC;GACb;;AAED,SAAO,AAAC,EAAE,GAAI,EAAE,IAAI,EAAE,AAAC,GAAG,CAAC,CAAC;CAC7B;;AAGD,MAAM,CAAC,OAAO,GAAG,OAAO,CAAC","file":"adler32-compiled.js","sourcesContent":["'use strict';\n\n// Note: adler32 takes 12% for level 0 and 2% for level 6.\n// It doesn't worth to make additional optimizationa as in original.\n// Small size is preferable.\n\nfunction adler32(adler, buf, len, pos) {\n  var s1 = (adler & 0xffff) |0,\n      s2 = ((adler >>> 16) & 0xffff) |0,\n      n = 0;\n\n  while (len !== 0) {\n    // Set limit ~ twice less than 5552, to keep\n    // s2 in 31-bits, because we force signed ints.\n    // in other case %= will fail.\n    n = len > 2000 ? 2000 : len;\n    len -= n;\n\n    do {\n      s1 = (s1 + buf[pos++]) |0;\n      s2 = (s2 + s1) |0;\n    } while (--n);\n\n    s1 %= 65521;\n    s2 %= 65521;\n  }\n\n  return (s1 | (s2 << 16)) |0;\n}\n\n\nmodule.exports = adler32;\n"]}