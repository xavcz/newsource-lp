{"version":3,"sources":["deflate.js"],"names":[],"mappings":"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","file":"deflate-compiled.js","sourcesContent":["'use strict';\n\nvar utils   = require('../utils/common');\nvar trees   = require('./trees');\nvar adler32 = require('./adler32');\nvar crc32   = require('./crc32');\nvar msg   = require('./messages');\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\n\n/* Allowed flush values; see deflate() and inflate() below for details */\nvar Z_NO_FLUSH      = 0;\nvar Z_PARTIAL_FLUSH = 1;\n//var Z_SYNC_FLUSH    = 2;\nvar Z_FULL_FLUSH    = 3;\nvar Z_FINISH        = 4;\nvar Z_BLOCK         = 5;\n//var Z_TREES         = 6;\n\n\n/* Return codes for the compression/decompression functions. Negative values\n * are errors, positive values are used for special but normal events.\n */\nvar Z_OK            = 0;\nvar Z_STREAM_END    = 1;\n//var Z_NEED_DICT     = 2;\n//var Z_ERRNO         = -1;\nvar Z_STREAM_ERROR  = -2;\nvar Z_DATA_ERROR    = -3;\n//var Z_MEM_ERROR     = -4;\nvar Z_BUF_ERROR     = -5;\n//var Z_VERSION_ERROR = -6;\n\n\n/* compression levels */\n//var Z_NO_COMPRESSION      = 0;\n//var Z_BEST_SPEED          = 1;\n//var Z_BEST_COMPRESSION    = 9;\nvar Z_DEFAULT_COMPRESSION = -1;\n\n\nvar Z_FILTERED            = 1;\nvar Z_HUFFMAN_ONLY        = 2;\nvar Z_RLE                 = 3;\nvar Z_FIXED               = 4;\nvar Z_DEFAULT_STRATEGY    = 0;\n\n/* Possible values of the data_type field (though see inflate()) */\n//var Z_BINARY              = 0;\n//var Z_TEXT                = 1;\n//var Z_ASCII               = 1; // = Z_TEXT\nvar Z_UNKNOWN             = 2;\n\n\n/* The deflate compression method */\nvar Z_DEFLATED  = 8;\n\n/*============================================================================*/\n\n\nvar MAX_MEM_LEVEL = 9;\n/* Maximum value for memLevel in deflateInit2 */\nvar MAX_WBITS = 15;\n/* 32K LZ77 window */\nvar DEF_MEM_LEVEL = 8;\n\n\nvar LENGTH_CODES  = 29;\n/* number of length codes, not counting the special END_BLOCK code */\nvar LITERALS      = 256;\n/* number of literal bytes 0..255 */\nvar L_CODES       = LITERALS + 1 + LENGTH_CODES;\n/* number of Literal or Length codes, including the END_BLOCK code */\nvar D_CODES       = 30;\n/* number of distance codes */\nvar BL_CODES      = 19;\n/* number of codes used to transfer the bit lengths */\nvar HEAP_SIZE     = 2*L_CODES + 1;\n/* maximum heap size */\nvar MAX_BITS  = 15;\n/* All codes must not exceed MAX_BITS bits */\n\nvar MIN_MATCH = 3;\nvar MAX_MATCH = 258;\nvar MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);\n\nvar PRESET_DICT = 0x20;\n\nvar INIT_STATE = 42;\nvar EXTRA_STATE = 69;\nvar NAME_STATE = 73;\nvar COMMENT_STATE = 91;\nvar HCRC_STATE = 103;\nvar BUSY_STATE = 113;\nvar FINISH_STATE = 666;\n\nvar BS_NEED_MORE      = 1; /* block not completed, need more input or more output */\nvar BS_BLOCK_DONE     = 2; /* block flush performed */\nvar BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */\nvar BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */\n\nvar OS_CODE = 0x03; // Unix :) . Don't detect, use this default.\n\nfunction err(strm, errorCode) {\n  strm.msg = msg[errorCode];\n  return errorCode;\n}\n\nfunction rank(f) {\n  return ((f) << 1) - ((f) > 4 ? 9 : 0);\n}\n\nfunction zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }\n\n\n/* =========================================================================\n * Flush as much pending output as possible. All deflate() output goes\n * through this function so some applications may wish to modify it\n * to avoid allocating a large strm->output buffer and copying into it.\n * (See also read_buf()).\n */\nfunction flush_pending(strm) {\n  var s = strm.state;\n\n  //_tr_flush_bits(s);\n  var len = s.pending;\n  if (len > strm.avail_out) {\n    len = strm.avail_out;\n  }\n  if (len === 0) { return; }\n\n  utils.arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);\n  strm.next_out += len;\n  s.pending_out += len;\n  strm.total_out += len;\n  strm.avail_out -= len;\n  s.pending -= len;\n  if (s.pending === 0) {\n    s.pending_out = 0;\n  }\n}\n\n\nfunction flush_block_only (s, last) {\n  trees._tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);\n  s.block_start = s.strstart;\n  flush_pending(s.strm);\n}\n\n\nfunction put_byte(s, b) {\n  s.pending_buf[s.pending++] = b;\n}\n\n\n/* =========================================================================\n * Put a short in the pending buffer. The 16-bit value is put in MSB order.\n * IN assertion: the stream state is correct and there is enough room in\n * pending_buf.\n */\nfunction putShortMSB(s, b) {\n//  put_byte(s, (Byte)(b >> 8));\n//  put_byte(s, (Byte)(b & 0xff));\n  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;\n  s.pending_buf[s.pending++] = b & 0xff;\n}\n\n\n/* ===========================================================================\n * Read a new buffer from the current input stream, update the adler32\n * and total number of bytes read.  All deflate() input goes through\n * this function so some applications may wish to modify it to avoid\n * allocating a large strm->input buffer and copying from it.\n * (See also flush_pending()).\n */\nfunction read_buf(strm, buf, start, size) {\n  var len = strm.avail_in;\n\n  if (len > size) { len = size; }\n  if (len === 0) { return 0; }\n\n  strm.avail_in -= len;\n\n  utils.arraySet(buf, strm.input, strm.next_in, len, start);\n  if (strm.state.wrap === 1) {\n    strm.adler = adler32(strm.adler, buf, len, start);\n  }\n\n  else if (strm.state.wrap === 2) {\n    strm.adler = crc32(strm.adler, buf, len, start);\n  }\n\n  strm.next_in += len;\n  strm.total_in += len;\n\n  return len;\n}\n\n\n/* ===========================================================================\n * Set match_start to the longest match starting at the given string and\n * return its length. Matches shorter or equal to prev_length are discarded,\n * in which case the result is equal to prev_length and match_start is\n * garbage.\n * IN assertions: cur_match is the head of the hash chain for the current\n *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1\n * OUT assertion: the match length is not greater than s->lookahead.\n */\nfunction longest_match(s, cur_match) {\n  var chain_length = s.max_chain_length;      /* max hash chain length */\n  var scan = s.strstart; /* current string */\n  var match;                       /* matched string */\n  var len;                           /* length of current match */\n  var best_len = s.prev_length;              /* best match length so far */\n  var nice_match = s.nice_match;             /* stop if match long enough */\n  var limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?\n      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;\n\n  var _win = s.window; // shortcut\n\n  var wmask = s.w_mask;\n  var prev  = s.prev;\n\n  /* Stop when cur_match becomes <= limit. To simplify the code,\n   * we prevent matches with the string of window index 0.\n   */\n\n  var strend = s.strstart + MAX_MATCH;\n  var scan_end1  = _win[scan + best_len - 1];\n  var scan_end   = _win[scan + best_len];\n\n  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.\n   * It is easy to get rid of this optimization if necessary.\n   */\n  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, \"Code too clever\");\n\n  /* Do not waste too much time if we already have a good match: */\n  if (s.prev_length >= s.good_match) {\n    chain_length >>= 2;\n  }\n  /* Do not look for matches beyond the end of the input. This is necessary\n   * to make deflate deterministic.\n   */\n  if (nice_match > s.lookahead) { nice_match = s.lookahead; }\n\n  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, \"need lookahead\");\n\n  do {\n    // Assert(cur_match < s->strstart, \"no future\");\n    match = cur_match;\n\n    /* Skip to next match if the match length cannot increase\n     * or if the match length is less than 2.  Note that the checks below\n     * for insufficient lookahead only occur occasionally for performance\n     * reasons.  Therefore uninitialized memory will be accessed, and\n     * conditional jumps will be made that depend on those values.\n     * However the length of the match is limited to the lookahead, so\n     * the output of deflate is not affected by the uninitialized values.\n     */\n\n    if (_win[match + best_len]     !== scan_end  ||\n        _win[match + best_len - 1] !== scan_end1 ||\n        _win[match]                !== _win[scan] ||\n        _win[++match]              !== _win[scan + 1]) {\n      continue;\n    }\n\n    /* The check at best_len-1 can be removed because it will be made\n     * again later. (This heuristic is not always a win.)\n     * It is not necessary to compare scan[2] and match[2] since they\n     * are always equal when the other bytes match, given that\n     * the hash keys are equal and that HASH_BITS >= 8.\n     */\n    scan += 2;\n    match++;\n    // Assert(*scan == *match, \"match[2]?\");\n\n    /* We check for insufficient lookahead only every 8th comparison;\n     * the 256th check will be made at strstart+258.\n     */\n    do {\n      /*jshint noempty:false*/\n    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             scan < strend);\n\n    // Assert(scan <= s->window+(unsigned)(s->window_size-1), \"wild scan\");\n\n    len = MAX_MATCH - (strend - scan);\n    scan = strend - MAX_MATCH;\n\n    if (len > best_len) {\n      s.match_start = cur_match;\n      best_len = len;\n      if (len >= nice_match) {\n        break;\n      }\n      scan_end1  = _win[scan + best_len - 1];\n      scan_end   = _win[scan + best_len];\n    }\n  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);\n\n  if (best_len <= s.lookahead) {\n    return best_len;\n  }\n  return s.lookahead;\n}\n\n\n/* ===========================================================================\n * Fill the window when the lookahead becomes insufficient.\n * Updates strstart and lookahead.\n *\n * IN assertion: lookahead < MIN_LOOKAHEAD\n * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD\n *    At least one byte has been read, or avail_in == 0; reads are\n *    performed for at least two bytes (required for the zip translate_eol\n *    option -- not supported here).\n */\nfunction fill_window(s) {\n  var _w_size = s.w_size;\n  var p, n, m, more, str;\n\n  //Assert(s->lookahead < MIN_LOOKAHEAD, \"already enough lookahead\");\n\n  do {\n    more = s.window_size - s.lookahead - s.strstart;\n\n    // JS ints have 32 bit, block below not needed\n    /* Deal with !@#$% 64K limit: */\n    //if (sizeof(int) <= 2) {\n    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {\n    //        more = wsize;\n    //\n    //  } else if (more == (unsigned)(-1)) {\n    //        /* Very unlikely, but possible on 16 bit machine if\n    //         * strstart == 0 && lookahead == 1 (input done a byte at time)\n    //         */\n    //        more--;\n    //    }\n    //}\n\n\n    /* If the window is almost full and there is insufficient lookahead,\n     * move the upper half to the lower one to make room in the upper half.\n     */\n    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {\n\n      utils.arraySet(s.window, s.window, _w_size, _w_size, 0);\n      s.match_start -= _w_size;\n      s.strstart -= _w_size;\n      /* we now have strstart >= MAX_DIST */\n      s.block_start -= _w_size;\n\n      /* Slide the hash table (could be avoided with 32 bit values\n       at the expense of memory usage). We slide even when level == 0\n       to keep the hash table consistent if we switch back to level > 0\n       later. (Using level 0 permanently is not an optimal usage of\n       zlib, so we don't care about this pathological case.)\n       */\n\n      n = s.hash_size;\n      p = n;\n      do {\n        m = s.head[--p];\n        s.head[p] = (m >= _w_size ? m - _w_size : 0);\n      } while (--n);\n\n      n = _w_size;\n      p = n;\n      do {\n        m = s.prev[--p];\n        s.prev[p] = (m >= _w_size ? m - _w_size : 0);\n        /* If n is not on any hash chain, prev[n] is garbage but\n         * its value will never be used.\n         */\n      } while (--n);\n\n      more += _w_size;\n    }\n    if (s.strm.avail_in === 0) {\n      break;\n    }\n\n    /* If there was no sliding:\n     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&\n     *    more == window_size - lookahead - strstart\n     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)\n     * => more >= window_size - 2*WSIZE + 2\n     * In the BIG_MEM or MMAP case (not yet supported),\n     *   window_size == input_size + MIN_LOOKAHEAD  &&\n     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.\n     * Otherwise, window_size == 2*WSIZE so more >= 2.\n     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.\n     */\n    //Assert(more >= 2, \"more < 2\");\n    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);\n    s.lookahead += n;\n\n    /* Initialize the hash value now that we have some input: */\n    if (s.lookahead + s.insert >= MIN_MATCH) {\n      str = s.strstart - s.insert;\n      s.ins_h = s.window[str];\n\n      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */\n      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + 1]) & s.hash_mask;\n//#if MIN_MATCH != 3\n//        Call update_hash() MIN_MATCH-3 more times\n//#endif\n      while (s.insert) {\n        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH-1]) & s.hash_mask;\n\n        s.prev[str & s.w_mask] = s.head[s.ins_h];\n        s.head[s.ins_h] = str;\n        str++;\n        s.insert--;\n        if (s.lookahead + s.insert < MIN_MATCH) {\n          break;\n        }\n      }\n    }\n    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,\n     * but this is not important since only literal bytes will be emitted.\n     */\n\n  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);\n\n  /* If the WIN_INIT bytes after the end of the current data have never been\n   * written, then zero those bytes in order to avoid memory check reports of\n   * the use of uninitialized (or uninitialised as Julian writes) bytes by\n   * the longest match routines.  Update the high water mark for the next\n   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match\n   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.\n   */\n//  if (s.high_water < s.window_size) {\n//    var curr = s.strstart + s.lookahead;\n//    var init = 0;\n//\n//    if (s.high_water < curr) {\n//      /* Previous high water mark below current data -- zero WIN_INIT\n//       * bytes or up to end of window, whichever is less.\n//       */\n//      init = s.window_size - curr;\n//      if (init > WIN_INIT)\n//        init = WIN_INIT;\n//      zmemzero(s->window + curr, (unsigned)init);\n//      s->high_water = curr + init;\n//    }\n//    else if (s->high_water < (ulg)curr + WIN_INIT) {\n//      /* High water mark at or above current data, but below current data\n//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up\n//       * to end of window, whichever is less.\n//       */\n//      init = (ulg)curr + WIN_INIT - s->high_water;\n//      if (init > s->window_size - s->high_water)\n//        init = s->window_size - s->high_water;\n//      zmemzero(s->window + s->high_water, (unsigned)init);\n//      s->high_water += init;\n//    }\n//  }\n//\n//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,\n//    \"not enough room for search\");\n}\n\n/* ===========================================================================\n * Copy without compression as much as possible from the input stream, return\n * the current block state.\n * This function does not insert new strings in the dictionary since\n * uncompressible data is probably not useful. This function is used\n * only for the level=0 compression option.\n * NOTE: this function should be optimized to avoid extra copying from\n * window to pending_buf.\n */\nfunction deflate_stored(s, flush) {\n  /* Stored blocks are limited to 0xffff bytes, pending_buf is limited\n   * to pending_buf_size, and each stored block has a 5 byte header:\n   */\n  var max_block_size = 0xffff;\n\n  if (max_block_size > s.pending_buf_size - 5) {\n    max_block_size = s.pending_buf_size - 5;\n  }\n\n  /* Copy as much as possible from input to output: */\n  for (;;) {\n    /* Fill the window as much as possible: */\n    if (s.lookahead <= 1) {\n\n      //Assert(s->strstart < s->w_size+MAX_DIST(s) ||\n      //  s->block_start >= (long)s->w_size, \"slide too late\");\n//      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||\n//        s.block_start >= s.w_size)) {\n//        throw  new Error(\"slide too late\");\n//      }\n\n      fill_window(s);\n      if (s.lookahead === 0 && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n\n      if (s.lookahead === 0) {\n        break;\n      }\n      /* flush the current block */\n    }\n    //Assert(s->block_start >= 0L, \"block gone\");\n//    if (s.block_start < 0) throw new Error(\"block gone\");\n\n    s.strstart += s.lookahead;\n    s.lookahead = 0;\n\n    /* Emit a stored block if pending_buf will be full: */\n    var max_start = s.block_start + max_block_size;\n\n    if (s.strstart === 0 || s.strstart >= max_start) {\n      /* strstart == 0 is possible when wraparound on 16-bit machine */\n      s.lookahead = s.strstart - max_start;\n      s.strstart = max_start;\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n\n\n    }\n    /* Flush if we may have to slide, otherwise block_start may become\n     * negative and the data will be gone:\n     */\n    if (s.strstart - s.block_start >= (s.w_size - MIN_LOOKAHEAD)) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n\n  s.insert = 0;\n\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n\n  if (s.strstart > s.block_start) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n\n  return BS_NEED_MORE;\n}\n\n/* ===========================================================================\n * Compress as much as possible from the input stream, return the current\n * block state.\n * This function does not perform lazy evaluation of matches and inserts\n * new strings in the dictionary only for unmatched strings or for short\n * matches. It is used only for the fast compression options.\n */\nfunction deflate_fast(s, flush) {\n  var hash_head;        /* head of the hash chain */\n  var bflush;           /* set if current block must be flushed */\n\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */\n    if (s.lookahead < MIN_LOOKAHEAD) {\n      fill_window(s);\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) {\n        break; /* flush the current block */\n      }\n    }\n\n    /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */\n    hash_head = 0/*NIL*/;\n    if (s.lookahead >= MIN_MATCH) {\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n      s.head[s.ins_h] = s.strstart;\n      /***/\n    }\n\n    /* Find the longest match, discarding those <= prev_length.\n     * At this point we have always match_length < MIN_MATCH\n     */\n    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {\n      /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */\n      s.match_length = longest_match(s, hash_head);\n      /* longest_match() sets match_start */\n    }\n    if (s.match_length >= MIN_MATCH) {\n      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only\n\n      /*** _tr_tally_dist(s, s.strstart - s.match_start,\n                     s.match_length - MIN_MATCH, bflush); ***/\n      bflush = trees._tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);\n\n      s.lookahead -= s.match_length;\n\n      /* Insert new strings in the hash table only if the match length\n       * is not too large. This saves time but degrades compression.\n       */\n      if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {\n        s.match_length--; /* string at strstart already in table */\n        do {\n          s.strstart++;\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n          /* strstart never exceeds WSIZE-MAX_MATCH, so there are\n           * always MIN_MATCH bytes ahead.\n           */\n        } while (--s.match_length !== 0);\n        s.strstart++;\n      } else\n      {\n        s.strstart += s.match_length;\n        s.match_length = 0;\n        s.ins_h = s.window[s.strstart];\n        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */\n        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + 1]) & s.hash_mask;\n\n//#if MIN_MATCH != 3\n//                Call UPDATE_HASH() MIN_MATCH-3 more times\n//#endif\n        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not\n         * matter since it will be recomputed at next deflate call.\n         */\n      }\n    } else {\n      /* No match, output a literal byte */\n      //Tracevv((stderr,\"%c\", s.window[s.strstart]));\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);\n\n      s.lookahead--;\n      s.strstart++;\n    }\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = ((s.strstart < (MIN_MATCH-1)) ? s.strstart : MIN_MATCH-1);\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n}\n\n/* ===========================================================================\n * Same as above, but achieves better compression. We use a lazy\n * evaluation for matches: a match is finally adopted only if there is\n * no better match at the next window position.\n */\nfunction deflate_slow(s, flush) {\n  var hash_head;          /* head of hash chain */\n  var bflush;              /* set if current block must be flushed */\n\n  var max_insert;\n\n  /* Process the input block. */\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */\n    if (s.lookahead < MIN_LOOKAHEAD) {\n      fill_window(s);\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) { break; } /* flush the current block */\n    }\n\n    /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */\n    hash_head = 0/*NIL*/;\n    if (s.lookahead >= MIN_MATCH) {\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n      s.head[s.ins_h] = s.strstart;\n      /***/\n    }\n\n    /* Find the longest match, discarding those <= prev_length.\n     */\n    s.prev_length = s.match_length;\n    s.prev_match = s.match_start;\n    s.match_length = MIN_MATCH-1;\n\n    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&\n        s.strstart - hash_head <= (s.w_size-MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {\n      /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */\n      s.match_length = longest_match(s, hash_head);\n      /* longest_match() sets match_start */\n\n      if (s.match_length <= 5 &&\n         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {\n\n        /* If prev_match is also MIN_MATCH, match_start is garbage\n         * but we will ignore the current match anyway.\n         */\n        s.match_length = MIN_MATCH-1;\n      }\n    }\n    /* If there was a match at the previous step and the current\n     * match is not better, output the previous match:\n     */\n    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {\n      max_insert = s.strstart + s.lookahead - MIN_MATCH;\n      /* Do not insert strings in hash table beyond this. */\n\n      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);\n\n      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,\n                     s.prev_length - MIN_MATCH, bflush);***/\n      bflush = trees._tr_tally(s, s.strstart - 1- s.prev_match, s.prev_length - MIN_MATCH);\n      /* Insert in hash table all strings up to the end of the match.\n       * strstart-1 and strstart are already inserted. If there is not\n       * enough lookahead, the last two strings are not inserted in\n       * the hash table.\n       */\n      s.lookahead -= s.prev_length-1;\n      s.prev_length -= 2;\n      do {\n        if (++s.strstart <= max_insert) {\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n        }\n      } while (--s.prev_length !== 0);\n      s.match_available = 0;\n      s.match_length = MIN_MATCH-1;\n      s.strstart++;\n\n      if (bflush) {\n        /*** FLUSH_BLOCK(s, 0); ***/\n        flush_block_only(s, false);\n        if (s.strm.avail_out === 0) {\n          return BS_NEED_MORE;\n        }\n        /***/\n      }\n\n    } else if (s.match_available) {\n      /* If there was no match at the previous position, output a\n       * single literal. If there was a match but the current match\n       * is longer, truncate the previous match to a single literal.\n       */\n      //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n      bflush = trees._tr_tally(s, 0, s.window[s.strstart-1]);\n\n      if (bflush) {\n        /*** FLUSH_BLOCK_ONLY(s, 0) ***/\n        flush_block_only(s, false);\n        /***/\n      }\n      s.strstart++;\n      s.lookahead--;\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n    } else {\n      /* There is no previous match to compare with, wait for\n       * the next step to decide.\n       */\n      s.match_available = 1;\n      s.strstart++;\n      s.lookahead--;\n    }\n  }\n  //Assert (flush != Z_NO_FLUSH, \"no flush?\");\n  if (s.match_available) {\n    //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n    bflush = trees._tr_tally(s, 0, s.window[s.strstart-1]);\n\n    s.match_available = 0;\n  }\n  s.insert = s.strstart < MIN_MATCH-1 ? s.strstart : MIN_MATCH-1;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n\n  return BS_BLOCK_DONE;\n}\n\n\n/* ===========================================================================\n * For Z_RLE, simply look for runs of bytes, generate matches only of distance\n * one.  Do not maintain a hash table.  (It will be regenerated if this run of\n * deflate switches away from Z_RLE.)\n */\nfunction deflate_rle(s, flush) {\n  var bflush;            /* set if current block must be flushed */\n  var prev;              /* byte at distance one to match */\n  var scan, strend;      /* scan goes up to strend for length of run */\n\n  var _win = s.window;\n\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the longest run, plus one for the unrolled loop.\n     */\n    if (s.lookahead <= MAX_MATCH) {\n      fill_window(s);\n      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) { break; } /* flush the current block */\n    }\n\n    /* See how many times the previous byte repeats */\n    s.match_length = 0;\n    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {\n      scan = s.strstart - 1;\n      prev = _win[scan];\n      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {\n        strend = s.strstart + MAX_MATCH;\n        do {\n          /*jshint noempty:false*/\n        } while (prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 scan < strend);\n        s.match_length = MAX_MATCH - (strend - scan);\n        if (s.match_length > s.lookahead) {\n          s.match_length = s.lookahead;\n        }\n      }\n      //Assert(scan <= s->window+(uInt)(s->window_size-1), \"wild scan\");\n    }\n\n    /* Emit match if have run of MIN_MATCH or longer, else emit literal */\n    if (s.match_length >= MIN_MATCH) {\n      //check_match(s, s.strstart, s.strstart - 1, s.match_length);\n\n      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/\n      bflush = trees._tr_tally(s, 1, s.match_length - MIN_MATCH);\n\n      s.lookahead -= s.match_length;\n      s.strstart += s.match_length;\n      s.match_length = 0;\n    } else {\n      /* No match, output a literal byte */\n      //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);\n\n      s.lookahead--;\n      s.strstart++;\n    }\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = 0;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n}\n\n/* ===========================================================================\n * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.\n * (It will be regenerated if this run of deflate switches away from Huffman.)\n */\nfunction deflate_huff(s, flush) {\n  var bflush;             /* set if current block must be flushed */\n\n  for (;;) {\n    /* Make sure that we have a literal to write. */\n    if (s.lookahead === 0) {\n      fill_window(s);\n      if (s.lookahead === 0) {\n        if (flush === Z_NO_FLUSH) {\n          return BS_NEED_MORE;\n        }\n        break;      /* flush the current block */\n      }\n    }\n\n    /* Output a literal byte */\n    s.match_length = 0;\n    //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n    bflush = trees._tr_tally(s, 0, s.window[s.strstart]);\n    s.lookahead--;\n    s.strstart++;\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = 0;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n}\n\n/* Values for max_lazy_match, good_match and max_chain_length, depending on\n * the desired pack level (0..9). The values given below have been tuned to\n * exclude worst case performance for pathological files. Better values may be\n * found for specific files.\n */\nvar Config = function (good_length, max_lazy, nice_length, max_chain, func) {\n  this.good_length = good_length;\n  this.max_lazy = max_lazy;\n  this.nice_length = nice_length;\n  this.max_chain = max_chain;\n  this.func = func;\n};\n\nvar configuration_table;\n\nconfiguration_table = [\n  /*      good lazy nice chain */\n  new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */\n  new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */\n  new Config(4, 5, 16, 8, deflate_fast),           /* 2 */\n  new Config(4, 6, 32, 32, deflate_fast),          /* 3 */\n\n  new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */\n  new Config(8, 16, 32, 32, deflate_slow),         /* 5 */\n  new Config(8, 16, 128, 128, deflate_slow),       /* 6 */\n  new Config(8, 32, 128, 256, deflate_slow),       /* 7 */\n  new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */\n  new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */\n];\n\n\n/* ===========================================================================\n * Initialize the \"longest match\" routines for a new zlib stream\n */\nfunction lm_init(s) {\n  s.window_size = 2 * s.w_size;\n\n  /*** CLEAR_HASH(s); ***/\n  zero(s.head); // Fill with NIL (= 0);\n\n  /* Set the default configuration parameters:\n   */\n  s.max_lazy_match = configuration_table[s.level].max_lazy;\n  s.good_match = configuration_table[s.level].good_length;\n  s.nice_match = configuration_table[s.level].nice_length;\n  s.max_chain_length = configuration_table[s.level].max_chain;\n\n  s.strstart = 0;\n  s.block_start = 0;\n  s.lookahead = 0;\n  s.insert = 0;\n  s.match_length = s.prev_length = MIN_MATCH - 1;\n  s.match_available = 0;\n  s.ins_h = 0;\n}\n\n\nfunction DeflateState() {\n  this.strm = null;            /* pointer back to this zlib stream */\n  this.status = 0;            /* as the name implies */\n  this.pending_buf = null;      /* output still pending */\n  this.pending_buf_size = 0;  /* size of pending_buf */\n  this.pending_out = 0;       /* next pending byte to output to the stream */\n  this.pending = 0;           /* nb of bytes in the pending buffer */\n  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */\n  this.gzhead = null;         /* gzip header information to write */\n  this.gzindex = 0;           /* where in extra, name, or comment */\n  this.method = Z_DEFLATED; /* can only be DEFLATED */\n  this.last_flush = -1;   /* value of flush param for previous deflate call */\n\n  this.w_size = 0;  /* LZ77 window size (32K by default) */\n  this.w_bits = 0;  /* log2(w_size)  (8..16) */\n  this.w_mask = 0;  /* w_size - 1 */\n\n  this.window = null;\n  /* Sliding window. Input bytes are read into the second half of the window,\n   * and move to the first half later to keep a dictionary of at least wSize\n   * bytes. With this organization, matches are limited to a distance of\n   * wSize-MAX_MATCH bytes, but this ensures that IO is always\n   * performed with a length multiple of the block size.\n   */\n\n  this.window_size = 0;\n  /* Actual size of window: 2*wSize, except when the user input buffer\n   * is directly used as sliding window.\n   */\n\n  this.prev = null;\n  /* Link to older string with same hash index. To limit the size of this\n   * array to 64K, this link is maintained only for the last 32K strings.\n   * An index in this array is thus a window index modulo 32K.\n   */\n\n  this.head = null;   /* Heads of the hash chains or NIL. */\n\n  this.ins_h = 0;       /* hash index of string to be inserted */\n  this.hash_size = 0;   /* number of elements in hash table */\n  this.hash_bits = 0;   /* log2(hash_size) */\n  this.hash_mask = 0;   /* hash_size-1 */\n\n  this.hash_shift = 0;\n  /* Number of bits by which ins_h must be shifted at each input\n   * step. It must be such that after MIN_MATCH steps, the oldest\n   * byte no longer takes part in the hash key, that is:\n   *   hash_shift * MIN_MATCH >= hash_bits\n   */\n\n  this.block_start = 0;\n  /* Window position at the beginning of the current output block. Gets\n   * negative when the window is moved backwards.\n   */\n\n  this.match_length = 0;      /* length of best match */\n  this.prev_match = 0;        /* previous match */\n  this.match_available = 0;   /* set if previous match exists */\n  this.strstart = 0;          /* start of string to insert */\n  this.match_start = 0;       /* start of matching string */\n  this.lookahead = 0;         /* number of valid bytes ahead in window */\n\n  this.prev_length = 0;\n  /* Length of the best match at previous step. Matches not greater than this\n   * are discarded. This is used in the lazy match evaluation.\n   */\n\n  this.max_chain_length = 0;\n  /* To speed up deflation, hash chains are never searched beyond this\n   * length.  A higher limit improves compression ratio but degrades the\n   * speed.\n   */\n\n  this.max_lazy_match = 0;\n  /* Attempt to find a better match only when the current match is strictly\n   * smaller than this value. This mechanism is used only for compression\n   * levels >= 4.\n   */\n  // That's alias to max_lazy_match, don't use directly\n  //this.max_insert_length = 0;\n  /* Insert new strings in the hash table only if the match length is not\n   * greater than this length. This saves time but degrades compression.\n   * max_insert_length is used only for compression levels <= 3.\n   */\n\n  this.level = 0;     /* compression level (1..9) */\n  this.strategy = 0;  /* favor or force Huffman coding*/\n\n  this.good_match = 0;\n  /* Use a faster search when the previous match is longer than this */\n\n  this.nice_match = 0; /* Stop searching when current match exceeds this */\n\n              /* used by trees.c: */\n\n  /* Didn't use ct_data typedef below to suppress compiler warning */\n\n  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */\n  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */\n  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */\n\n  // Use flat array of DOUBLE size, with interleaved fata,\n  // because JS does not support effective\n  this.dyn_ltree  = new utils.Buf16(HEAP_SIZE * 2);\n  this.dyn_dtree  = new utils.Buf16((2*D_CODES+1) * 2);\n  this.bl_tree    = new utils.Buf16((2*BL_CODES+1) * 2);\n  zero(this.dyn_ltree);\n  zero(this.dyn_dtree);\n  zero(this.bl_tree);\n\n  this.l_desc   = null;         /* desc. for literal tree */\n  this.d_desc   = null;         /* desc. for distance tree */\n  this.bl_desc  = null;         /* desc. for bit length tree */\n\n  //ush bl_count[MAX_BITS+1];\n  this.bl_count = new utils.Buf16(MAX_BITS+1);\n  /* number of codes at each bit length for an optimal tree */\n\n  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */\n  this.heap = new utils.Buf16(2*L_CODES+1);  /* heap used to build the Huffman trees */\n  zero(this.heap);\n\n  this.heap_len = 0;               /* number of elements in the heap */\n  this.heap_max = 0;               /* element of largest frequency */\n  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.\n   * The same heap array is used to build all trees.\n   */\n\n  this.depth = new utils.Buf16(2*L_CODES+1); //uch depth[2*L_CODES+1];\n  zero(this.depth);\n  /* Depth of each subtree used as tie breaker for trees of equal frequency\n   */\n\n  this.l_buf = 0;          /* buffer index for literals or lengths */\n\n  this.lit_bufsize = 0;\n  /* Size of match buffer for literals/lengths.  There are 4 reasons for\n   * limiting lit_bufsize to 64K:\n   *   - frequencies can be kept in 16 bit counters\n   *   - if compression is not successful for the first block, all input\n   *     data is still in the window so we can still emit a stored block even\n   *     when input comes from standard input.  (This can also be done for\n   *     all blocks if lit_bufsize is not greater than 32K.)\n   *   - if compression is not successful for a file smaller than 64K, we can\n   *     even emit a stored file instead of a stored block (saving 5 bytes).\n   *     This is applicable only for zip (not gzip or zlib).\n   *   - creating new Huffman trees less frequently may not provide fast\n   *     adaptation to changes in the input data statistics. (Take for\n   *     example a binary file with poorly compressible code followed by\n   *     a highly compressible string table.) Smaller buffer sizes give\n   *     fast adaptation but have of course the overhead of transmitting\n   *     trees more frequently.\n   *   - I can't count above 4\n   */\n\n  this.last_lit = 0;      /* running index in l_buf */\n\n  this.d_buf = 0;\n  /* Buffer index for distances. To simplify the code, d_buf and l_buf have\n   * the same number of elements. To use different lengths, an extra flag\n   * array would be necessary.\n   */\n\n  this.opt_len = 0;       /* bit length of current block with optimal trees */\n  this.static_len = 0;    /* bit length of current block with static trees */\n  this.matches = 0;       /* number of string matches in current block */\n  this.insert = 0;        /* bytes at end of window left to insert */\n\n\n  this.bi_buf = 0;\n  /* Output buffer. bits are inserted starting at the bottom (least\n   * significant bits).\n   */\n  this.bi_valid = 0;\n  /* Number of valid bits in bi_buf.  All bits above the last valid bit\n   * are always zero.\n   */\n\n  // Used for window memory init. We safely ignore it for JS. That makes\n  // sense only for pointers and memory check tools.\n  //this.high_water = 0;\n  /* High water mark offset in window for initialized bytes -- bytes above\n   * this are set to zero in order to avoid memory check warnings when\n   * longest match routines access bytes past the input.  This is then\n   * updated to the new high water mark.\n   */\n}\n\n\nfunction deflateResetKeep(strm) {\n  var s;\n\n  if (!strm || !strm.state) {\n    return err(strm, Z_STREAM_ERROR);\n  }\n\n  strm.total_in = strm.total_out = 0;\n  strm.data_type = Z_UNKNOWN;\n\n  s = strm.state;\n  s.pending = 0;\n  s.pending_out = 0;\n\n  if (s.wrap < 0) {\n    s.wrap = -s.wrap;\n    /* was made negative by deflate(..., Z_FINISH); */\n  }\n  s.status = (s.wrap ? INIT_STATE : BUSY_STATE);\n  strm.adler = (s.wrap === 2) ?\n    0  // crc32(0, Z_NULL, 0)\n  :\n    1; // adler32(0, Z_NULL, 0)\n  s.last_flush = Z_NO_FLUSH;\n  trees._tr_init(s);\n  return Z_OK;\n}\n\n\nfunction deflateReset(strm) {\n  var ret = deflateResetKeep(strm);\n  if (ret === Z_OK) {\n    lm_init(strm.state);\n  }\n  return ret;\n}\n\n\nfunction deflateSetHeader(strm, head) {\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  if (strm.state.wrap !== 2) { return Z_STREAM_ERROR; }\n  strm.state.gzhead = head;\n  return Z_OK;\n}\n\n\nfunction deflateInit2(strm, level, method, windowBits, memLevel, strategy) {\n  if (!strm) { // === Z_NULL\n    return Z_STREAM_ERROR;\n  }\n  var wrap = 1;\n\n  if (level === Z_DEFAULT_COMPRESSION) {\n    level = 6;\n  }\n\n  if (windowBits < 0) { /* suppress zlib wrapper */\n    wrap = 0;\n    windowBits = -windowBits;\n  }\n\n  else if (windowBits > 15) {\n    wrap = 2;           /* write gzip wrapper instead */\n    windowBits -= 16;\n  }\n\n\n  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED ||\n    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||\n    strategy < 0 || strategy > Z_FIXED) {\n    return err(strm, Z_STREAM_ERROR);\n  }\n\n\n  if (windowBits === 8) {\n    windowBits = 9;\n  }\n  /* until 256-byte window bug fixed */\n\n  var s = new DeflateState();\n\n  strm.state = s;\n  s.strm = strm;\n\n  s.wrap = wrap;\n  s.gzhead = null;\n  s.w_bits = windowBits;\n  s.w_size = 1 << s.w_bits;\n  s.w_mask = s.w_size - 1;\n\n  s.hash_bits = memLevel + 7;\n  s.hash_size = 1 << s.hash_bits;\n  s.hash_mask = s.hash_size - 1;\n  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);\n\n  s.window = new utils.Buf8(s.w_size * 2);\n  s.head = new utils.Buf16(s.hash_size);\n  s.prev = new utils.Buf16(s.w_size);\n\n  // Don't need mem init magic for JS.\n  //s.high_water = 0;  /* nothing written to s->window yet */\n\n  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */\n\n  s.pending_buf_size = s.lit_bufsize * 4;\n  s.pending_buf = new utils.Buf8(s.pending_buf_size);\n\n  s.d_buf = s.lit_bufsize >> 1;\n  s.l_buf = (1 + 2) * s.lit_bufsize;\n\n  s.level = level;\n  s.strategy = strategy;\n  s.method = method;\n\n  return deflateReset(strm);\n}\n\nfunction deflateInit(strm, level) {\n  return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);\n}\n\n\nfunction deflate(strm, flush) {\n  var old_flush, s;\n  var beg, val; // for gzip header write only\n\n  if (!strm || !strm.state ||\n    flush > Z_BLOCK || flush < 0) {\n    return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;\n  }\n\n  s = strm.state;\n\n  if (!strm.output ||\n      (!strm.input && strm.avail_in !== 0) ||\n      (s.status === FINISH_STATE && flush !== Z_FINISH)) {\n    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR : Z_STREAM_ERROR);\n  }\n\n  s.strm = strm; /* just in case */\n  old_flush = s.last_flush;\n  s.last_flush = flush;\n\n  /* Write the header */\n  if (s.status === INIT_STATE) {\n\n    if (s.wrap === 2) { // GZIP header\n      strm.adler = 0;  //crc32(0L, Z_NULL, 0);\n      put_byte(s, 31);\n      put_byte(s, 139);\n      put_byte(s, 8);\n      if (!s.gzhead) { // s->gzhead == Z_NULL\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, s.level === 9 ? 2 :\n                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                     4 : 0));\n        put_byte(s, OS_CODE);\n        s.status = BUSY_STATE;\n      }\n      else {\n        put_byte(s, (s.gzhead.text ? 1 : 0) +\n                    (s.gzhead.hcrc ? 2 : 0) +\n                    (!s.gzhead.extra ? 0 : 4) +\n                    (!s.gzhead.name ? 0 : 8) +\n                    (!s.gzhead.comment ? 0 : 16)\n                );\n        put_byte(s, s.gzhead.time & 0xff);\n        put_byte(s, (s.gzhead.time >> 8) & 0xff);\n        put_byte(s, (s.gzhead.time >> 16) & 0xff);\n        put_byte(s, (s.gzhead.time >> 24) & 0xff);\n        put_byte(s, s.level === 9 ? 2 :\n                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                     4 : 0));\n        put_byte(s, s.gzhead.os & 0xff);\n        if (s.gzhead.extra && s.gzhead.extra.length) {\n          put_byte(s, s.gzhead.extra.length & 0xff);\n          put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);\n        }\n        if (s.gzhead.hcrc) {\n          strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);\n        }\n        s.gzindex = 0;\n        s.status = EXTRA_STATE;\n      }\n    }\n    else // DEFLATE header\n    {\n      var header = (Z_DEFLATED + ((s.w_bits - 8) << 4)) << 8;\n      var level_flags = -1;\n\n      if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {\n        level_flags = 0;\n      } else if (s.level < 6) {\n        level_flags = 1;\n      } else if (s.level === 6) {\n        level_flags = 2;\n      } else {\n        level_flags = 3;\n      }\n      header |= (level_flags << 6);\n      if (s.strstart !== 0) { header |= PRESET_DICT; }\n      header += 31 - (header % 31);\n\n      s.status = BUSY_STATE;\n      putShortMSB(s, header);\n\n      /* Save the adler32 of the preset dictionary: */\n      if (s.strstart !== 0) {\n        putShortMSB(s, strm.adler >>> 16);\n        putShortMSB(s, strm.adler & 0xffff);\n      }\n      strm.adler = 1; // adler32(0L, Z_NULL, 0);\n    }\n  }\n\n//#ifdef GZIP\n  if (s.status === EXTRA_STATE) {\n    if (s.gzhead.extra/* != Z_NULL*/) {\n      beg = s.pending;  /* start of bytes to update crc */\n\n      while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {\n        if (s.pending === s.pending_buf_size) {\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          flush_pending(strm);\n          beg = s.pending;\n          if (s.pending === s.pending_buf_size) {\n            break;\n          }\n        }\n        put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);\n        s.gzindex++;\n      }\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      if (s.gzindex === s.gzhead.extra.length) {\n        s.gzindex = 0;\n        s.status = NAME_STATE;\n      }\n    }\n    else {\n      s.status = NAME_STATE;\n    }\n  }\n  if (s.status === NAME_STATE) {\n    if (s.gzhead.name/* != Z_NULL*/) {\n      beg = s.pending;  /* start of bytes to update crc */\n      //int val;\n\n      do {\n        if (s.pending === s.pending_buf_size) {\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          flush_pending(strm);\n          beg = s.pending;\n          if (s.pending === s.pending_buf_size) {\n            val = 1;\n            break;\n          }\n        }\n        // JS specific: little magic to add zero terminator to end of string\n        if (s.gzindex < s.gzhead.name.length) {\n          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;\n        } else {\n          val = 0;\n        }\n        put_byte(s, val);\n      } while (val !== 0);\n\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      if (val === 0) {\n        s.gzindex = 0;\n        s.status = COMMENT_STATE;\n      }\n    }\n    else {\n      s.status = COMMENT_STATE;\n    }\n  }\n  if (s.status === COMMENT_STATE) {\n    if (s.gzhead.comment/* != Z_NULL*/) {\n      beg = s.pending;  /* start of bytes to update crc */\n      //int val;\n\n      do {\n        if (s.pending === s.pending_buf_size) {\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          flush_pending(strm);\n          beg = s.pending;\n          if (s.pending === s.pending_buf_size) {\n            val = 1;\n            break;\n          }\n        }\n        // JS specific: little magic to add zero terminator to end of string\n        if (s.gzindex < s.gzhead.comment.length) {\n          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;\n        } else {\n          val = 0;\n        }\n        put_byte(s, val);\n      } while (val !== 0);\n\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      if (val === 0) {\n        s.status = HCRC_STATE;\n      }\n    }\n    else {\n      s.status = HCRC_STATE;\n    }\n  }\n  if (s.status === HCRC_STATE) {\n    if (s.gzhead.hcrc) {\n      if (s.pending + 2 > s.pending_buf_size) {\n        flush_pending(strm);\n      }\n      if (s.pending + 2 <= s.pending_buf_size) {\n        put_byte(s, strm.adler & 0xff);\n        put_byte(s, (strm.adler >> 8) & 0xff);\n        strm.adler = 0; //crc32(0L, Z_NULL, 0);\n        s.status = BUSY_STATE;\n      }\n    }\n    else {\n      s.status = BUSY_STATE;\n    }\n  }\n//#endif\n\n  /* Flush as much pending output as possible */\n  if (s.pending !== 0) {\n    flush_pending(strm);\n    if (strm.avail_out === 0) {\n      /* Since avail_out is 0, deflate will be called again with\n       * more output space, but possibly with both pending and\n       * avail_in equal to zero. There won't be anything to do,\n       * but this is not an error situation so make sure we\n       * return OK instead of BUF_ERROR at next call of deflate:\n       */\n      s.last_flush = -1;\n      return Z_OK;\n    }\n\n    /* Make sure there is something to do and avoid duplicate consecutive\n     * flushes. For repeated and useless calls with Z_FINISH, we keep\n     * returning Z_STREAM_END instead of Z_BUF_ERROR.\n     */\n  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&\n    flush !== Z_FINISH) {\n    return err(strm, Z_BUF_ERROR);\n  }\n\n  /* User must not provide more input after the first FINISH: */\n  if (s.status === FINISH_STATE && strm.avail_in !== 0) {\n    return err(strm, Z_BUF_ERROR);\n  }\n\n  /* Start a new block or continue the current one.\n   */\n  if (strm.avail_in !== 0 || s.lookahead !== 0 ||\n    (flush !== Z_NO_FLUSH && s.status !== FINISH_STATE)) {\n    var bstate = (s.strategy === Z_HUFFMAN_ONLY) ? deflate_huff(s, flush) :\n      (s.strategy === Z_RLE ? deflate_rle(s, flush) :\n        configuration_table[s.level].func(s, flush));\n\n    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {\n      s.status = FINISH_STATE;\n    }\n    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {\n      if (strm.avail_out === 0) {\n        s.last_flush = -1;\n        /* avoid BUF_ERROR next call, see above */\n      }\n      return Z_OK;\n      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call\n       * of deflate should use the same flush parameter to make sure\n       * that the flush is complete. So we don't have to output an\n       * empty block here, this will be done at next call. This also\n       * ensures that for a very small output buffer, we emit at most\n       * one empty block.\n       */\n    }\n    if (bstate === BS_BLOCK_DONE) {\n      if (flush === Z_PARTIAL_FLUSH) {\n        trees._tr_align(s);\n      }\n      else if (flush !== Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */\n\n        trees._tr_stored_block(s, 0, 0, false);\n        /* For a full flush, this empty block will be recognized\n         * as a special marker by inflate_sync().\n         */\n        if (flush === Z_FULL_FLUSH) {\n          /*** CLEAR_HASH(s); ***/             /* forget history */\n          zero(s.head); // Fill with NIL (= 0);\n\n          if (s.lookahead === 0) {\n            s.strstart = 0;\n            s.block_start = 0;\n            s.insert = 0;\n          }\n        }\n      }\n      flush_pending(strm);\n      if (strm.avail_out === 0) {\n        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */\n        return Z_OK;\n      }\n    }\n  }\n  //Assert(strm->avail_out > 0, \"bug2\");\n  //if (strm.avail_out <= 0) { throw new Error(\"bug2\");}\n\n  if (flush !== Z_FINISH) { return Z_OK; }\n  if (s.wrap <= 0) { return Z_STREAM_END; }\n\n  /* Write the trailer */\n  if (s.wrap === 2) {\n    put_byte(s, strm.adler & 0xff);\n    put_byte(s, (strm.adler >> 8) & 0xff);\n    put_byte(s, (strm.adler >> 16) & 0xff);\n    put_byte(s, (strm.adler >> 24) & 0xff);\n    put_byte(s, strm.total_in & 0xff);\n    put_byte(s, (strm.total_in >> 8) & 0xff);\n    put_byte(s, (strm.total_in >> 16) & 0xff);\n    put_byte(s, (strm.total_in >> 24) & 0xff);\n  }\n  else\n  {\n    putShortMSB(s, strm.adler >>> 16);\n    putShortMSB(s, strm.adler & 0xffff);\n  }\n\n  flush_pending(strm);\n  /* If avail_out is zero, the application will call deflate again\n   * to flush the rest.\n   */\n  if (s.wrap > 0) { s.wrap = -s.wrap; }\n  /* write the trailer only once! */\n  return s.pending !== 0 ? Z_OK : Z_STREAM_END;\n}\n\nfunction deflateEnd(strm) {\n  var status;\n\n  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {\n    return Z_STREAM_ERROR;\n  }\n\n  status = strm.state.status;\n  if (status !== INIT_STATE &&\n    status !== EXTRA_STATE &&\n    status !== NAME_STATE &&\n    status !== COMMENT_STATE &&\n    status !== HCRC_STATE &&\n    status !== BUSY_STATE &&\n    status !== FINISH_STATE\n  ) {\n    return err(strm, Z_STREAM_ERROR);\n  }\n\n  strm.state = null;\n\n  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;\n}\n\n/* =========================================================================\n * Copy the source state to the destination state\n */\n//function deflateCopy(dest, source) {\n//\n//}\n\nexports.deflateInit = deflateInit;\nexports.deflateInit2 = deflateInit2;\nexports.deflateReset = deflateReset;\nexports.deflateResetKeep = deflateResetKeep;\nexports.deflateSetHeader = deflateSetHeader;\nexports.deflate = deflate;\nexports.deflateEnd = deflateEnd;\nexports.deflateInfo = 'pako deflate (from Nodeca project)';\n\n/* Not implemented\nexports.deflateBound = deflateBound;\nexports.deflateCopy = deflateCopy;\nexports.deflateSetDictionary = deflateSetDictionary;\nexports.deflateParams = deflateParams;\nexports.deflatePending = deflatePending;\nexports.deflatePrime = deflatePrime;\nexports.deflateTune = deflateTune;\n*/\n"]}