{"version":3,"sources":["strings.js"],"names":[],"mappings":"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","file":"strings-compiled.js","sourcesContent":["// String encode/decode helpers\n'use strict';\n\n\nvar utils = require('./common');\n\n\n// Quick check if we can use fast array to bin string conversion\n//\n// - apply(Array) can fail on Android 2.2\n// - apply(Uint8Array) can fail on iOS 5.1 Safary\n//\nvar STR_APPLY_OK = true;\nvar STR_APPLY_UIA_OK = true;\n\ntry { String.fromCharCode.apply(null, [0]); } catch(__) { STR_APPLY_OK = false; }\ntry { String.fromCharCode.apply(null, new Uint8Array(1)); } catch(__) { STR_APPLY_UIA_OK = false; }\n\n\n// Table with utf8 lengths (calculated by first byte of sequence)\n// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,\n// because max possible codepoint is 0x10ffff\nvar _utf8len = new utils.Buf8(256);\nfor (var q=0; q<256; q++) {\n  _utf8len[q] = (q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1);\n}\n_utf8len[254]=_utf8len[254]=1; // Invalid sequence start\n\n\n// convert string to array (typed, when possible)\nexports.string2buf = function (str) {\n  var buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;\n\n  // count binary size\n  for (m_pos = 0; m_pos < str_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos+1 < str_len)) {\n      c2 = str.charCodeAt(m_pos+1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;\n  }\n\n  // allocate buffer\n  buf = new utils.Buf8(buf_len);\n\n  // convert\n  for (i=0, m_pos = 0; i < buf_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos+1 < str_len)) {\n      c2 = str.charCodeAt(m_pos+1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    if (c < 0x80) {\n      /* one byte */\n      buf[i++] = c;\n    } else if (c < 0x800) {\n      /* two bytes */\n      buf[i++] = 0xC0 | (c >>> 6);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else if (c < 0x10000) {\n      /* three bytes */\n      buf[i++] = 0xE0 | (c >>> 12);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else {\n      /* four bytes */\n      buf[i++] = 0xf0 | (c >>> 18);\n      buf[i++] = 0x80 | (c >>> 12 & 0x3f);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    }\n  }\n\n  return buf;\n};\n\n// Helper (used in 2 places)\nfunction buf2binstring(buf, len) {\n  // use fallback for big arrays to avoid stack overflow\n  if (len < 65537) {\n    if ((buf.subarray && STR_APPLY_UIA_OK) || (!buf.subarray && STR_APPLY_OK)) {\n      return String.fromCharCode.apply(null, utils.shrinkBuf(buf, len));\n    }\n  }\n\n  var result = '';\n  for (var i=0; i < len; i++) {\n    result += String.fromCharCode(buf[i]);\n  }\n  return result;\n}\n\n\n// Convert byte array to binary string\nexports.buf2binstring = function(buf) {\n  return buf2binstring(buf, buf.length);\n};\n\n\n// Convert binary string (typed, when possible)\nexports.binstring2buf = function(str) {\n  var buf = new utils.Buf8(str.length);\n  for (var i=0, len=buf.length; i < len; i++) {\n    buf[i] = str.charCodeAt(i);\n  }\n  return buf;\n};\n\n\n// convert array to string\nexports.buf2string = function (buf, max) {\n  var i, out, c, c_len;\n  var len = max || buf.length;\n\n  // Reserve max possible length (2 words per char)\n  // NB: by unknown reasons, Array is significantly faster for\n  //     String.fromCharCode.apply than Uint16Array.\n  var utf16buf = new Array(len*2);\n\n  for (out=0, i=0; i<len;) {\n    c = buf[i++];\n    // quick process ascii\n    if (c < 0x80) { utf16buf[out++] = c; continue; }\n\n    c_len = _utf8len[c];\n    // skip 5 & 6 byte codes\n    if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len-1; continue; }\n\n    // apply mask on first byte\n    c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;\n    // join the rest\n    while (c_len > 1 && i < len) {\n      c = (c << 6) | (buf[i++] & 0x3f);\n      c_len--;\n    }\n\n    // terminated by end of string?\n    if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }\n\n    if (c < 0x10000) {\n      utf16buf[out++] = c;\n    } else {\n      c -= 0x10000;\n      utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);\n      utf16buf[out++] = 0xdc00 | (c & 0x3ff);\n    }\n  }\n\n  return buf2binstring(utf16buf, out);\n};\n\n\n// Calculate max possible position in utf8 buffer,\n// that will not break sequence. If that's not possible\n// - (very small limits) return max size as is.\n//\n// buf[] - utf8 bytes array\n// max   - length limit (mandatory);\nexports.utf8border = function(buf, max) {\n  var pos;\n\n  max = max || buf.length;\n  if (max > buf.length) { max = buf.length; }\n\n  // go back from last position, until start of sequence found\n  pos = max-1;\n  while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }\n\n  // Fuckup - very small and broken sequence,\n  // return max, because we should return something anyway.\n  if (pos < 0) { return max; }\n\n  // If we came to start of buffer - that means vuffer is too small,\n  // return max too.\n  if (pos === 0) { return max; }\n\n  return (pos + _utf8len[buf[pos]] > max) ? pos : max;\n};\n"]}