{"version":3,"sources":["deflate.js"],"names":[],"mappings":"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","file":"deflate-compiled.js","sourcesContent":["'use strict';\n\n\nvar zlib_deflate = require('./zlib/deflate.js');\nvar utils = require('./utils/common');\nvar strings = require('./utils/strings');\nvar msg = require('./zlib/messages');\nvar zstream = require('./zlib/zstream');\n\nvar toString = Object.prototype.toString;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nvar Z_NO_FLUSH      = 0;\nvar Z_FINISH        = 4;\n\nvar Z_OK            = 0;\nvar Z_STREAM_END    = 1;\nvar Z_SYNC_FLUSH    = 2;\n\nvar Z_DEFAULT_COMPRESSION = -1;\n\nvar Z_DEFAULT_STRATEGY    = 0;\n\nvar Z_DEFLATED  = 8;\n\n/* ===========================================================================*/\n\n\n/**\n * class Deflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[deflate]],\n * [[deflateRaw]] and [[gzip]].\n **/\n\n/* internal\n * Deflate.chunks -> Array\n *\n * Chunks of output data, if [[Deflate#onData]] not overriden.\n **/\n\n/**\n * Deflate.result -> Uint8Array|Array\n *\n * Compressed result, generated by default [[Deflate#onData]]\n * and [[Deflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Deflate#push]] with `Z_FINISH` / `true` param)  or if you\n * push a chunk with explicit flush (call [[Deflate#push]] with\n * `Z_SYNC_FLUSH` param).\n **/\n\n/**\n * Deflate.err -> Number\n *\n * Error code after deflate finished. 0 (Z_OK) on success.\n * You will not need it in real life, because deflate errors\n * are possible only on wrong options or bad `onData` / `onEnd`\n * custom handlers.\n **/\n\n/**\n * Deflate.msg -> String\n *\n * Error message, if [[Deflate.err]] != 0\n **/\n\n\n/**\n * new Deflate(options)\n * - options (Object): zlib deflate options.\n *\n * Creates new deflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `level`\n * - `windowBits`\n * - `memLevel`\n * - `strategy`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw deflate\n * - `gzip` (Boolean) - create gzip wrapper\n * - `to` (String) - if equal to 'string', then result will be \"binary string\"\n *    (each char code [0..255])\n * - `header` (Object) - custom header for gzip\n *   - `text` (Boolean) - true if compressed data believed to be text\n *   - `time` (Number) - modification time, unix timestamp\n *   - `os` (Number) - operation system code\n *   - `extra` (Array) - array of bytes with extra data (max 65536)\n *   - `name` (String) - file name (binary string)\n *   - `comment` (String) - comment (binary string)\n *   - `hcrc` (Boolean) - true if header crc should be added\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])\n *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * var deflate = new pako.Deflate({ level: 3});\n *\n * deflate.push(chunk1, false);\n * deflate.push(chunk2, true);  // true -> last chunk\n *\n * if (deflate.err) { throw new Error(deflate.err); }\n *\n * console.log(deflate.result);\n * ```\n **/\nvar Deflate = function(options) {\n\n  this.options = utils.assign({\n    level: Z_DEFAULT_COMPRESSION,\n    method: Z_DEFLATED,\n    chunkSize: 16384,\n    windowBits: 15,\n    memLevel: 8,\n    strategy: Z_DEFAULT_STRATEGY,\n    to: ''\n  }, options || {});\n\n  var opt = this.options;\n\n  if (opt.raw && (opt.windowBits > 0)) {\n    opt.windowBits = -opt.windowBits;\n  }\n\n  else if (opt.gzip && (opt.windowBits > 0) && (opt.windowBits < 16)) {\n    opt.windowBits += 16;\n  }\n\n  this.err    = 0;      // error code, if happens (0 = Z_OK)\n  this.msg    = '';     // error message\n  this.ended  = false;  // used to avoid multiple onEnd() calls\n  this.chunks = [];     // chunks of compressed data\n\n  this.strm = new zstream();\n  this.strm.avail_out = 0;\n\n  var status = zlib_deflate.deflateInit2(\n    this.strm,\n    opt.level,\n    opt.method,\n    opt.windowBits,\n    opt.memLevel,\n    opt.strategy\n  );\n\n  if (status !== Z_OK) {\n    throw new Error(msg[status]);\n  }\n\n  if (opt.header) {\n    zlib_deflate.deflateSetHeader(this.strm, opt.header);\n  }\n};\n\n/**\n * Deflate#push(data[, mode]) -> Boolean\n * - data (Uint8Array|Array|ArrayBuffer|String): input data. Strings will be\n *   converted to utf8 byte sequence.\n * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.\n *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` meansh Z_FINISH.\n *\n * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with\n * new compressed chunks. Returns `true` on success. The last data block must have\n * mode Z_FINISH (or `true`). That will flush internal pending buffers and call\n * [[Deflate#onEnd]]. For interim explicit flushes (without ending the stream) you\n * can use mode Z_SYNC_FLUSH, keeping the compression context.\n *\n * On fail call [[Deflate#onEnd]] with error code and return false.\n *\n * We strongly recommend to use `Uint8Array` on input for best speed (output\n * array format is detected automatically). Also, don't skip last param and always\n * use the same type in your code (boolean or number). That will improve JS speed.\n *\n * For regular `Array`-s make sure all elements are [0..255].\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\nDeflate.prototype.push = function(data, mode) {\n  var strm = this.strm;\n  var chunkSize = this.options.chunkSize;\n  var status, _mode;\n\n  if (this.ended) { return false; }\n\n  _mode = (mode === ~~mode) ? mode : ((mode === true) ? Z_FINISH : Z_NO_FLUSH);\n\n  // Convert data if needed\n  if (typeof data === 'string') {\n    // If we need to compress text, change encoding to utf8.\n    strm.input = strings.string2buf(data);\n  } else if (toString.call(data) === '[object ArrayBuffer]') {\n    strm.input = new Uint8Array(data);\n  } else {\n    strm.input = data;\n  }\n\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n\n  do {\n    if (strm.avail_out === 0) {\n      strm.output = new utils.Buf8(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n    status = zlib_deflate.deflate(strm, _mode);    /* no bad return value */\n\n    if (status !== Z_STREAM_END && status !== Z_OK) {\n      this.onEnd(status);\n      this.ended = true;\n      return false;\n    }\n    if (strm.avail_out === 0 || (strm.avail_in === 0 && (_mode === Z_FINISH || _mode === Z_SYNC_FLUSH))) {\n      if (this.options.to === 'string') {\n        this.onData(strings.buf2binstring(utils.shrinkBuf(strm.output, strm.next_out)));\n      } else {\n        this.onData(utils.shrinkBuf(strm.output, strm.next_out));\n      }\n    }\n  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== Z_STREAM_END);\n\n  // Finalize on the last chunk.\n  if (_mode === Z_FINISH) {\n    status = zlib_deflate.deflateEnd(this.strm);\n    this.onEnd(status);\n    this.ended = true;\n    return status === Z_OK;\n  }\n\n  // callback interim results if Z_SYNC_FLUSH.\n  if (_mode === Z_SYNC_FLUSH) {\n    this.onEnd(Z_OK);\n    strm.avail_out = 0;\n    return true;\n  }\n\n  return true;\n};\n\n\n/**\n * Deflate#onData(chunk) -> Void\n * - chunk (Uint8Array|Array|String): ouput data. Type of array depends\n *   on js engine support. When string output requested, each chunk\n *   will be string.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\nDeflate.prototype.onData = function(chunk) {\n  this.chunks.push(chunk);\n};\n\n\n/**\n * Deflate#onEnd(status) -> Void\n * - status (Number): deflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called once after you tell deflate that the input stream is\n * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)\n * or if an error happened. By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\nDeflate.prototype.onEnd = function(status) {\n  // On success - join\n  if (status === Z_OK) {\n    if (this.options.to === 'string') {\n      this.result = this.chunks.join('');\n    } else {\n      this.result = utils.flattenChunks(this.chunks);\n    }\n  }\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n\n\n/**\n * deflate(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * Compress `data` with deflate alrorythm and `options`.\n *\n * Supported options are:\n *\n * - level\n * - windowBits\n * - memLevel\n * - strategy\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n * - `to` (String) - if equal to 'string', then result will be \"binary string\"\n *    (each char code [0..255])\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , data = Uint8Array([1,2,3,4,5,6,7,8,9]);\n *\n * console.log(pako.deflate(data));\n * ```\n **/\nfunction deflate(input, options) {\n  var deflator = new Deflate(options);\n\n  deflator.push(input, true);\n\n  // That will never happens, if you don't cheat with options :)\n  if (deflator.err) { throw deflator.msg; }\n\n  return deflator.result;\n}\n\n\n/**\n * deflateRaw(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\nfunction deflateRaw(input, options) {\n  options = options || {};\n  options.raw = true;\n  return deflate(input, options);\n}\n\n\n/**\n * gzip(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but create gzip wrapper instead of\n * deflate one.\n **/\nfunction gzip(input, options) {\n  options = options || {};\n  options.gzip = true;\n  return deflate(input, options);\n}\n\n\nexports.Deflate = Deflate;\nexports.deflate = deflate;\nexports.deflateRaw = deflateRaw;\nexports.gzip = gzip;\n"]}