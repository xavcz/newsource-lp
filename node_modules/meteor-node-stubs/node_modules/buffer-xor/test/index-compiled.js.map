{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;AAEA,IAAI,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAA;AAC9B,IAAI,GAAG,GAAG,OAAO,CAAC,KAAK,CAAC,CAAA;AACxB,IAAI,UAAU,GAAG,OAAO,CAAC,YAAY,CAAC,CAAA;AACtC,IAAI,QAAQ,GAAG,OAAO,CAAC,YAAY,CAAC,CAAA;;AAEpC,QAAQ,CAAC,KAAK,EAAE,YAAY;AAC1B,UAAQ,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE;AAC5B,MAAE,CAAC,UAAU,GAAG,CAAC,CAAC,QAAQ,GAAG,OAAO,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,EAAE,YAAY;AAClE,UAAI,CAAC,GAAG,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAA;AAC9B,UAAI,CAAC,GAAG,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAA;AAC9B,UAAI,MAAM,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;;AAEtB,YAAM,CAAC,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAA;;;AAGhD,YAAM,CAAC,KAAK,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAA;AACpC,YAAM,CAAC,KAAK,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAA;KACrC,CAAC,CAAA;GACH,CAAC,CAAA;CACH,CAAC,CAAA;;AAEF,QAAQ,CAAC,aAAa,EAAE,YAAY;AAClC,UAAQ,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE;AAC5B,MAAE,CAAC,UAAU,GAAG,CAAC,CAAC,QAAQ,GAAG,OAAO,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,EAAE,YAAY;AAClE,UAAI,CAAC,GAAG,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAA;AAC9B,UAAI,CAAC,GAAG,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAA;AAC9B,UAAI,MAAM,GAAG,UAAU,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;;AAE7B,YAAM,CAAC,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAA;;;AAGhD,YAAM,CAAC,KAAK,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,OAAO,IAAI,CAAC,CAAC,QAAQ,CAAC,CAAA;AACxD,YAAM,CAAC,KAAK,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAA;KACrC,CAAC,CAAA;GACH,CAAC,CAAA;CACH,CAAC,CAAA","file":"index-compiled.js","sourcesContent":["/* global describe, it */\n\nvar assert = require('assert')\nvar xor = require('../')\nvar xorInplace = require('../inplace')\nvar fixtures = require('./fixtures')\n\ndescribe('xor', function () {\n  fixtures.forEach(function (f) {\n    it('returns ' + f.expected + ' for ' + f.a + '/' + f.b, function () {\n      var a = new Buffer(f.a, 'hex')\n      var b = new Buffer(f.b, 'hex')\n      var actual = xor(a, b)\n\n      assert.equal(actual.toString('hex'), f.expected)\n\n      // a/b unchanged\n      assert.equal(a.toString('hex'), f.a)\n      assert.equal(b.toString('hex'), f.b)\n    })\n  })\n})\n\ndescribe('xor/inplace', function () {\n  fixtures.forEach(function (f) {\n    it('returns ' + f.expected + ' for ' + f.a + '/' + f.b, function () {\n      var a = new Buffer(f.a, 'hex')\n      var b = new Buffer(f.b, 'hex')\n      var actual = xorInplace(a, b)\n\n      assert.equal(actual.toString('hex'), f.expected)\n\n      // a mutated, b unchanged\n      assert.equal(a.toString('hex'), f.mutated || f.expected)\n      assert.equal(b.toString('hex'), f.b)\n    })\n  })\n})\n"]}