{"version":3,"sources":["fixProc.js"],"names":[],"mappings":";;;AACA,IAAI,QAAQ,GAAG,yHAAyH,CAAA;AACxI,IAAI,UAAU,GAAG,iCAAiC,CAAA;AAClD,IAAI,SAAS,GAAG,gFAAgF,CAAA;AAChG,IAAI,GAAG,GAAG,OAAO,CAAC,gBAAgB,CAAC,CAAA;AACnC,IAAI,OAAO,GAAG,OAAO,CAAC,gBAAgB,CAAC,CAAA;AACvC,MAAM,CAAC,OAAO,GAAG,UAAU,IAAI,EAAE,QAAQ,EAAE;AACzC,MAAI,GAAG,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAA;AACzB,MAAI,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAA;AAC/B,MAAI,SAAS,CAAA;AACb,MAAI,CAAC,KAAK,EAAE;AACV,QAAI,MAAM,GAAG,GAAG,CAAC,KAAK,CAAC,SAAS,CAAC,CAAA;AACjC,aAAS,GAAG,IAAI,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,EAAE,QAAQ,CAAC,CAAA;GAClE,MAAM;AACL,QAAI,KAAK,GAAG,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC,CAAA;AAC5B,QAAI,EAAE,GAAG,IAAI,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAA;AACpC,QAAI,UAAU,GAAG,IAAI,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,EAAE,QAAQ,CAAC,CAAA;AACrE,QAAI,SAAS,GAAG,GAAG,CAAC,QAAQ,EAAE,EAAE,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,CAAA;AACzE,QAAI,GAAG,GAAG,EAAE,CAAA;AACZ,QAAI,MAAM,GAAG,OAAO,CAAC,gBAAgB,CAAC,KAAK,EAAE,SAAS,EAAE,EAAE,CAAC,CAAA;AAC3D,OAAG,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAA;AACnC,OAAG,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAA;AACxB,aAAS,GAAG,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAA;GAC/B;AACD,MAAI,GAAG,GAAG,GAAG,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,GAAG,MAAM,CAAA;AAC3C,SAAO;AACL,OAAG,EAAE,GAAG;AACR,QAAI,EAAE,SAAS;GAChB,CAAA;CACF,CAAA","file":"fixProc-compiled.js","sourcesContent":["// adapted from https://github.com/apatil/pemstrip\nvar findProc = /Proc-Type: 4,ENCRYPTED\\r?\\nDEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)\\r?\\n\\r?\\n([0-9A-z\\n\\r\\+\\/\\=]+)\\r?\\n/m\nvar startRegex = /^-----BEGIN (.*) KEY-----\\r?\\n/m\nvar fullRegex = /^-----BEGIN (.*) KEY-----\\r?\\n([0-9A-z\\n\\r\\+\\/\\=]+)\\r?\\n-----END \\1 KEY-----$/m\nvar evp = require('evp_bytestokey')\nvar ciphers = require('browserify-aes')\nmodule.exports = function (okey, password) {\n  var key = okey.toString()\n  var match = key.match(findProc)\n  var decrypted\n  if (!match) {\n    var match2 = key.match(fullRegex)\n    decrypted = new Buffer(match2[2].replace(/\\r?\\n/g, ''), 'base64')\n  } else {\n    var suite = 'aes' + match[1]\n    var iv = new Buffer(match[2], 'hex')\n    var cipherText = new Buffer(match[3].replace(/\\r?\\n/g, ''), 'base64')\n    var cipherKey = evp(password, iv.slice(0, 8), parseInt(match[1], 10)).key\n    var out = []\n    var cipher = ciphers.createDecipheriv(suite, cipherKey, iv)\n    out.push(cipher.update(cipherText))\n    out.push(cipher.final())\n    decrypted = Buffer.concat(out)\n  }\n  var tag = key.match(startRegex)[1] + ' KEY'\n  return {\n    tag: tag,\n    data: decrypted\n  }\n}\n"]}