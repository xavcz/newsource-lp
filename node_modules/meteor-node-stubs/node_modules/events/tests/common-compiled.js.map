{"version":3,"sources":["common.js"],"names":[],"mappings":";;AAAA,IAAI,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;;AAE/B,IAAI,cAAc,GAAG,EAAE,CAAC;;AAExB,SAAS,aAAa,GAAG;AACvB,MAAI,YAAY,GAAG,CAAC,CAAC;AACrB,OAAK,IAAI,CAAC,GAAC,CAAC,EAAG,CAAC,GAAE,cAAc,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;AAC5C,QAAI,OAAO,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC;AAChC,QAAI,OAAO,CAAC,MAAM,KAAK,OAAO,CAAC,QAAQ,EAAE;AACvC,eAAS;KACV;;AAED,gBAAY,EAAE,CAAC;AACf,WAAO,CAAC,GAAG,CAAC,uDAAuD,EACvD,OAAO,CAAC,IAAI,EACZ,OAAO,CAAC,QAAQ,EAChB,OAAO,CAAC,MAAM,CAAC,CAAC;AAC5B,WAAO,CAAC,GAAG,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;GAC5D;;AAED,QAAM,CAAC,YAAY,KAAK,CAAC,CAAC,CAAC;CAC5B;;AAED,KAAK,CAAC,aAAa,CAAC,CAAC;;AAErB,OAAO,CAAC,QAAQ,GAAG,UAAS,EAAE,EAAE,QAAQ,EAAE;AACxC,MAAI,OAAO,QAAQ,KAAK,QAAQ,EAAE,QAAQ,GAAG,CAAC,CAAC;;AAE/C,MAAI,OAAO,GAAG;AACZ,YAAQ,EAAE,QAAQ;AAClB,UAAM,EAAE,CAAC;AACT,SAAK,EAAE,AAAC,IAAI,KAAK,EAAA,CAAE,KAAK;AACxB,QAAI,EAAE,EAAE,CAAC,IAAI,IAAI,aAAa;GAC/B,CAAC;;AAEF,gBAAc,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;;AAE7B,SAAO,YAAW;AAChB,WAAO,CAAC,MAAM,EAAE,CAAC;AACjB,WAAO,EAAE,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;GAClC,CAAC;CACH,CAAC","file":"common-compiled.js","sourcesContent":["var assert = require('assert');\n\nvar mustCallChecks = [];\n\nfunction runCallChecks() {\n  var failed_count = 0;\n  for (var i=0 ; i< mustCallChecks.length; ++i) {\n    var context = mustCallChecks[i];\n    if (context.actual === context.expected) {\n      continue;\n    }\n\n    failed_count++;\n    console.log('Mismatched %s function calls. Expected %d, actual %d.',\n                context.name,\n                context.expected,\n                context.actual);\n    console.log(context.stack.split('\\n').slice(2).join('\\n'));\n  }\n\n  assert(failed_count === 0);\n}\n\nafter(runCallChecks);\n\nexports.mustCall = function(fn, expected) {\n  if (typeof expected !== 'number') expected = 1;\n\n  var context = {\n    expected: expected,\n    actual: 0,\n    stack: (new Error).stack,\n    name: fn.name || '<anonymous>'\n  };\n\n  mustCallChecks.push(context);\n\n  return function() {\n    context.actual++;\n    return fn.apply(this, arguments);\n  };\n};\n"]}