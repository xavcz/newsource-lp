{"version":3,"sources":["cipher.js"],"names":[],"mappings":"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","file":"cipher-compiled.js","sourcesContent":["'use strict';\n\nvar assert = require('minimalistic-assert');\n\nfunction Cipher(options) {\n  this.options = options;\n\n  this.type = this.options.type;\n  this.blockSize = 8;\n  this._init();\n\n  this.buffer = new Array(this.blockSize);\n  this.bufferOff = 0;\n}\nmodule.exports = Cipher;\n\nCipher.prototype._init = function _init() {\n  // Might be overrided\n};\n\nCipher.prototype.update = function update(data) {\n  if (data.length === 0)\n    return [];\n\n  if (this.type === 'decrypt')\n    return this._updateDecrypt(data);\n  else\n    return this._updateEncrypt(data);\n};\n\nCipher.prototype._buffer = function _buffer(data, off) {\n  // Append data to buffer\n  var min = Math.min(this.buffer.length - this.bufferOff, data.length - off);\n  for (var i = 0; i < min; i++)\n    this.buffer[this.bufferOff + i] = data[off + i];\n  this.bufferOff += min;\n\n  // Shift next\n  return min;\n};\n\nCipher.prototype._flushBuffer = function _flushBuffer(out, off) {\n  this._update(this.buffer, 0, out, off);\n  this.bufferOff = 0;\n  return this.blockSize;\n};\n\nCipher.prototype._updateEncrypt = function _updateEncrypt(data) {\n  var inputOff = 0;\n  var outputOff = 0;\n\n  var count = ((this.bufferOff + data.length) / this.blockSize) | 0;\n  var out = new Array(count * this.blockSize);\n\n  if (this.bufferOff !== 0) {\n    inputOff += this._buffer(data, inputOff);\n\n    if (this.bufferOff === this.buffer.length)\n      outputOff += this._flushBuffer(out, outputOff);\n  }\n\n  // Write blocks\n  var max = data.length - ((data.length - inputOff) % this.blockSize);\n  for (; inputOff < max; inputOff += this.blockSize) {\n    this._update(data, inputOff, out, outputOff);\n    outputOff += this.blockSize;\n  }\n\n  // Queue rest\n  for (; inputOff < data.length; inputOff++, this.bufferOff++)\n    this.buffer[this.bufferOff] = data[inputOff];\n\n  return out;\n};\n\nCipher.prototype._updateDecrypt = function _updateDecrypt(data) {\n  var inputOff = 0;\n  var outputOff = 0;\n\n  var count = Math.ceil((this.bufferOff + data.length) / this.blockSize) - 1;\n  var out = new Array(count * this.blockSize);\n\n  // TODO(indutny): optimize it, this is far from optimal\n  for (; count > 0; count--) {\n    inputOff += this._buffer(data, inputOff);\n    outputOff += this._flushBuffer(out, outputOff);\n  }\n\n  // Buffer rest of the input\n  inputOff += this._buffer(data, inputOff);\n\n  return out;\n};\n\nCipher.prototype.final = function final(buffer) {\n  var first;\n  if (buffer)\n    first = this.update(buffer);\n\n  var last;\n  if (this.type === 'encrypt')\n    last = this._finalEncrypt();\n  else\n    last = this._finalDecrypt();\n\n  if (first)\n    return first.concat(last);\n  else\n    return last;\n};\n\nCipher.prototype._pad = function _pad(buffer, off) {\n  if (off === 0)\n    return false;\n\n  while (off < buffer.length)\n    buffer[off++] = 0;\n\n  return true;\n};\n\nCipher.prototype._finalEncrypt = function _finalEncrypt() {\n  if (!this._pad(this.buffer, this.bufferOff))\n    return [];\n\n  var out = new Array(this.blockSize);\n  this._update(this.buffer, 0, out, 0);\n  return out;\n};\n\nCipher.prototype._unpad = function _unpad(buffer) {\n  return buffer;\n};\n\nCipher.prototype._finalDecrypt = function _finalDecrypt() {\n  assert.equal(this.bufferOff, this.blockSize, 'Not enough data to decrypt');\n  var out = new Array(this.blockSize);\n  this._flushBuffer(out, 0);\n\n  return this._unpad(out);\n};\n"]}