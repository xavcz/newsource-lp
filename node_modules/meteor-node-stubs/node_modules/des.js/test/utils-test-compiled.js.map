{"version":3,"sources":["utils-test.js"],"names":[],"mappings":"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","file":"utils-test-compiled.js","sourcesContent":["'use strict';\n\nvar assert = require('assert');\n\nvar des = require('../');\nvar utils = des.utils;\n\nvar fixtures = require('./fixtures');\nvar bin = fixtures.bin;\n\ndescribe('utils', function() {\n  describe('IP', function() {\n    it('should permute properly', function() {\n      var out = new Array(2);\n      var inp = [\n        bin('00000001 00100011 01000101 01100111'),\n        bin('10001001 10101011 11001101 11101111')\n      ];\n\n      utils.ip(inp[0], inp[1], out, 0);\n\n      var expected = [\n        bin('11001100 00000000 11001100 11111111'),\n        bin('11110000 10101010 11110000 10101010')\n      ];\n\n      assert.deepEqual(out, expected);\n    });\n\n    it('should rev-permute properly', function() {\n      var out = new Array(2);\n      var inp = [\n        bin('11001100 00000000 11001100 11111111'),\n        bin('11110000 10101010 11110000 10101010')\n      ];\n\n      utils.rip(inp[0], inp[1], out, 0);\n\n      var expected = [\n        bin('00000001 00100011 01000101 01100111'),\n        bin('10001001 10101011 11001101 11101111')\n      ];\n\n      assert.deepEqual(out, expected);\n    });\n  });\n\n  describe('PC1', function() {\n    it('should permute properly', function() {\n      var out = new Array(2);\n      var inp = [\n        bin('00010011 00110100 01010111 01111001'),\n        bin('10011011 10111100 11011111 11110001')\n      ];\n\n      utils.pc1(inp[0], inp[1], out, 0);\n\n      var expected = [\n        bin('1111000 0110011 0010101 0101111'),\n        bin('0101010 1011001 1001111 0001111')\n      ];\n\n      assert.deepEqual(out, expected);\n    });\n  });\n\n  describe('r28shl', function() {\n    it('should shl properly', function() {\n      assert.equal(utils.r28shl(bin('1111000011001100101010101111'), 1),\n                   bin('1110000110011001010101011111'));\n\n      assert.equal(utils.r28shl(bin('0101010101100110011110001111'), 1),\n                   bin('1010101011001100111100011110'));\n\n      assert.equal(utils.r28shl(bin('1111000011001100101010101111'), 4),\n                   bin('0000110011001010101011111111'));\n\n      assert.equal(utils.r28shl(bin('0101010101100110011110001111'), 4),\n                   bin('0101011001100111100011110101'));\n    });\n  });\n\n  describe('PC2', function() {\n    it('should permute properly', function() {\n      var out = new Array(2);\n      var inp = [\n        bin('1110000 1100110 0101010 1011111'),\n        bin('1010101 0110011 0011110 0011110')\n      ];\n\n      utils.pc2(inp[0], inp[1], out, 0);\n\n      var expected = [\n        bin('000110 110000 001011 101111'),\n        bin('111111 000111 000001 110010')\n      ];\n\n      assert.deepEqual(out, expected);\n    });\n  });\n\n  describe('readUInt32BE', function() {\n    it('should read number properly', function() {\n      var a = [ 0xde, 0xad, 0xbe, 0xef ];\n      var o = utils.readUInt32BE(a, 0);\n      assert.equal(o, 0xdeadbeef);\n    });\n  });\n\n  describe('writeUInt32BE', function() {\n    it('should read number properly', function() {\n      var a = [ 0, 0, 0, 0 ];\n      utils.writeUInt32BE(a, 0xdeadbeef, 0);\n      var expected = [ 0xde, 0xad, 0xbe, 0xef ];\n      assert.deepEqual(a, expected);\n    });\n  });\n\n  describe('expand', function() {\n    it('should expand', function() {\n      var out = [ 0, 0 ];\n      utils.expand(bin('1111 0000 1010 1010 1111 0000 1010 1010'), out, 0);\n      var expected = [\n        bin('011110 100001 010101 010101'),\n        bin('011110 100001 010101 010101')\n      ];\n      assert.deepEqual(out, expected);\n    });\n\n    it('should expand with low 1', function() {\n      var out = [ 0, 0 ];\n      utils.expand(bin('1111 0000 1010 1010 1111 0000 1010 1011'), out, 0);\n      var expected = [\n        bin('111110 100001 010101 010101'),\n        bin('011110 100001 010101 010111')\n      ];\n      assert.deepEqual(out, expected);\n    });\n\n    it('should expand with low 1', function() {\n      var out = [ 0, 0 ];\n      utils.expand(bin('10100010 01011100 00001011 11110100'), out, 0);\n      var expected = [\n        bin('010100 000100 001011 111000'),\n        bin('000001 010111 111110 101001')\n      ];\n      assert.deepEqual(out, expected);\n    });\n  });\n\n  describe('substitute', function() {\n    it('should substitute', function() {\n      var input = [\n        bin('011000 010001 011110 111010'),\n        bin('100001 100110 010100 100111')\n      ];\n      var output = utils.substitute(input[0], input[1]);\n      assert.equal(output, bin('0101 1100 1000 0010 1011 0101 1001 0111'));\n    });\n  });\n\n  describe('permute', function() {\n    it('should permute', function() {\n      var output = utils.permute(\n          bin('0101 1100 1000 0010 1011 0101 1001 0111'));\n      assert.equal(output, bin('0010 0011 0100 1010 1010 1001 1011 1011'));\n    });\n  });\n});\n"]}