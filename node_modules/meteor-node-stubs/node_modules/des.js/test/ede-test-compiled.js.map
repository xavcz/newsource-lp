{"version":3,"sources":["ede-test.js"],"names":[],"mappings":"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","file":"ede-test-compiled.js","sourcesContent":["'use strict';\n\nvar assert = require('assert');\nvar crypto = require('crypto');\nvar Buffer = require('buffer').Buffer;\n\nvar des = require('../');\n\nvar fixtures = require('./fixtures');\nvar bin = fixtures.bin;\n\ndescribe('DES-EDE-CBC', function() {\n  var CBC = des.CBC.instantiate(des.EDE);\n\n  describe('encryption/decryption', function() {\n    var vectors = [\n      {\n        key: new Array(4).join('133457799bbcdff1'),\n        iv: '0102030405060708',\n        input: '0123456789abcdef'\n      },\n      {\n        key: new Array(4).join('0000000000000000'),\n        iv: 'ffffffffffffffff',\n        input: '0000000000000000'\n      },\n      {\n        key: new Array(4).join('a3a3a3a3b3b3b3b3'),\n        iv: 'cdcdcdcdcdcdcdcd',\n        input: 'cccccccccccccccc'\n      },\n      {\n        key: new Array(4).join('deadbeefabbadead'),\n        iv: 'a0da0da0da0da0da',\n        input: '0102030405060708090a'\n      },\n      {\n        key: 'aabbccddeeff0011' + '1111222233334444' + 'ffffeeeeddddcccc',\n        iv: 'fefefefefefefefe',\n        input: '0102030405060708090a0102030405060708090a0102030405060708090a' +\n               '0102030405060708090a0102030405060607080a0102030405060708090a'\n      }\n    ];\n\n    vectors.forEach(function(vec, i) {\n      it('should encrypt vector ' + i, function() {\n        var key = new Buffer(vec.key, 'hex');\n        var iv = new Buffer(vec.iv, 'hex');\n        var input = new Buffer(vec.input, 'hex');\n\n        var enc = CBC.create({\n          type: 'encrypt',\n          key: key,\n          iv: iv\n        });\n        var out = new Buffer(enc.update(input).concat(enc.final()));\n\n        var cipher = crypto.createCipheriv('des-ede3-cbc', key, iv);\n        var expected = Buffer.concat([ cipher.update(input), cipher.final() ]);\n\n        assert.deepEqual(out, expected);\n\n        var dec = CBC.create({\n          type: 'decrypt',\n          key: key,\n          iv: iv\n        });\n        assert.deepEqual(new Buffer(dec.update(out).concat(dec.final())),\n                         input);\n      });\n    });\n  });\n});\n"]}