{"version":3,"sources":["test.js"],"names":[],"mappings":"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","file":"test-compiled.js","sourcesContent":["var test = require('tape')\nvar CipherBase = require('./')\nvar inherits = require('inherits')\n\ntest('basic version', function (t) {\n  inherits(Cipher, CipherBase)\n  function Cipher () {\n    CipherBase.call(this)\n  }\n  Cipher.prototype._update = function (input) {\n    t.ok(Buffer.isBuffer(input))\n    return input\n  }\n  Cipher.prototype._final = function () {\n    // noop\n  }\n  var cipher = new Cipher()\n  var utf8 = 'abc123abcd'\n  var update = cipher.update(utf8, 'utf8', 'base64') + cipher.final('base64')\n  var string = (new Buffer(update, 'base64')).toString()\n  t.equals(utf8, string)\n  t.end()\n})\ntest('hash mode', function (t) {\n  inherits(Cipher, CipherBase)\n  function Cipher () {\n    CipherBase.call(this, 'finalName')\n    this._cache = []\n  }\n  Cipher.prototype._update = function (input) {\n    t.ok(Buffer.isBuffer(input))\n    this._cache.push(input)\n  }\n  Cipher.prototype._final = function () {\n    return Buffer.concat(this._cache)\n  }\n  var cipher = new Cipher()\n  var utf8 = 'abc123abcd'\n  var update = cipher.update(utf8, 'utf8').finalName('base64')\n  var string = (new Buffer(update, 'base64')).toString()\n\n  t.equals(utf8, string)\n  t.end()\n})\ntest('hash mode as stream', function (t) {\n  inherits(Cipher, CipherBase)\n  function Cipher () {\n    CipherBase.call(this, 'finalName')\n    this._cache = []\n  }\n  Cipher.prototype._update = function (input) {\n    t.ok(Buffer.isBuffer(input))\n    this._cache.push(input)\n  }\n  Cipher.prototype._final = function () {\n    return Buffer.concat(this._cache)\n  }\n  var cipher = new Cipher()\n  cipher.on('error', function (e) {\n    t.notOk(e)\n  })\n  var utf8 = 'abc123abcd'\n  cipher.end(utf8, 'utf8')\n  var update = cipher.read().toString('base64')\n  var string = (new Buffer(update, 'base64')).toString()\n\n  t.equals(utf8, string)\n  t.end()\n})\ntest('encodings', function (t) {\n  inherits(Cipher, CipherBase)\n  function Cipher () {\n    CipherBase.call(this)\n  }\n  Cipher.prototype._update = function (input) {\n    return input\n  }\n  Cipher.prototype._final = function () {\n    // noop\n  }\n  t.test('mix and match encoding', function (t) {\n    t.plan(2)\n\n    var cipher = new Cipher()\n    cipher.update('foo', 'utf8', 'utf8')\n    t.throws(function () {\n      cipher.update('foo', 'utf8', 'base64')\n    })\n    cipher = new Cipher()\n    cipher.update('foo', 'utf8', 'base64')\n    t.doesNotThrow(function () {\n      cipher.update('foo', 'utf8')\n      cipher.final('base64')\n    })\n  })\n  t.test('handle long uft8 plaintexts', function (t) {\n    t.plan(1)\n    var txt = 'ふっかつ　あきる　すぶり　はやい　つける　まゆげ　たんさん　みんぞく　ねほりはほり　せまい　たいまつばな　ひはん'\n\n    var cipher = new Cipher()\n    var decipher = new Cipher()\n    var enc = decipher.update(cipher.update(txt, 'utf8', 'base64'), 'base64', 'utf8')\n    enc += decipher.update(cipher.final('base64'), 'base64', 'utf8')\n    enc += decipher.final('utf8')\n\n    t.equals(txt, enc)\n  })\n})\n"]}