{"version":3,"sources":["test.js"],"names":[],"mappings":";;AAAA,IAAI,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAA;AAC1B,IAAI,GAAG,GAAG,OAAO,CAAC,IAAI,CAAC,CAAA;AACvB,IAAI,KAAK,GAAG,OAAO,CAAC,SAAS,CAAC,CAAA;AAC9B,IAAI,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAA;;AAE9B,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,UAAU,IAAI,EAAE;AACzC,MAAI,CAAC,IAAI,EAAE,UAAU,CAAC,EAAE;AACtB,QAAI,CAAC,GAAG,CAAC,CAAA;AACT,WAAO,EAAE,CAAC,GAAG,EAAE,EAAE;AACf,aAAO,CAAC,CAAC,CAAC,CAAA;KACX;AACD,aAAS,OAAO,CAAE,CAAC,EAAE;AACnB,OAAC,CAAC,IAAI,CAAC,OAAO,GAAG,CAAC,EAAE,UAAU,CAAC,EAAE;AAC/B,SAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;AACT,YAAI,GAAG,GAAG,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAA;AAC7C,YAAI,EAAE,GAAG,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,CAAA;AAC3C,YAAI,IAAI,GAAG,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,CAAA;AAClC,YAAI,UAAU,CAAA;AACd,YAAI;AACF,oBAAU,GAAG,IAAI,GAAG,CAAC;AACnB,gBAAI,EAAE,IAAI;AACV,eAAG,EAAE,GAAG;AACR,cAAE,EAAE,EAAE;WACP,CAAC,CAAA;SACH,CAAC,OAAO,CAAC,EAAE;AACV,WAAC,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAA;SACpB;AACD,YAAI,WAAW,CAAA;AACf,YAAI;AACF,qBAAW,GAAG,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,GAAG,EAAE,EAAE,CAAC,CAAA;SACnD,CAAC,OAAO,CAAC,EAAE;AACV,WAAC,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAA;SACpB;AACD,YAAI,aAAa,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,UAAU,CAAC,KAAK,EAAE,CAAC,CAAC,CAAA;AAChF,YAAI,cAAc,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,WAAW,CAAC,KAAK,EAAE,CAAC,CAAC,CAAA;AACnF,SAAC,CAAC,MAAM,CAAC,cAAc,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,aAAa,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAA;AACvE,YAAI,UAAU,GAAG,IAAI,GAAG,CAAC;AACvB,cAAI,EAAE,IAAI;AACV,aAAG,EAAE,GAAG;AACR,YAAE,EAAE,EAAE;AACN,iBAAO,EAAE,IAAI;SACd,CAAC,CAAA;AACF,YAAI,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,UAAU,CAAC,MAAM,CAAC,aAAa,CAAC,EAAE,UAAU,CAAC,KAAK,EAAE,CAAC,CAAC,CAAA;AACrF,SAAC,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,SAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAA;OAC1D,CAAC,CAAA;KACH;GACF,CAAC,CAAA;CACH,CAAC,CAAA","file":"test-compiled.js","sourcesContent":["var test = require('tape')\nvar DES = require('./')\nvar modes = require('./modes')\nvar crypto = require('crypto')\n\nObject.keys(modes).forEach(function (mode) {\n  test(mode, function (t) {\n    var i = 0\n    while (++i < 10) {\n      runOnce(i)\n    }\n    function runOnce (i) {\n      t.test('run: ' + i, function (t) {\n        t.plan(2)\n        var key = crypto.randomBytes(modes[mode].key)\n        var iv = crypto.randomBytes(modes[mode].iv)\n        var text = crypto.randomBytes(200)\n        var ourEncrypt\n        try {\n          ourEncrypt = new DES({\n            mode: mode,\n            key: key,\n            iv: iv\n          })\n        } catch (e) {\n          t.notOk(e, e.stack)\n        }\n        var nodeEncrypt\n        try {\n          nodeEncrypt = crypto.createCipheriv(mode, key, iv)\n        } catch (e) {\n          t.notOk(e, e.stack)\n        }\n        var ourCipherText = Buffer.concat([ourEncrypt.update(text), ourEncrypt.final()])\n        var nodeCipherText = Buffer.concat([nodeEncrypt.update(text), nodeEncrypt.final()])\n        t.equals(nodeCipherText.toString('hex'), ourCipherText.toString('hex'))\n        var ourDecrypt = new DES({\n          mode: mode,\n          key: key,\n          iv: iv,\n          decrypt: true\n        })\n        var plainText = Buffer.concat([ourDecrypt.update(ourCipherText), ourDecrypt.final()])\n        t.equals(text.toString('hex'), plainText.toString('hex'))\n      })\n    }\n  })\n})\n"]}