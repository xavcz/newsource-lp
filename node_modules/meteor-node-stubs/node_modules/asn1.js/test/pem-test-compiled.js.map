{"version":3,"sources":["pem-test.js"],"names":[],"mappings":";;AAAA,IAAI,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AAC/B,IAAI,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;AACzB,IAAI,EAAE,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC;;AAE1B,IAAI,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC;;AAEtC,QAAQ,CAAC,6BAA6B,EAAE,YAAW;AACjD,MAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,YAAW;AAC1C,QAAI,CAAC,GAAG,EAAE,CAAC,GAAG,CACZ,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EACnB,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EACtB,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CACpB,CAAC;GACH,CAAC,CAAC;;AAEH,MAAI,OAAO,GAAG,IAAI,MAAM,CAAC,GAAG,CAAC,CAAC;AAC9B,SAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;;AAElB,IAAE,CAAC,mBAAmB,EAAE,YAAW;;AAEjC,QAAI,GAAG,GAAG,KAAK,CAAC,MAAM,CAAC;AACrB,OAAC,EAAE,IAAI,EAAE,CAAC,GAAG,CAAC;AACd,OAAC,EAAE;AACD,YAAI,EAAE,OAAO;AACb,cAAM,EAAE,CAAC;OACV;AACD,OAAC,EAAE,IAAI,EAAE,CAAC,GAAG,CAAC;KACf,EAAE,KAAK,EAAE;AACR,WAAK,EAAE,OAAO;KACf,CAAC,CAAC;;AAEH,QAAI,QAAQ,GACR,yBAAyB,GACzB,oEAAoE,GACpE,oEAAoE,GACpE,4BAA4B,GAC5B,qBAAqB,CAAC;AAC1B,UAAM,CAAC,KAAK,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;GAC7B,CAAC,CAAC;;AAEH,IAAE,CAAC,mBAAmB,EAAE,YAAW;AACjC,QAAI,QAAQ,GACR,yBAAyB,GACzB,oEAAoE,GACpE,oEAAoE,GACpE,4BAA4B,GAC5B,qBAAqB,CAAC;;AAE1B,QAAI,GAAG,GAAG,KAAK,CAAC,MAAM,CAAC,QAAQ,EAAE,KAAK,EAAE,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC,CAAC;AAC5D,UAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,QAAQ,EAAE,EAAE,KAAK,CAAC,CAAC;AACtC,UAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC;AACxD,UAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,QAAQ,EAAE,EAAE,KAAK,CAAC,CAAC;GACvC,CAAC,CAAC;CACJ,CAAC,CAAC","file":"pem-test-compiled.js","sourcesContent":["var assert = require('assert');\nvar asn1 = require('..');\nvar BN = require('bn.js');\n\nvar Buffer = require('buffer').Buffer;\n\ndescribe('asn1.js PEM encoder/decoder', function() {\n  var model = asn1.define('Model', function() {\n    this.seq().obj(\n      this.key('a').int(),\n      this.key('b').bitstr(),\n      this.key('c').int()\n    );\n  });\n\n  var hundred = new Buffer(100);\n  hundred.fill('A');\n\n  it('should encode PEM', function() {\n\n    var out = model.encode({\n      a: new BN(123),\n      b: {\n        data: hundred,\n        unused: 0\n      },\n      c: new BN(456)\n    }, 'pem', {\n      label: 'MODEL'\n    });\n\n    var expected =\n        '-----BEGIN MODEL-----\\n' +\n        'MG4CAXsDZQBBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFB\\n' +\n        'QUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFB\\n' +\n        'QUFBQUFBQUFBQUFBAgIByA==\\n' +\n        '-----END MODEL-----';\n    assert.equal(out, expected);\n  });\n\n  it('should decode PEM', function() {\n    var expected =\n        '-----BEGIN MODEL-----\\n' +\n        'MG4CAXsDZQBBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFB\\n' +\n        'QUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFB\\n' +\n        'QUFBQUFBQUFBQUFBAgIByA==\\n' +\n        '-----END MODEL-----';\n\n    var out = model.decode(expected, 'pem', { label: 'MODEL' });\n    assert.equal(out.a.toString(), '123');\n    assert.equal(out.b.data.toString(), hundred.toString());\n    assert.equal(out.c.toString(), '456');\n  });\n});\n"]}