{"version":3,"sources":["pem.js"],"names":[],"mappings":";;AAAA,IAAI,QAAQ,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;AACnC,IAAI,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC;;AAEtC,IAAI,IAAI,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC;AACjC,IAAI,UAAU,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC;;AAElC,SAAS,UAAU,CAAC,MAAM,EAAE;AAC1B,YAAU,CAAC,IAAI,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;AAC9B,MAAI,CAAC,GAAG,GAAG,KAAK,CAAC;CAClB,CAAC;AACF,QAAQ,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC;AACjC,MAAM,CAAC,OAAO,GAAG,UAAU,CAAC;;AAE5B,UAAU,CAAC,SAAS,CAAC,MAAM,GAAG,SAAS,MAAM,CAAC,IAAI,EAAE,OAAO,EAAE;AAC3D,MAAI,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;;AAE9C,MAAI,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC;;AAExC,MAAI,EAAE,GAAG,iCAAiC,CAAC;AAC3C,MAAI,KAAK,GAAG,CAAC,CAAC,CAAC;AACf,MAAI,GAAG,GAAG,CAAC,CAAC,CAAC;AACb,OAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACrC,QAAI,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;AAC/B,QAAI,KAAK,KAAK,IAAI,EAChB,SAAS;;AAEX,QAAI,KAAK,CAAC,CAAC,CAAC,KAAK,KAAK,EACpB,SAAS;;AAEX,QAAI,KAAK,KAAK,CAAC,CAAC,EAAE;AAChB,UAAI,KAAK,CAAC,CAAC,CAAC,KAAK,OAAO,EACtB,MAAM;AACR,WAAK,GAAG,CAAC,CAAC;KACX,MAAM;AACL,UAAI,KAAK,CAAC,CAAC,CAAC,KAAK,KAAK,EACpB,MAAM;AACR,SAAG,GAAG,CAAC,CAAC;AACR,YAAM;KACP;GACF;AACD,MAAI,KAAK,KAAK,CAAC,CAAC,IAAI,GAAG,KAAK,CAAC,CAAC,EAC5B,MAAM,IAAI,KAAK,CAAC,6BAA6B,GAAG,KAAK,CAAC,CAAC;;AAEzD,MAAI,MAAM,GAAG,KAAK,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;;AAElD,QAAM,CAAC,OAAO,CAAC,mBAAmB,EAAE,EAAE,CAAC,CAAC;;AAExC,MAAI,KAAK,GAAG,IAAI,MAAM,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;AACzC,SAAO,UAAU,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;CAC/D,CAAC","file":"pem-compiled.js","sourcesContent":["var inherits = require('inherits');\nvar Buffer = require('buffer').Buffer;\n\nvar asn1 = require('../../asn1');\nvar DERDecoder = require('./der');\n\nfunction PEMDecoder(entity) {\n  DERDecoder.call(this, entity);\n  this.enc = 'pem';\n};\ninherits(PEMDecoder, DERDecoder);\nmodule.exports = PEMDecoder;\n\nPEMDecoder.prototype.decode = function decode(data, options) {\n  var lines = data.toString().split(/[\\r\\n]+/g);\n\n  var label = options.label.toUpperCase();\n\n  var re = /^-----(BEGIN|END) ([^-]+)-----$/;\n  var start = -1;\n  var end = -1;\n  for (var i = 0; i < lines.length; i++) {\n    var match = lines[i].match(re);\n    if (match === null)\n      continue;\n\n    if (match[2] !== label)\n      continue;\n\n    if (start === -1) {\n      if (match[1] !== 'BEGIN')\n        break;\n      start = i;\n    } else {\n      if (match[1] !== 'END')\n        break;\n      end = i;\n      break;\n    }\n  }\n  if (start === -1 || end === -1)\n    throw new Error('PEM section not found for: ' + label);\n\n  var base64 = lines.slice(start + 1, end).join('');\n  // Remove excessive symbols\n  base64.replace(/[^a-z0-9\\+\\/=]+/gi, '');\n\n  var input = new Buffer(base64, 'base64');\n  return DERDecoder.prototype.decode.call(this, input, options);\n};\n"]}