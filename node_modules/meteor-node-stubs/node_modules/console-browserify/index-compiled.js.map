{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index-compiled.js","sourcesContent":["/*global window, global*/\nvar util = require(\"util\")\nvar assert = require(\"assert\")\nvar now = require(\"date-now\")\n\nvar slice = Array.prototype.slice\nvar console\nvar times = {}\n\nif (typeof global !== \"undefined\" && global.console) {\n    console = global.console\n} else if (typeof window !== \"undefined\" && window.console) {\n    console = window.console\n} else {\n    console = {}\n}\n\nvar functions = [\n    [log, \"log\"],\n    [info, \"info\"],\n    [warn, \"warn\"],\n    [error, \"error\"],\n    [time, \"time\"],\n    [timeEnd, \"timeEnd\"],\n    [trace, \"trace\"],\n    [dir, \"dir\"],\n    [consoleAssert, \"assert\"]\n]\n\nfor (var i = 0; i < functions.length; i++) {\n    var tuple = functions[i]\n    var f = tuple[0]\n    var name = tuple[1]\n\n    if (!console[name]) {\n        console[name] = f\n    }\n}\n\nmodule.exports = console\n\nfunction log() {}\n\nfunction info() {\n    console.log.apply(console, arguments)\n}\n\nfunction warn() {\n    console.log.apply(console, arguments)\n}\n\nfunction error() {\n    console.warn.apply(console, arguments)\n}\n\nfunction time(label) {\n    times[label] = now()\n}\n\nfunction timeEnd(label) {\n    var time = times[label]\n    if (!time) {\n        throw new Error(\"No such label: \" + label)\n    }\n\n    var duration = now() - time\n    console.log(label + \": \" + duration + \"ms\")\n}\n\nfunction trace() {\n    var err = new Error()\n    err.name = \"Trace\"\n    err.message = util.format.apply(null, arguments)\n    console.error(err.stack)\n}\n\nfunction dir(object) {\n    console.log(util.inspect(object) + \"\\n\")\n}\n\nfunction consoleAssert(expression) {\n    if (!expression) {\n        var arr = slice.call(arguments, 1)\n        assert.ok(false, util.format.apply(null, arr))\n    }\n}\n"]}