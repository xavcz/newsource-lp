{"version":3,"sources":["punycode.js"],"names":[],"mappings":"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","file":"punycode-compiled.js","sourcesContent":["/*! https://mths.be/punycode v1.4.0 by @mathias */\n;(function(root) {\n\n\t/** Detect free variables */\n\tvar freeExports = typeof exports == 'object' && exports &&\n\t\t!exports.nodeType && exports;\n\tvar freeModule = typeof module == 'object' && module &&\n\t\t!module.nodeType && module;\n\tvar freeGlobal = typeof global == 'object' && global;\n\tif (\n\t\tfreeGlobal.global === freeGlobal ||\n\t\tfreeGlobal.window === freeGlobal ||\n\t\tfreeGlobal.self === freeGlobal\n\t) {\n\t\troot = freeGlobal;\n\t}\n\n\t/**\n\t * The `punycode` object.\n\t * @name punycode\n\t * @type Object\n\t */\n\tvar punycode,\n\n\t/** Highest positive signed 32-bit float value */\n\tmaxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1\n\n\t/** Bootstring parameters */\n\tbase = 36,\n\ttMin = 1,\n\ttMax = 26,\n\tskew = 38,\n\tdamp = 700,\n\tinitialBias = 72,\n\tinitialN = 128, // 0x80\n\tdelimiter = '-', // '\\x2D'\n\n\t/** Regular expressions */\n\tregexPunycode = /^xn--/,\n\tregexNonASCII = /[^\\x20-\\x7E]/, // unprintable ASCII chars + non-ASCII chars\n\tregexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g, // RFC 3490 separators\n\n\t/** Error messages */\n\terrors = {\n\t\t'overflow': 'Overflow: input needs wider integers to process',\n\t\t'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n\t\t'invalid-input': 'Invalid input'\n\t},\n\n\t/** Convenience shortcuts */\n\tbaseMinusTMin = base - tMin,\n\tfloor = Math.floor,\n\tstringFromCharCode = String.fromCharCode,\n\n\t/** Temporary variable */\n\tkey;\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/**\n\t * A generic error utility function.\n\t * @private\n\t * @param {String} type The error type.\n\t * @returns {Error} Throws a `RangeError` with the applicable error message.\n\t */\n\tfunction error(type) {\n\t\tthrow new RangeError(errors[type]);\n\t}\n\n\t/**\n\t * A generic `Array#map` utility function.\n\t * @private\n\t * @param {Array} array The array to iterate over.\n\t * @param {Function} callback The function that gets called for every array\n\t * item.\n\t * @returns {Array} A new array of values returned by the callback function.\n\t */\n\tfunction map(array, fn) {\n\t\tvar length = array.length;\n\t\tvar result = [];\n\t\twhile (length--) {\n\t\t\tresult[length] = fn(array[length]);\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**\n\t * A simple `Array#map`-like wrapper to work with domain name strings or email\n\t * addresses.\n\t * @private\n\t * @param {String} domain The domain name or email address.\n\t * @param {Function} callback The function that gets called for every\n\t * character.\n\t * @returns {Array} A new string of characters returned by the callback\n\t * function.\n\t */\n\tfunction mapDomain(string, fn) {\n\t\tvar parts = string.split('@');\n\t\tvar result = '';\n\t\tif (parts.length > 1) {\n\t\t\t// In email addresses, only the domain name should be punycoded. Leave\n\t\t\t// the local part (i.e. everything up to `@`) intact.\n\t\t\tresult = parts[0] + '@';\n\t\t\tstring = parts[1];\n\t\t}\n\t\t// Avoid `split(regex)` for IE8 compatibility. See #17.\n\t\tstring = string.replace(regexSeparators, '\\x2E');\n\t\tvar labels = string.split('.');\n\t\tvar encoded = map(labels, fn).join('.');\n\t\treturn result + encoded;\n\t}\n\n\t/**\n\t * Creates an array containing the numeric code points of each Unicode\n\t * character in the string. While JavaScript uses UCS-2 internally,\n\t * this function will convert a pair of surrogate halves (each of which\n\t * UCS-2 exposes as separate characters) into a single code point,\n\t * matching UTF-16.\n\t * @see `punycode.ucs2.encode`\n\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t * @memberOf punycode.ucs2\n\t * @name decode\n\t * @param {String} string The Unicode input string (UCS-2).\n\t * @returns {Array} The new array of code points.\n\t */\n\tfunction ucs2decode(string) {\n\t\tvar output = [],\n\t\t    counter = 0,\n\t\t    length = string.length,\n\t\t    value,\n\t\t    extra;\n\t\twhile (counter < length) {\n\t\t\tvalue = string.charCodeAt(counter++);\n\t\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n\t\t\t\t// high surrogate, and there is a next character\n\t\t\t\textra = string.charCodeAt(counter++);\n\t\t\t\tif ((extra & 0xFC00) == 0xDC00) { // low surrogate\n\t\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n\t\t\t\t} else {\n\t\t\t\t\t// unmatched surrogate; only append this code unit, in case the next\n\t\t\t\t\t// code unit is the high surrogate of a surrogate pair\n\t\t\t\t\toutput.push(value);\n\t\t\t\t\tcounter--;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\toutput.push(value);\n\t\t\t}\n\t\t}\n\t\treturn output;\n\t}\n\n\t/**\n\t * Creates a string based on an array of numeric code points.\n\t * @see `punycode.ucs2.decode`\n\t * @memberOf punycode.ucs2\n\t * @name encode\n\t * @param {Array} codePoints The array of numeric code points.\n\t * @returns {String} The new Unicode string (UCS-2).\n\t */\n\tfunction ucs2encode(array) {\n\t\treturn map(array, function(value) {\n\t\t\tvar output = '';\n\t\t\tif (value > 0xFFFF) {\n\t\t\t\tvalue -= 0x10000;\n\t\t\t\toutput += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);\n\t\t\t\tvalue = 0xDC00 | value & 0x3FF;\n\t\t\t}\n\t\t\toutput += stringFromCharCode(value);\n\t\t\treturn output;\n\t\t}).join('');\n\t}\n\n\t/**\n\t * Converts a basic code point into a digit/integer.\n\t * @see `digitToBasic()`\n\t * @private\n\t * @param {Number} codePoint The basic numeric code point value.\n\t * @returns {Number} The numeric value of a basic code point (for use in\n\t * representing integers) in the range `0` to `base - 1`, or `base` if\n\t * the code point does not represent a value.\n\t */\n\tfunction basicToDigit(codePoint) {\n\t\tif (codePoint - 48 < 10) {\n\t\t\treturn codePoint - 22;\n\t\t}\n\t\tif (codePoint - 65 < 26) {\n\t\t\treturn codePoint - 65;\n\t\t}\n\t\tif (codePoint - 97 < 26) {\n\t\t\treturn codePoint - 97;\n\t\t}\n\t\treturn base;\n\t}\n\n\t/**\n\t * Converts a digit/integer into a basic code point.\n\t * @see `basicToDigit()`\n\t * @private\n\t * @param {Number} digit The numeric value of a basic code point.\n\t * @returns {Number} The basic code point whose value (when used for\n\t * representing integers) is `digit`, which needs to be in the range\n\t * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n\t * used; else, the lowercase form is used. The behavior is undefined\n\t * if `flag` is non-zero and `digit` has no uppercase form.\n\t */\n\tfunction digitToBasic(digit, flag) {\n\t\t//  0..25 map to ASCII a..z or A..Z\n\t\t// 26..35 map to ASCII 0..9\n\t\treturn digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n\t}\n\n\t/**\n\t * Bias adaptation function as per section 3.4 of RFC 3492.\n\t * https://tools.ietf.org/html/rfc3492#section-3.4\n\t * @private\n\t */\n\tfunction adapt(delta, numPoints, firstTime) {\n\t\tvar k = 0;\n\t\tdelta = firstTime ? floor(delta / damp) : delta >> 1;\n\t\tdelta += floor(delta / numPoints);\n\t\tfor (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {\n\t\t\tdelta = floor(delta / baseMinusTMin);\n\t\t}\n\t\treturn floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n\t}\n\n\t/**\n\t * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n\t * symbols.\n\t * @memberOf punycode\n\t * @param {String} input The Punycode string of ASCII-only symbols.\n\t * @returns {String} The resulting string of Unicode symbols.\n\t */\n\tfunction decode(input) {\n\t\t// Don't use UCS-2\n\t\tvar output = [],\n\t\t    inputLength = input.length,\n\t\t    out,\n\t\t    i = 0,\n\t\t    n = initialN,\n\t\t    bias = initialBias,\n\t\t    basic,\n\t\t    j,\n\t\t    index,\n\t\t    oldi,\n\t\t    w,\n\t\t    k,\n\t\t    digit,\n\t\t    t,\n\t\t    /** Cached calculation results */\n\t\t    baseMinusT;\n\n\t\t// Handle the basic code points: let `basic` be the number of input code\n\t\t// points before the last delimiter, or `0` if there is none, then copy\n\t\t// the first basic code points to the output.\n\n\t\tbasic = input.lastIndexOf(delimiter);\n\t\tif (basic < 0) {\n\t\t\tbasic = 0;\n\t\t}\n\n\t\tfor (j = 0; j < basic; ++j) {\n\t\t\t// if it's not a basic code point\n\t\t\tif (input.charCodeAt(j) >= 0x80) {\n\t\t\t\terror('not-basic');\n\t\t\t}\n\t\t\toutput.push(input.charCodeAt(j));\n\t\t}\n\n\t\t// Main decoding loop: start just after the last delimiter if any basic code\n\t\t// points were copied; start at the beginning otherwise.\n\n\t\tfor (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {\n\n\t\t\t// `index` is the index of the next character to be consumed.\n\t\t\t// Decode a generalized variable-length integer into `delta`,\n\t\t\t// which gets added to `i`. The overflow checking is easier\n\t\t\t// if we increase `i` as we go, then subtract off its starting\n\t\t\t// value at the end to obtain `delta`.\n\t\t\tfor (oldi = i, w = 1, k = base; /* no condition */; k += base) {\n\n\t\t\t\tif (index >= inputLength) {\n\t\t\t\t\terror('invalid-input');\n\t\t\t\t}\n\n\t\t\t\tdigit = basicToDigit(input.charCodeAt(index++));\n\n\t\t\t\tif (digit >= base || digit > floor((maxInt - i) / w)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\ti += digit * w;\n\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\n\t\t\t\tif (digit < t) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tbaseMinusT = base - t;\n\t\t\t\tif (w > floor(maxInt / baseMinusT)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tw *= baseMinusT;\n\n\t\t\t}\n\n\t\t\tout = output.length + 1;\n\t\t\tbias = adapt(i - oldi, out, oldi == 0);\n\n\t\t\t// `i` was supposed to wrap around from `out` to `0`,\n\t\t\t// incrementing `n` each time, so we'll fix that now:\n\t\t\tif (floor(i / out) > maxInt - n) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tn += floor(i / out);\n\t\t\ti %= out;\n\n\t\t\t// Insert `n` at position `i` of the output\n\t\t\toutput.splice(i++, 0, n);\n\n\t\t}\n\n\t\treturn ucs2encode(output);\n\t}\n\n\t/**\n\t * Converts a string of Unicode symbols (e.g. a domain name label) to a\n\t * Punycode string of ASCII-only symbols.\n\t * @memberOf punycode\n\t * @param {String} input The string of Unicode symbols.\n\t * @returns {String} The resulting Punycode string of ASCII-only symbols.\n\t */\n\tfunction encode(input) {\n\t\tvar n,\n\t\t    delta,\n\t\t    handledCPCount,\n\t\t    basicLength,\n\t\t    bias,\n\t\t    j,\n\t\t    m,\n\t\t    q,\n\t\t    k,\n\t\t    t,\n\t\t    currentValue,\n\t\t    output = [],\n\t\t    /** `inputLength` will hold the number of code points in `input`. */\n\t\t    inputLength,\n\t\t    /** Cached calculation results */\n\t\t    handledCPCountPlusOne,\n\t\t    baseMinusT,\n\t\t    qMinusT;\n\n\t\t// Convert the input in UCS-2 to Unicode\n\t\tinput = ucs2decode(input);\n\n\t\t// Cache the length\n\t\tinputLength = input.length;\n\n\t\t// Initialize the state\n\t\tn = initialN;\n\t\tdelta = 0;\n\t\tbias = initialBias;\n\n\t\t// Handle the basic code points\n\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\tcurrentValue = input[j];\n\t\t\tif (currentValue < 0x80) {\n\t\t\t\toutput.push(stringFromCharCode(currentValue));\n\t\t\t}\n\t\t}\n\n\t\thandledCPCount = basicLength = output.length;\n\n\t\t// `handledCPCount` is the number of code points that have been handled;\n\t\t// `basicLength` is the number of basic code points.\n\n\t\t// Finish the basic string - if it is not empty - with a delimiter\n\t\tif (basicLength) {\n\t\t\toutput.push(delimiter);\n\t\t}\n\n\t\t// Main encoding loop:\n\t\twhile (handledCPCount < inputLength) {\n\n\t\t\t// All non-basic code points < n have been handled already. Find the next\n\t\t\t// larger one:\n\t\t\tfor (m = maxInt, j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\t\t\t\tif (currentValue >= n && currentValue < m) {\n\t\t\t\t\tm = currentValue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n\t\t\t// but guard against overflow\n\t\t\thandledCPCountPlusOne = handledCPCount + 1;\n\t\t\tif (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tdelta += (m - n) * handledCPCountPlusOne;\n\t\t\tn = m;\n\n\t\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\n\t\t\t\tif (currentValue < n && ++delta > maxInt) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tif (currentValue == n) {\n\t\t\t\t\t// Represent delta as a generalized variable-length integer\n\t\t\t\t\tfor (q = delta, k = base; /* no condition */; k += base) {\n\t\t\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\t\t\t\t\t\tif (q < t) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tqMinusT = q - t;\n\t\t\t\t\t\tbaseMinusT = base - t;\n\t\t\t\t\t\toutput.push(\n\t\t\t\t\t\t\tstringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))\n\t\t\t\t\t\t);\n\t\t\t\t\t\tq = floor(qMinusT / baseMinusT);\n\t\t\t\t\t}\n\n\t\t\t\t\toutput.push(stringFromCharCode(digitToBasic(q, 0)));\n\t\t\t\t\tbias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);\n\t\t\t\t\tdelta = 0;\n\t\t\t\t\t++handledCPCount;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t++delta;\n\t\t\t++n;\n\n\t\t}\n\t\treturn output.join('');\n\t}\n\n\t/**\n\t * Converts a Punycode string representing a domain name or an email address\n\t * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n\t * it doesn't matter if you call it on a string that has already been\n\t * converted to Unicode.\n\t * @memberOf punycode\n\t * @param {String} input The Punycoded domain name or email address to\n\t * convert to Unicode.\n\t * @returns {String} The Unicode representation of the given Punycode\n\t * string.\n\t */\n\tfunction toUnicode(input) {\n\t\treturn mapDomain(input, function(string) {\n\t\t\treturn regexPunycode.test(string)\n\t\t\t\t? decode(string.slice(4).toLowerCase())\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/**\n\t * Converts a Unicode string representing a domain name or an email address to\n\t * Punycode. Only the non-ASCII parts of the domain name will be converted,\n\t * i.e. it doesn't matter if you call it with a domain that's already in\n\t * ASCII.\n\t * @memberOf punycode\n\t * @param {String} input The domain name or email address to convert, as a\n\t * Unicode string.\n\t * @returns {String} The Punycode representation of the given domain name or\n\t * email address.\n\t */\n\tfunction toASCII(input) {\n\t\treturn mapDomain(input, function(string) {\n\t\t\treturn regexNonASCII.test(string)\n\t\t\t\t? 'xn--' + encode(string)\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/** Define the public API */\n\tpunycode = {\n\t\t/**\n\t\t * A string representing the current Punycode.js version number.\n\t\t * @memberOf punycode\n\t\t * @type String\n\t\t */\n\t\t'version': '1.3.2',\n\t\t/**\n\t\t * An object of methods to convert from JavaScript's internal character\n\t\t * representation (UCS-2) to Unicode code points, and back.\n\t\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t\t * @memberOf punycode\n\t\t * @type Object\n\t\t */\n\t\t'ucs2': {\n\t\t\t'decode': ucs2decode,\n\t\t\t'encode': ucs2encode\n\t\t},\n\t\t'decode': decode,\n\t\t'encode': encode,\n\t\t'toASCII': toASCII,\n\t\t'toUnicode': toUnicode\n\t};\n\n\t/** Expose `punycode` */\n\t// Some AMD build optimizers, like r.js, check for specific condition patterns\n\t// like the following:\n\tif (\n\t\ttypeof define == 'function' &&\n\t\ttypeof define.amd == 'object' &&\n\t\tdefine.amd\n\t) {\n\t\tdefine('punycode', function() {\n\t\t\treturn punycode;\n\t\t});\n\t} else if (freeExports && freeModule) {\n\t\tif (module.exports == freeExports) {\n\t\t\t// in Node.js, io.js, or RingoJS v0.8.0+\n\t\t\tfreeModule.exports = punycode;\n\t\t} else {\n\t\t\t// in Narwhal or RingoJS v0.7.0-\n\t\t\tfor (key in punycode) {\n\t\t\t\tpunycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);\n\t\t\t}\n\t\t}\n\t} else {\n\t\t// in Rhino or a web browser\n\t\troot.punycode = punycode;\n\t}\n\n}(this));\n"]}