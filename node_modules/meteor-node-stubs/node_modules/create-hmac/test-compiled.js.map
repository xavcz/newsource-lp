{"version":3,"sources":["test.js"],"names":[],"mappings":";;AAAA,IAAI,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAA;;AAE1B,IAAI,UAAU,GAAG,CAAC,MAAM,EAAE,QAAQ,EAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAA;AAC3F,IAAI,OAAO,GAAG,CAAC,SAAS,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAA;;AAEpD,IAAI,OAAO,GAAG,OAAO,CAAC,wBAAwB,CAAC,CAAA;AAC/C,IAAI,UAAU,GAAG,OAAO,CAAC,WAAW,CAAC,CAAA;AACrC,UAAU,CAAC,OAAO,CAAC,UAAU,GAAG,EAAE;AAChC,SAAO,CAAC,OAAO,CAAC,UAAU,KAAK,EAAE;AAC/B,QAAI,GAAG,GAAG,IAAI,MAAM,CAAC,KAAK,CAAC,GAAG,EAAE,KAAK,CAAC,CAAA;AACtC,QAAI,WAAW,GAAG,IAAI,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,CAAA;;AAE/C,WAAO,CAAC,OAAO,CAAC,UAAU,MAAM,EAAE;AAChC,UAAI,CAAC,OAAO,GAAG,GAAG,GAAG,OAAO,GAAG,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,GAAI,SAAS,GAAG,MAAM,EAAE,UAAU,CAAC,EAAE;AACxF,YAAI,IAAI,GAAG,UAAU,CAAC,GAAG,EAAE,GAAG,CAAC,CAAA;;AAE/B,YAAI,cAAc,GAAG,MAAM,GAAG,WAAW,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,WAAW,CAAA;AACxE,YAAI,CAAC,MAAM,CAAC,cAAc,EAAE,MAAM,CAAC,CAAA;;AAEnC,YAAI,eAAe,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAA;AACzC,YAAI,MAAM,GAAG,IAAI,MAAM,CAAC,eAAe,EAAE,MAAM,CAAC,CAAA;;AAEhD,YAAI,SAAS,GAAG,KAAK,CAAC,QAAQ,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,QAAQ,CAAC,GAAG,MAAM,CAAA;AACzE,SAAC,CAAC,KAAK,CAAC,SAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,KAAK,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,CAAC,CAAA;AAC5D,SAAC,CAAC,GAAG,EAAE,CAAA;OACR,CAAC,CAAA;KACH,CAAC,CAAA;GACH,CAAC,CAAA;;AAEF,SAAO,CAAC,OAAO,CAAC,UAAU,KAAK,EAAE;AAC/B,QAAI,CAAC,OAAO,GAAG,GAAG,GAAG,iBAAiB,GAAG,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,KAAK,EAAE,UAAU,CAAC,EAAE;AACpF,UAAI,IAAI,GAAG,UAAU,CAAC,GAAG,EAAE,IAAI,MAAM,CAAC,KAAK,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC,CAAA;AACxD,UAAI,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,CAAA;;AAE3B,UAAI,MAAM,GAAG,IAAI,CAAC,IAAI,EAAE,CAAA;AACxB,UAAI,SAAS,GAAG,KAAK,CAAC,QAAQ,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,QAAQ,CAAC,GAAG,MAAM,CAAA;AACzE,OAAC,CAAC,KAAK,CAAC,SAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,KAAK,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,CAAC,CAAA;AAC5D,OAAC,CAAC,GAAG,EAAE,CAAA;KACR,CAAC,CAAA;GACH,CAAC,CAAA;CACH,CAAC,CAAA","file":"test-compiled.js","sourcesContent":["var test = require('tape')\n\nvar algorithms = ['sha1', 'sha224','sha256', 'sha384', 'sha512', 'SHA512', 'md5', 'rmd160']\nvar formats = [undefined, 'base64', 'hex', 'binary']\n\nvar vectors = require('hash-test-vectors/hmac')\nvar createHmac = require('./browser')\nalgorithms.forEach(function (alg) {\n  vectors.forEach(function (input) {\n    var key = new Buffer(input.key, 'hex')\n    var inputBuffer = new Buffer(input.data, 'hex')\n\n    formats.forEach(function (format) {\n      test('hmac(' + alg + ') w/ ' + input.data.slice(0, 6)  + '... as ' + format, function (t) {\n        var hmac = createHmac(alg, key)\n\n        var formattedInput = format ? inputBuffer.toString(format) : inputBuffer\n        hmac.update(formattedInput, format)\n\n        var formattedOutput = hmac.digest(format)\n        var output = new Buffer(formattedOutput, format)\n\n        var truncated = input.truncate ? output.slice(0, input.truncate) : output\n        t.equal(truncated.toString('hex'), input[alg.toLowerCase()])\n        t.end()\n      })\n    })\n  })\n\n  vectors.forEach(function (input) {\n    test('hmac(' + alg + ') as stream w/ ' + input.data.slice(0, 6) + '...', function (t) {\n      var hmac = createHmac(alg, new Buffer(input.key, 'hex'))\n      hmac.end(input.data, 'hex')\n\n      var output = hmac.read()\n      var truncated = input.truncate ? output.slice(0, input.truncate) : output\n      t.equal(truncated.toString('hex'), input[alg.toLowerCase()])\n      t.end()\n    })\n  })\n})\n"]}